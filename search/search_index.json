{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"1024-Liberty-Getting-Started/","title":"1024 - Liberty Getting Started","text":""},{"location":"1024-Liberty-Getting-Started/#lab-1024","title":"Lab 1024:","text":""},{"location":"1024-Liberty-Getting-Started/#liberty-getting-started","title":"Liberty Getting Started","text":"<p>WebSphere Liberty (Liberty) is a lightweight open framework for building fast and efficient cloud-native Java microservices. Build cloud-native apps and microservices while running only what you need. It is the most flexible server runtime available to Java developers in this solar system.</p> <p>Liberty is built on the open source Open Liberty codebase. Open Liberty is designed with both developers and application business owners in mind.</p> <ul> <li>It delivers the latest Java APIs and integrates with the most popular Developer and Build tools.</li> <li>It has built-in innovation like zero-migration to reduce application runtime costs and delivery effort.</li> <li>Liberty is downstream of Open Liberty so anything that works on Open Liberty works on Liberty.</li> <li>Same Monthly Continuous Delivery Release Cycle as Liberty</li> <li>You do not need to switch to Liberty for commercial support</li> </ul> <p>Liberty Tools is a set of intuitive developer tools for the Eclipse IDE, Visual Studio Code, and IntelliJ IDEA development environments. These tools adopt a Maven/Gradle-centric approach and enable fast, iterative cloud-native Java application development through Liberty dev mode. Liberty Tools also provides helpful, time-saving features such as code completion, hover descriptions, and configuration diagnostics for Jakarta EE APIs, MicroProfile APIs, and Liberty configuration. For more information, check out the Liberty Tools overview.</p> <p>In the lab, there will be different roles involved with perform different tasks using different tools. You will perform all the different roles during the lab. </p> <ul> <li>You will start as an application developer and use Liberty starter and the code assistant to develop a simple web application. But don't worry, you do not have to be a developer to do this.</li> <li>As Liberty configuration opertor, you will use the configuration assistant and concepts like includes and variables to create a portable configuration. </li> <li>As Liberty administrator, you will install Liberty from a kernel image, add missing features, configure logging, security and so on, will use the Liberty REST APIs to review the configuration and use Liberty Admin Center for monitoring.</li> </ul> <p>These are the objectives in the lab:</p> <ul> <li> <p>As an application developer:</p> <ul> <li>Tasks: <ul> <li>Develops the application.</li> <li>Creates a basic Liberty configuration for the application</li> </ul> </li> <li>Tools:<ul> <li>Apache Maven <ul> <li>to build the project </li> <li>to download the Open Liberty server runtime from the maven repository</li> </ul> </li> <li>Liberty Maven Plugin for inner-loop development via Liberty Dev Mode<ul> <li>to build the application war and deploy it to Liberty</li> </ul> </li> <li>Visual Studio Code <ul> <li>as IDE to build the application code</li> </ul> </li> <li>Liberty Tools plugin for Visual Studio Code<ul> <li>provides a Liberty dashboard with Dev Mode integration in the IDE</li> <li>provides Jakarta EE and MicroProfile code assistance</li> <li>provides Liberty configuration assistance</li> </ul> </li> <li>Liberty Starter Project <ul> <li>to generate a maven project for Liberty </li> </ul> </li> <li>Open Liberty / WebSphere Liberty<ul> <li>as runtime for the Java application that will be developed</li> <li>to create a server package</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>As a Liberty configuration operator:</p> <ul> <li>Tasks: <ul> <li>Extract Liberty package from command line and implement Liberty dynamic updates</li> <li>Develop portable Liberty configuration snippets using includes, variables and much more.</li> </ul> </li> <li>Tools:<ul> <li>Visual Studio Code with Liberty Tools plugin as editor with configuration assistance</li> </ul> </li> </ul> </li> <li> <p>As a Liberty administrator:</p> <ul> <li>Tasks: <ul> <li>Installs Liberty</li> <li>Configures Liberty for the target application using Liberty configuration snippets</li> <li>Applies security to harden the Liberty configuration</li> <li>Configure logging using configDropins</li> <li>Review the configuration using LIberty REST APIs</li> <li>Monitor Liberty using the Admin Center</li> </ul> </li> <li>Tools:<ul> <li>Liberty server command to create a Liberty instance and start, stop or dump it</li> <li>Liberty installUtility to install missing features</li> <li>Liberty securityUtility to create a keystore or encode a password</li> <li>Liberty REST APIs and Admin Center</li> </ul> </li> </ul> </li> </ul>"},{"location":"1024-Liberty-Getting-Started/#access-the-lab-environment","title":"Access the lab environment","text":"<ol> <li> <p>Access the lab environment from your web browser.</p> <p>The lab environment page is displayed, the lab environment contains one (1) Linux VMs, with the Graphical User Interface (GUI) for you to access and work in this lab.</p> <p></p> </li> <li> <p>Click Red Hat icon to access it.</p> <p> </p> </li> <li> <p>Click techzone user to log in.</p> <p></p> </li> <li> <p>Enter the password as: IBMDm0s! and press Enter.</p> <p></p> <p>Note:\u00a0That is a numeric zero in IBMDem0s!</p> <p>The lab VM GUI is displayed.</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#tips-for-working-in-the-lab-environment","title":"Tips for working in the lab environment:","text":"<ol> <li> <p>You can use the VM Desktop tools to fit to window or resize the     window.</p> <p></p> </li> <li> <p>You can copy text from the lab guide into the lab     environment using the VM Desktop Send Text tool.</p> <p></p> <p>a. Copy the text from the lab guide that you want to paste into the lab environment.</p> <p>b. Open a terminal window, or a text editor or a web browser in the VM Desktop where you want to copy the text to.</p> <p>c. Click the Send Text icon in the VM Desktop tool bar, paste the text into its window, then again click Send Text to send the text to an open command shell and close its window.</p> <p></p> <p>The text is now copied to the terminal window, or the text editor or the web browser you opened in the previous step.</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#execute-lab-tasks","title":"Execute Lab Tasks","text":""},{"location":"1024-Liberty-Getting-Started/#1-create-the-required-working-directories","title":"1 Create the required working directories","text":"<ol> <li> <p>Double-click the terminal icon to open a terminal window.</p> <p> </p> </li> <li> <p>Create a Student directory and some sub-directories used in the lab with commands:</p> <pre><code>mkdir ~/Student\nmkdir ~/Student/dev\nmkdir ~/Student/ops\nmkdir ~/Student/assets\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#2-develop-a-liberty-web-application","title":"2 Develop a Liberty web application","text":"<p>The objective of this section is to develop a simple web application for Liberty. You will use a Liberty starter application to now start from scratch and use Visual Studio Code and Liberty Tools to build the application.</p>"},{"location":"1024-Liberty-Getting-Started/#21-create-a-starter-app-project","title":"2.1 Create a starter app project.","text":"<p>In this scenario, you want to create a Jakarta EE 10 Web application with the name simpleweb and will use maven to build it. The fastest way to get started is to use an Open Liberty starter application which generates a project with the maven configuration as well as a basic Liberty setup.</p> <p></p> <p>The Open Liberty starter gives you a simple, quick way to get the necessary files to start building an application on Open Liberty. There is no need to search how to find out what to add to your maven or gradle build files. A simple RestApplication.java file is generated for you to start creating a REST based application. A server.xml configuration file is provided with the necessary features for the MicroProfile and Jakarta EE versions that you previously selected. </p> <ol> <li> <p>Click the Activties button.</p> <p></p> </li> <li> <p>Open a browser window by double-clicking on Activities and then select the Firefox browser icon.</p> <p></p> <p>If you get a pop-up that Authentication is required, enter IBMDem0s!. </p> <p></p> </li> <li> <p>Type the URL as: https://openliberty.io/start/ and press Enter.  </p> </li> <li> <p>Change the artifact name to simpleweb, change the Java level to 17 and leave the rest as is, then click Generate project </p> <p></p> <p>The project zip file is saved under the Downloads directory.</p> <p></p> </li> <li> <p>You will see a pop-up like the one below. Click Got it!  to close the window.</p> <p></p> </li> <li> <p>Extract the file.</p> <p>a. Click Activities and switch to the terminal window. </p> <p>b. Move the starter project to the developer directory and extract it with commands:</p> <pre><code>mv ~/Downloads/simpleweb.zip ~/Student/dev\nunzip ~/Student/dev/simpleweb.zip -d ~/Student/dev/simpleweb\n</code></pre> <p></p> <p>The project has been created under the ~/Student/dev/simpleweb directory.</p> <p>c. List the content via following command:</p> <pre><code>ls -lrt ~/Student/dev/simpleweb\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#22-inspect-the-starter-project-using-open-visual-studio-code","title":"2.2 Inspect the starter project using Open Visual Studio Code","text":"<p>Now you will use Visual Studio Code to see what has been generated as part of the starter project.</p> <ol> <li> <p>From the terminal window, start Visual Studio Code.</p> <pre><code>cd ~/Student/dev/simpleweb/\ncode .\n</code></pre> <p></p> <p>Visual Studio Code UI will be opened.</p> </li> <li> <p>Click on Yes, I trust the authors to continue.</p> <p></p> <p>If you see during the lab one of the pop-ups below or any other pop-up asking to install something, close the pop-up without installation by clicking the X.  </p> </li> <li> <p>Investigate into the generated project:</p> <p>In Visual Studio Code, take a look at the Explorer section to see the content of the project. You can find a src and a target folder, a Dockerfile and a maven build file (pom.xml).</p> <p></p> </li> <li> <p>Take a look at the generated Maven configuration </p> <p>a. Click pom.xml to see the maven pom. In the build section, you can find the configuration of the liberty-maven-plugin.</p> <p></p> <p></p> <p>Don\u2019t worry if the version of the plugin has changed to 3.10.2 or later. </p> <p>b. Finally close the pom.xml file.</p> </li> <li> <p>Review the generated Liberty configuration</p> <p>a.  Open src &gt;  main &gt;liberty &gt; config &gt; server.xml to see the Liberty configuration.</p> <p></p> <p>As you can see, the features for jakartaee-10 and MicroProfile-6.1 have been configured.</p> <p></p> <p>b. Scroll down and you can see that the http endpoint and the web application have been configured.</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#23-adjust-the-liberty-configuration","title":"2.3 Adjust the Liberty configuration","text":"<p>The simpleweb application will not require the full Jakarta EE 10 standard but only the servlet specification.</p> <p>As best practice to optimize the footprint of the application runtime regarding memory and disk space and limit the number of potential vulnerabilities, you should define only the features that are required by the application. In this case, you are ging to replace the jakartaee-10 feature with an appropriate servlet feature. </p> <ol> <li> <p>In the Visual Studio Code editor for server.xml, scroll up to the feature section.</p> </li> <li> <p>Delete the lines \\jakartaee-10.0\\ and \\&lt; feature&gt;MicroProfile-6.1\\.     Your featureManager section should now look like this:</p> <p></p> </li> <li> <p>Now you will use the Liberty configuration assistant to define the servlet feature. Place your cursor at the beginning of an empty line in the featureManager section. Then press the CTRL key and press SPACE to activate the configuration assistant. You should see something like:</p> <p></p> <p></p> <p>You might have to click on the arrow right to feature to get the description. </p> </li> <li> <p>Select feature and the feature element gets added.</p> <p></p> </li> <li> <p>Use again CTRL+SPACE to get the list of available features.</p> <p></p> </li> <li> <p>Type the word servlet to see the available servlet features.</p> <p></p> </li> <li> <p>Use the arrow-down key to get the description for servlet-6.0.</p> <p></p> </li> <li> <p>Select the feature servlet-6.0 and your configuration should now look like this:</p> <p></p> </li> <li> <p>For this part of the lab, you do not need to define a keystore or the basic registry, so you need to delete the generated entries.     Your configuration should now look like this:</p> <p></p> </li> <li> <p>Save the configuration by using CTRL+S.</p> </li> <li> <p>Close the server.xml file.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#24-using-liberty-dev-mode","title":"2.4  Using Liberty Dev Mode","text":"<p>Liberty development mode, or dev mode, allows you to develop applications with any text editor or IDE by providing hot reload and deployment, on demand testing, and debugger support. Liberty Dev Mode is enabled through Maven and Gradle projects.</p> <p>Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes.</p> <p>You can run tests on demand or even automatically so that you can get immediate feedback on your changes. You can also attach a debugger at any time to debug your running application.</p> <p></p> <p>You can use the capabilities of Liberty dev mode inside and outside of an IDE. This provides you the flexibility of choice. In a terminal window, you would use Liberty in dev mode with maven using the command mvn liberty:dev or mvn liberty:devc if you want to develop in a container. </p> <p>In the lab environment, the Liberty tools plugin has been installed into Visual Studio Code. Therefore you will use the integrated Liberty dashboard instead.\u2003</p> <ol> <li> <p>In Visual Studio Code, expand the Liberty Dashboard.</p> <p></p> </li> <li> <p>Right-click on simpleweb and then start to start the server in dev mode.</p> <p></p> </li> <li> <p>A terminal opens within Visual Studio Code and you can see that the start of the build process gets triggered.</p> <p></p> </li> <li> <p>The Liberty plugin as well as the Liberty server artifacts get downloaded, then the server is ready for testing.</p> <p></p> </li> <li> <p>Switch to the browser window and enter the URL localhost:9080. You should see something like this:</p> <p></p> <p></p> <p>If you get a pop-up with Authentication required, enter the password IBMDem0s! and click on Unlock. </p> <p>Now, let\u2019s edit the simpleweb application.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#25-edit-the-simpleweb-application","title":"2.5 Edit the simpleweb application","text":"<p>Now you will edit the simpleweb application which only consists of a servlet. Thanks to Liberty code assistant, you don't have to write the code on your own. </p> <ol> <li> <p>Switch to Visual Studio Code.</p> </li> <li> <p>In Visual Studio Code, expand the path to src/main/java/com/demo/rest, then right-click on demo and select New File.</p> <p></p> </li> <li> <p>Enter the name helloWorldServlet.java and press ENTER.</p> <p></p> </li> <li> <p>The file src/main/java/com/demo/helloWorldServlet.java is generated and opens in an editor.</p> <p></p> </li> <li> <p>Remove all code from the file. Then enter servlet.</p> <p></p> <p>The code assistant window is shown.</p> <p></p> <p>If you do not see the code assistant window, enter CTRL+Space to activate it. </p> </li> <li> <p>The code assistant offers some servlet methods for Jakarta EE. Select servlet_doget, and the required starter code gets generated. As you can see, the fields that should be changed are highlighted.</p> <p></p> </li> <li> <p>Change the servletName to helloWorldServlet and the urlPatters to /helloWorld. The code should now look like this:</p> <p></p> </li> <li> <p>Press CTRL+S to save the code change. Take a look at the terminal output. As Liberty has been started in DevMode, the code changes are picked up automatically, the source gets compiled and Liberty gets updated.</p> <p></p> </li> <li> <p>Switch to the browser and open the URL localhost:9080/simpleweb/helloWorld. You should see the output of the created servlet.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and change the source code of the servlet response text to something like this: helloWorld - Example HTTP GET request for HTTPServlet</p> <p></p> </li> <li> <p>Save the changes and reload the page in the browser. The output should be updated.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and close the editor for the file helloWorldServlet.java.</p> <p>Final step as a developer is to export the developed application as WAR file so that it can be used in the next part of the lab.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#26-export-the-developed-application-as-war-file","title":"2.6 Export the developed application as WAR file","text":"<p>Export the developed application so that it can be deployed to Liberty by the operations team.</p> <p>The generated maven pom by default does not generate a WAR file as it uses a \u201clooseApplication\u201d approach to optimize the inner-loop development experience. (For more details, see https://github.com/OpenLiberty/ci.maven). To change the default build behaviour, you need to adjust the pom.xml file and configure the Liberty maven plugin to generate a WAR by setting the property: \\false\\.</p> <ol> <li> <p>Switch back to Visual Studio Code.</p> </li> <li> <p>In the Liberty dashboard, right-click on the simpleweb application and select Stop (or use CTRL+C on the terminal window instead).</p> <p></p> </li> <li> <p>Verify in the terminal that Liberty has been stopped.</p> <p></p> </li> <li> <p>In Visual Studio Code, open the file pom.xml and add to the Liberty plugin configuration the lines:</p> <pre><code>&lt;configuration&gt;\n&lt;looseApplication&gt;false&lt;/looseApplication&gt;\n&lt;/configuration&gt;\n</code></pre> <p></p> </li> <li> <p>If you would start Liberty now again in Dev Mode, the property looseApplication would be ignored and you would see a warning like this:   </p> <p></p> <p>Therefore, you must start Liberty in run mode to generate the WAR file. This can be done by entering in the terminal window the command:</p> <pre><code>mvn liberty:run\n</code></pre> <p></p> <p>As you can see in the screenshot above, maven has built the file simpleweb.war and stored it at the ~/Student/dev/simpleweb/target/ directory.</p> </li> <li> <p>Scroll down and you can see that it has been installed into the directory ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer/apps.</p> <p></p> </li> <li> <p>Feel free to test the application in the browser, then stop the Liberty instance by using CTRL+C.</p> </li> <li> <p>Close Visual Studio Code.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#27-create-a-server-package","title":"2.7 Create a server package","text":"<p>For the next lab, you will need the WAR file as well as the server.xml which can be found in the created Liberty instance at: ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer.</p> <p>More complex applications also depend on other files like utility jars, additional Liberty configuration files and JDBC drivers for example. </p> <p>So instead of copying the files one by one, you could create a server package that contains all files.</p> <p>What is a server package? A server package can contain only the user directory or the full application server.  </p> <p>The syntax of the server package command is: </p> <pre><code>server package server_name --archive=package_file_name.jar --include=all\n</code></pre> <p>With the option --include=all, the Liberty binaries as well as the usr directory get packaged.</p> <p>For more details and options, see https://www.ibm.com/docs/en/was-liberty/base?topic=line-packaging-liberty-server-from-command.</p> <ol> <li> <p>To create the server package, execute the following command:</p> <pre><code>~/Student/dev/simpleweb/target/liberty/wlp/bin/server package defaultServer --archive=simpleweb-serverpackage.jar --include=all\n</code></pre> <p></p> </li> <li> <p>To hand over the server package to the ops team, use the following commands: </p> <pre><code>cp ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer/simpleweb-serverpackage.jar ~/Student/assets\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#28-recap","title":"2.8 Recap","text":"<p>Congratulations, you have finished the application development part.</p> <p>Let\u2019s recap what you did so far. </p> <p>You acted as a developer and used Visual Studio Code and the Liberty Tools for these tasks:</p> <ul> <li>generated a Liberty starter project including the required maven and Liberty configuration. </li> <li>used the Liberty Tools configuration assistant to adjust the Liberty configuration.</li> <li>used Liberty Dev Mode for inner-loop development.</li> <li>updated the simpleweb application using the Jakarta EE code assistant. </li> <li>exported the web application as WAR file.</li> <li>created a server package including application and Liberty binaries.</li> </ul> <p>Useful links: https://github.com/OpenLiberty/liberty-tools-vscode/blob/HEAD/docs/user-guide.md </p>"},{"location":"1024-Liberty-Getting-Started/#3-liberty-operations","title":"3. Liberty operations","text":"<p>Now you will work with Liberty from an operational point of view. Development has handed over a Liberty server package to you. The server package contains all necessary configuration to run the application called simpleweb. The provided server package is typically not production-ready, as it is likely not portable between stages and does not fulfill the requirements regarding security and so on. </p> <p>In this part of the lab, you will explore how to create configuration snippets and how to administer Liberty from the command line. But first you will explore the server package and get an understanding about dynamic updates.</p>"},{"location":"1024-Liberty-Getting-Started/#31-explore-the-server-package","title":"3.1 Explore the server package","text":"<p>You will now explore the Liberty server package to get a better understanding how to use it, in addition you will use it to learn more about Liberty administration from the command line and Liberty dynamic updates.</p> <p>In this section, you will use the server run command instead of the server start command. This will allow you to see the logs immediately instead of having to use a tail command. It will also allow you to stop the Liberty server via CTRL+C </p>"},{"location":"1024-Liberty-Getting-Started/#311-extract-liberty-package-from-command-line","title":"3.1.1 Extract Liberty package from command line","text":"<ol> <li> <p>Extract the Liberty server package and try to run it. When asked, enter test as target directory.</p> <pre><code>cd ~/Student/ops/\njava -jar ~/Student/assets/simpleweb-serverpackage.jar\n</code></pre> <p></p> <p>The directory test/wlp got created and contains the configured Liberty instance including application. </p> </li> <li> <p>Run the following command to get the Liberty version:</p> <pre><code>test/wlp/bin/productInfo version\n</code></pre> <p></p> </li> <li> <p>Run the following command to list the Liberty features that have been installed:</p> <pre><code>test/wlp/bin/productInfo featureInfo\n</code></pre> <p></p> <p>As you can see, the server package provided by the developer only contains the servlet-6.0 features which is the only feature required by the application. </p> </li> <li> <p>Run the following command to get the list of defined Liberty application servers:</p> <pre><code>test/wlp/bin/server list\n</code></pre> <p></p> </li> <li> <p>Start the Liberty server instance by running the command:</p> <pre><code>test/wlp/bin/server start defaultServer\n</code></pre> <p></p> <p>This runs the server in the background and the output is written to files in the test/wlp/bin/servers/defaultServer/logs directory.</p> <p>To start the server in the foreground (so the console messages are displayed in the command window) you would use the command </p> <pre><code>test/wlp/bin/server run defaultServer.\n</code></pre> <p>You will use this command later in the lab.</p> </li> <li> <p>View the Liberty server\u2019s messages.log file to see the server startup messages via the command:</p> <pre><code>cat test/wlp/usr/servers/defaultServer/logs/messages.log\n</code></pre> <p></p> <p>At the beginning of the log, you can see that Open Liberty version is used. The server is started when the message \u201cThe defaultServer server is ready to run a smarter planet\u201d is displayed in the messages.log file.</p> </li> <li> <p>Test that the application is accessible via URL http://localhost:9080/simpleweb/helloWorld</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#312-liberty-dynamic-updates","title":"3.1.2 Liberty dynamic updates","text":"<p>Let\u2019s do a short excurse about Liberty dynamic updates. You will use Visual Studio Code to perform some minor configuration changes. For this part of the lab, you could instead also use a simple text editor like vi or gedit instead. </p> <ol> <li> <p>Open Visual Studio Code.</p> <pre><code>cd ~/Student/ops/test\ncode .\n</code></pre> <p></p> </li> <li> <p>Visual Studio Code opens. Click on Yes, if you are asked to trust the author.</p> <p></p> </li> <li> <p>In Visual Studio Code, open a terminal window</p> <p></p> </li> <li> <p>In the terminal, use the tail command to display the Liberty message log.</p> <pre><code>tail -f wlp/usr/servers/defaultServer/logs/messages.log\n</code></pre> <p></p> </li> <li> <p>In Visual Studio Code, navigate to wlp &gt; usr &gt; servers &gt; defaultServer and open the file server.xml.</p> <p></p> </li> <li> <p>In the server.xml file, change the httpPort setting from port 9080 to port 9081.</p> <p></p> <p>You can see in the terminal that the change is picked up and Liberty listens now on port 9081.</p> <p></p> </li> <li> <p>Change the webApplication contextRoot setting from \u201c/simpleweb\u201d to \u201c/mysimpleweb\u201d.</p> <p></p> <p>You can see in the log that the change is picked up.</p> <p></p> </li> <li> <p>Switch to the browser and access the application via URL localhost:9081/mysimpleweb/helloWorld.</p> <p></p> <p>As you have seen, you can change the Liberty configuration without having to restart the server.  You will explore this further later in the lab when you dynamically update the logging for example. Now let's stop the server.</p> </li> <li> <p>In the terminal, press CTRL+C to stop the tail command. </p> </li> <li> <p>Stop the Liberty instance by executing in the terminal the command:</p> <pre><code>wlp/bin/server stop defaultServer\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#32-create-liberty-configuration-snippets","title":"3.2 Create Liberty configuration snippets","text":"<p>There are different ways to create a Liberty server configuration and there are often different roles involved to get the final configuration for production. The application specific configuration, for example, is typically created by the application developer while security related configuration is typically done by operations. Operations is typically also responsible to make the configuration portable across stages, configure logging and so on. </p> <p>You could create Liberty configuration snippets by copying over the related snippets from the product documentation and adjust them in a normal text editor. In this part of the lab, you will see that the Liberty tools plugin in Visual Studio Code can help you to speed up the create of configuration snippets as it provides configuration assistance including documentation. Let\u2019s get started.</p> <p>You will now modify the file server.xml which has been provided as part of the server package to make it more portable and re-usable.</p> <ol> <li> <p>In Visual Studio Code, open the file server.xml if you closed it previously.</p> <p></p> </li> <li> <p>Take a look at the httpEndpoint element.</p> <p></p> <p>As mentioned in the comment, the httpEndpoint is by default not accessible from a remote client.  This is good from security point of view and works fine if the client is local to the server. But if you, for example, use a remote load balancer or a remote HTTP server, this will not work. So there will be likely situations where you want to allow access to the application from a remote client and you must add a host attribute. You will use the Liberty Tools configuration assistant to do this.</p> </li> <li> <p>Place the cursor at the end of the line &lt;httpEndpoint id=\"defaultHttpEndpoint\" and press ENTER to add another line. </p> <p>In the new line, press CTRL+SPACE to see the available attributes. </p> <p>Use the arrow-down key and navigate to the host attribute to see the description of the attribute.</p> <p></p> </li> <li> <p>Select host and your configuration should look like this:</p> <p></p> <p>As you can see, the attribute host defaults to localhost.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#321-use-variables-for-portability","title":"3.2.1 Use variables for portability","text":"<p>To make the configuration portable, you will replace the fixed values for ports and host with Liberty variables. Liberty variables can be defined with a default value and overridden from inside or outside Liberty. To show the concept, you will adjust the httpEndpoint settings.</p> <p>You could use the configuration snippet below to replace the existing httpEndpoint configuration with a portable configuration. </p> <pre><code>&lt;httpEndpoint id=\"defaultHttpEndpoint\"\n              host=\"${httpEndpoint_host}\"\n              httpPort=\"${httpEndpoint_port}\"\n              httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n&lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n&lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n&lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n</code></pre> <p>Instead you will use the Liberty configuration assistant to get an understanding how you could create such a configuration snippet.</p> <ol> <li> <p>Place the cursor in an empty line under the httpEndpoint section, then enter var and press CTRL+SPACE.</p> <p></p> </li> <li> <p>Select variable, then enter as name \"httpEndpoint_port\".</p> <p></p> </li> <li> <p>Place the cursor after name=\"httpEndpoint_port\", enter a SPACE and press CTRL+SPACE.</p> <p></p> </li> <li> <p>Select defaultValue and enter as value 9080.</p> <p> </p> </li> <li> <p>Use copy and paste to create two additional variables: </p> <ul> <li>one with the name \"httpEndpoint_secure_port\" and the default value \"9443\"</li> <li>the other one with the name \"httpEndpoint_host\" and the value \"*\".</li> </ul> <p>Your configuration should now look like this:</p> <p></p> </li> <li> <p>Switch to the httpEndpoint section, remove for the attribute host the value \"localhost\", enter ${ht and press CTRL+SPACE.</p> <p></p> <p>As you can see, the variable names are offered. </p> </li> <li> <p>Select \"httpEndpoint_host\", then enter \"}\". Your configuration should look like this:</p> <p></p> </li> <li> <p>Do the same kind of change for the attributes httpPort and httpsPort. </p> <p>Your final httpEndpoint configuration should now look like this:</p> <p></p> </li> <li> <p>Save your changes.</p> <p>Your server.xml file should now look like this:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;server description=\"new server\"&gt;\n\n&lt;!-- Enable features --&gt;\n&lt;featureManager&gt;\n    &lt;feature&gt;servlet-6.0&lt;/feature&gt;\n&lt;/featureManager&gt;\n\n&lt;!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" --&gt;\n&lt;httpEndpoint id=\"defaultHttpEndpoint\"\n              host=\"${httpEndpoint_host}\"\n              httpPort=\"${httpEndpoint_port}\"\n              httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n&lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n&lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n&lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n\n&lt;!-- Automatically expand WAR files and EAR files --&gt;\n&lt;applicationManager autoExpand=\"true\"/&gt;\n\n&lt;!-- Configures the application on a specified context root --&gt;\n&lt;webApplication contextRoot=\"/mysimpleweb\" location=\"simpleweb.war\" /&gt;\n\n&lt;!-- Default SSL configuration enables trust for default certificates from the Java runtime --&gt;\n&lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n&lt;/server&gt;\n</code></pre> <p>Now let's test if the Liberty configuration is really portable.</p> </li> <li> <p>From the Visual Studio Code terminal, start the Liberty server instance via the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, the Liberty server gets started and listens on port 9080.</p> </li> <li> <p>Press CTRL+C to stop the server. </p> </li> <li> <p>Set the httpEnpoint_port value in the Operating System environment variable and start the Liberty server again.</p> <pre><code>export httpEndpoint_port=9081\nwlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, the Liberty server now listens on port 9081, which shows that you can now override from outside Liberty the default settings defined in the Liberty server.xml file. In a Kubernetes environment, you could for example use a config map to change configuration settings.</p> </li> <li> <p>Press CTRL+C to stop the server. Then unset the operating system variable by the following command:</p> <pre><code>unset httpEndpoint_port\n</code></pre> <p>This will restore the httpEnpoint_port value in the Operating System environment variable to 9080.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#322-use-includes-for-better-re-use-and-visibility","title":"3.2.2 Use includes for better re-use and visibility","text":"<p>If you configure a Liberty server with resources like datasources or JMS queues, user registry and more, your configureation file can get quite long and not easy to be read and maintained. Liberty allows to specify configuration resources to get included into the server configuration. This helps to keep control over the configuration, provides better reuse of the different configuration and allows to split the responsibility for the configuration between different teams. The developer for example could create the application specific configuration and operations the security configuration.</p> <p>You will now use includes to structure the server configuration.</p> <ol> <li> <p>In the terminal in Visual Studio Code, copy the existing server.xml file into a new file called application-config.xml.</p> <pre><code>cp wlp/usr/servers/defaultServer/server.xml wlp/usr/servers/defaultServer/application-config.xml\n</code></pre> <p></p> </li> <li> <p>Open the newly created file application-config.xml in Visual Studio Code.</p> <p></p> </li> <li> <p>Remove all configuration inside the server section other than the definition of the webApplication element.     Your application-config.xml should look like this:</p> <p></p> </li> <li> <p>Save the changes, then close the application-config.xml file.</p> </li> <li> <p>Switch to the server.xml file. Delete the webApplication element, then enter include and press CTRL+SPACE.</p> <p>The Liberty configuration assistant shows you the available elements.</p> <p></p> </li> <li> <p>Select include and the element gets generated. As value for location, enter \"application-config.xml\".</p> <p></p> </li> <li> <p>As the owner of the server.xml file, you might want to decide what happens if the file to be included does not exist or contains conflicting configuration settings. </p> <p>Go to the end of the include statement and press CTRL+SPACE. The available attributes for the include element are displayed.</p> <p></p> <p>As you can see, you could define the include file as optional, so Liberty would not throw an error if the include file is missing. </p> </li> <li> <p>Click on onConflict to see the available attributes for that options. </p> <p></p> <p>If you want to make sure, that settings in the server.xml cannot be overridden by included files, select IGNORE, otherwise use MERGE or REPLACE. </p> </li> <li> <p>Click on MERGE and your include statement should look like this:</p> <pre><code>&lt;include location=\"application-config.xml\" onConflict=\"MERGE\"/&gt;\n</code></pre> <p></p> <p>You can configure multiple include files, for example one file for security-config.xml and another one for resource specific configuration settings like for databases or JMS. Now let's test if the include works.</p> </li> <li> <p>Save the server.xml file.</p> </li> <li> <p>From the Visual Studio Code terminal, start the Liberty server instance via the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p>As you can see, the include has been found and processed, so that the application is started.</p> <p></p> <p>Keep the server running as we need it in the next section.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#323-enable-transport-security","title":"3.2.3    Enable transport security","text":"<p>Right now, you are not able to access Liberty via HTTPS. While the HTTPS port 9443 has been defined, SSL has not been enabled in Liberty. SSL can be enabled using the transport security feature. So the next step is to enable transport security and take a look at other related topics like keystores.</p> <ol> <li> <p>In the file server.xml, navigate the to featureManager section.</p> </li> <li> <p>Add the feature transportSecurity-1.0 to the featureManager section by add the line:</p> <pre><code>&lt;feature&gt;transportSecurity-1.0&lt;/feature&gt;\n</code></pre> <p>Alternatively, you can use the configuration assistant to enable it.</p> <p></p> </li> <li> <p>Take a look at the logs and you can see that the feature is not available yet.</p> <p></p> <p>This is due to the fact that the Liberty server package generated by the developer only includes the required features (features that have been defined in the server configuration file). You will use the Liberty featureUtility tool to install the missing feature. The feature could be downloaded from a local repository if configured, in this case you will download it from a central maven repository.</p> </li> <li> <p>In the terminal window, stop the Liberty instance by pressing CTRL+C.</p> <p>Then execute the following command to install the missing feature from the maven repository:</p> <pre><code>wlp/bin/featureUtility installFeature transportSecurity-1.0\n</code></pre> <p></p> </li> <li> <p>Then start the Liberty instance again by running the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, Liberty created a certificate and placed it into the SSL key file \"wlp/usr/servers/defaultServer/resources/security/key.p12\". </p> </li> <li> <p>Liberty used the variable keystore_password to secure the keystore. As you did not define a value for the variable keystore_password, Liberty generated a password and stored it in the server.env file. In Visual Studio, open the server.env file to see the keystore password. Your password will likely look different as it has been generated randomly.</p> <p></p> <p>Close the server.env file.</p> </li> <li> <p>To make it more visible where the keystore password comes from, add the following definition to the server.xml file:</p> <pre><code>&lt;keyStore id=\"defaultKeyStore\" password=\"${keystore_password}\" /&gt;\n</code></pre> <p>The keyStore element also allows you to specify a different keystore location and much more.</p> <p></p> </li> <li> <p>Review your configuration in server.xml. It should look like this:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;server description=\"new server\"&gt;\n\n    &lt;!-- Enable features --&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;servlet-6.0&lt;/feature&gt;\n        &lt;feature&gt;transportSecurity-1.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n\n    &lt;!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" --&gt;\n    &lt;httpEndpoint id=\"defaultHttpEndpoint\"\n                host=\"${httpEndpoint_host}\"\n                httpPort=\"${httpEndpoint_port}\"\n                httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n    &lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n    &lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n    &lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n\n    &lt;!-- Automatically expand WAR files and EAR files --&gt;\n    &lt;applicationManager autoExpand=\"true\"/&gt;\n\n    &lt;!-- Configures the application on a specified context root --&gt;\n    &lt;include location=\"application-config.xml\" onConflict=\"MERGE\"/&gt;\n\n    &lt;!-- Default SSL configuration enables trust for default certificates from the Java runtime --&gt;\n    &lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n    &lt;keyStore id=\"defaultKeyStore\" password=\"${keystore_password}\" /&gt;\n&lt;/server&gt;\n</code></pre> </li> <li> <p>Now let's see if the application is accessible via HTTPS. </p> <p>Switch to the browser and access Liberty via https://localhost:9443/mysimpleweb/helloWorld.</p> <p>You should get a security warning like this:</p> <p></p> </li> <li> <p>Click on Advanced, then scroll down and click on \"Accept the Risk and Continue\".</p> <p></p> </li> <li> <p>You should see the output of the web application.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and stop the running Liberty instance by entering CTRL+C in the terminal window. </p> </li> <li> <p>Close Visual Studio Code.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#324-backup-the-generated-files","title":"3.2.4 Backup the generated files","text":"<p>You will re-use the generated configuration snippets and other assets in the next section of the lab. Therefore it is a good approach to create a snippet repository. Configuration snippets are typically hosted in a git repository or so, here you will use the folder ~/Student/assets. You will also use the asset directory to store the application WAR file.</p> <ol> <li> <p>Copy the generated configuration files as well as the application war file into the assets directory.</p> <pre><code>cp ~/Student/ops/test/wlp/usr/servers/defaultServer/server.* ~/Student/assets\n\ncp ~/Student/ops/test/wlp/usr/servers/defaultServer/application-config.xml ~/Student/assets\n\ncp ~/Student/ops/test/wlp/usr/servers/defaultServer/apps/simpleweb.war ~/Student/assets\n</code></pre> <p></p> </li> <li> <p>Verify that the assets directory contains the application WAR as well as the configuration files. It also contains the server package but this is no longer required.</p> <pre><code>ls ~/Student/assets\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#325-recap","title":"3.2.5 Recap","text":"<p>In this section of the lab, you got an impression how to create and use configuration snippets:</p> <ul> <li>used the Liberty Tools configuration assistant to create configuration snippets and to configure Liberty. </li> <li>used the Liberty featureUtility tool to install missing features.</li> <li>learned how to use variables to make the configuration more portable.</li> <li>learned how to use includes to split the configuration into multiple re-usable files.</li> <li>created a security configuration. </li> </ul> <p>Comments:</p> <ul> <li>Instead of using the Liberty Tools configuration assistant in Visual Studio Code, you could also use the product documentation and copy &amp; paste to create Liberty configuration snippets. </li> <li>You could also use the IBM migration tools to transform an existing configuration for WebSphere Traditional and other runtimes into a Liberty configuration.</li> </ul>"},{"location":"1024-Liberty-Getting-Started/#4-liberty-administration","title":"4. Liberty Administration","text":"<p>Now let\u2019s switch to the Liberty Admistrator role and explor how to install and configure Liberty from an administrator point of view. </p> <p>A traditional administrator typically downloads the application server binaries from the IBM pages and uses a regular editor instead of an IDE like Visual Studio to configure Liberty. To download the latest version of WebSphere Liberty, the administrator can use the IBM support page: https://www.ibm.com/support/pages/recommended-updates-websphere-application-server.</p>"},{"location":"1024-Liberty-Getting-Started/#41-install-liberty-from-scratch","title":"4.1 Install Liberty from scratch","text":"<p>The best practice for Liberty installation is to create a minimal installation by using the Liberty kernel image and install only the required features on top of it. The latest WebSphere Liberty kernel image could be downloaded from the IBM support page. For simplicity, we will use the International License Agreement for Non-Warranted Programs (ILAN) package which is available as zip file at: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/24.0.0.1/wlp-kernel-24.0.0.1.zip</p> <ol> <li> <p>Open a new terminal window.</p> </li> <li> <p>Create a directory to store the Liberty package. </p> <pre><code>mkdir ~/Student/ops/software\n</code></pre> <p></p> </li> <li> <p>Download and store the Liberty kernel image. </p> <pre><code>wget https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/24.0.0.1/wlp-kernel-24.0.0.1.zip -P ~/Student/ops/software\n</code></pre> <p></p> </li> <li> <p>Use ls command to see that the kernel image is less than 17 MB in size. The overall disk footprint will be larger depending on the required Liberty features.</p> <pre><code>ls -lrt ~/Student/ops/software/\n</code></pre> <p></p> </li> <li> <p>Create a directory for the integration environment. This will be used for the Liberty installation.</p> <pre><code>mkdir ~/Student/ops/int\ncd ~/Student/ops/int\n</code></pre> <p></p> </li> <li> <p>Use the unzip command to extract the image.</p> <pre><code>unzip ../software/wlp-kernel-24.0.0.1.zip\n</code></pre> <p></p> <p></p> <p>On the IBM support page, you can find next to the convenience packages like the Liberty kernel package also Liberty archives for Liberty Core, Liberty Base or Liberty ND. To install such an archive, you would use a command like:     \"java -jar ../wlp-base-all-24.0.0.1.jar --acceptLicense .\" </p> </li> <li> <p>Get the Liberty version by running the following command:</p> <pre><code>wlp/bin/productInfo version\n</code></pre> <p></p> <p>As you can see, this is an ILAN package which can be used for evaluation as well as for production. </p> </li> <li> <p>Get the list of Liberty features that are part of the installation:</p> <pre><code>wlp/bin/productInfo featureInfo\n</code></pre> <p></p> <p>As you can see, no feature is included in the kernel image.</p> <p>Now that Liberty has been installed, the next step is to create a Liberty server instance.</p> <p></p> <p>As you have seen, the installation of Liberty is basically an unzip. If you  want to update Liberty later on, you can either apply a jar file or simply replace the binaries.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#42-introducing-liberty-environment-variable-configuration","title":"4.2  Introducing Liberty Environment Variable Configuration","text":"<p>You can customize the Liberty environment using certain specific variables to support the placement of product binaries and shared resources. The Liberty environment variables are specified using server.env file. You can use server.env file at the installation and server levels to specify environment variables such as JAVA_HOME, WLP_USER_DIR and WLP_OUTPUT_DIR.</p> <p>Here some of the Liberty specific variables can be used to customize the Liberty environment: (see also https://www.ibm.com/docs/en/was-liberty/nd?topic=liberty-customizing-environment) </p> <ul> <li>${wlp.install.dir} - This configuration variable has an inferred location. The installation directory is always set to the parent of the directory containing the launch script or the parent of the /lib directory containing the target jar files.</li> <li>JVM_ARGS - This environment variable can be used to specify a list of command-line options, such as system properties or -X parameters, that are passed to the JVM when the server starts. Any values that contain spaces must be enclosed in quotes.</li> <li>WLP_USER_DIR - This environment variable can be used to specify an alternative location for wlp.user.dir. This variable must be an absolute path. If this variable is specified, the runtime environment looks for shared resources and server definitions in the specified directory. WLP_USER_DIR can be specified only in the ${wlp.install.dir}/etc/server.env file because the purpose of this variable is to specify where the remaining configuration is located. After the remaining configuration is found and merged, no further configuration in a different location is expected, or supported</li> <li>WLP_OUTPUT_DIR - This environment variable can be used to specify an alternative location for server generated output such as logs, the workarea directory, and generated files. Files in the logs directory can include console.log, messages.log, and any generated FFDC files. Generated files can include server dumps that are created with the server dump or server javadump command. This variable must be an absolute path.</li> </ul>"},{"location":"1024-Liberty-Getting-Started/#43-create-a-liberty-server-instance","title":"4.3 Create a Liberty server instance","text":"<p>The Liberty server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options</p> <p>The server create command creates by default the user directory in a sub-directory of the \\${wlp.install.dir} directory. In production, it is recommended to store the Liberty configuration in a separate directory. This can be done by setting the WLP_USER_DIR environment variable.</p> <ol> <li> <p>The etc directory as well as the server.env file are not created as part of the installation.      Use the following commands to set the variable WLP_USER_DIR to /home/techzone/Student/ops/int/wlp_usr in the server.env on runtime level.      (Keep in mind that the path in server.env must be absolute, ~/Student, for example is not supported):</p> <pre><code>mkdir ~/Student/ops/int/wlp/etc\necho \"WLP_USER_DIR=/home/techzone/Student/ops/int/wlp_usr\" &gt; ~/Student/ops/int/wlp/etc/server.env\ncat ~/Student/ops/int/wlp/etc/server.env\n</code></pre> <p></p> </li> <li> <p>Run the following commands to create a new server named \"myServer\":</p> <pre><code>wlp/bin/server create myServer\n</code></pre> <p></p> <p>The new server is created in the following directory: wlp_usr/servers/myServer.</p> </li> <li> <p>Run the following command to verify the name and the path of the server instance:</p> <pre><code>wlp/bin/server list\n</code></pre> <p></p> </li> <li> <p>Run the following command to list the files and directories that have been created for myServer:</p> <pre><code>ls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> <li> <p>Replace the generated Liberty configuration with the configuration that you stored in the assets directory.</p> <pre><code>cp ~/Student/assets/server.* wlp_usr/servers/myServer\nls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> <p></p> <p>In the Liberty setup, you now have a server.env file on two levels:      - on runtime level at ${wlp.install.dir}/etc/server.env and      - on server level at ${server.config.dir}/server.env.      If both files are present, the contents of the two files are merged; values in the server-level file take precedence over values in the runtime-level file. </p> </li> <li> <p>Verify that the pre-defined HTTP settings fit to your environment:</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep http\n</code></pre> <p></p> <p></p> <p>If you want to change those port values, you could define them in the server.env file or bootstrap.properties file for example.  Alternatively you could define the related variable on the operating system level.  </p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#44-install-required-features","title":"4.4  Install required features","text":"<p>You installed the Liberty kernel package which does not contain any features. The next step is to install the required features. Instead of looking into the Liberty configuration to determine which features are required, you can let Liberty inspect which features are missing. This can be done using the featureUtility and specifying the server you are looking for. The command by default will download the required features from the online repository. In an air-gapped environment, you could download the feature repository from the IBM support page and then specify in the featureUtility command to use a local repository. </p> <ol> <li> <p>To download and install the required features, use the following command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> <p>As you can see, the command detected that the features for servlet-6.0 and transportSecurity-1.0 were missing. It also downloads the feature ssl-1.0 as transportSecurity-1.0 depends on it.</p> </li> <li> <p>Verify that the Liberty features have been installed by using the following command:</p> <pre><code>wlp/bin/productInfo featureInfo\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#45-use-your-own-keystore","title":"4.5  Use your own keystore","text":"<p>If you do not create a keystore but enable SSL, Liberty will create a keystore with a random password. Now, you will create your own keystore with a password of choice. </p> <ol> <li> <p>Run the following command to create a keystore</p> <pre><code>wlp/bin/securityUtility createSSLCertificate --server=myServer --password=mySecret\n</code></pre> <p></p> <p>As you can see, the command uses the hostname and server name as subjectDN and encodes the password using xor. The command also allows to use aes encoding or encryption, see https://www.ibm.com/docs/en/was-liberty/base?topic=applications-securityutility-command.</p> </li> <li> <p>Our server template has already configured SSL and uses a variable to specify the keystore password. Use the following commands to review what has been configured in the server.xml file:</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep trans\ncat wlp_usr/servers/myServer/server.xml | grep keystore\n</code></pre> <p></p> </li> <li> <p>The keystore password has been configured in the server.env file. Use the following command for review the settings:</p> <pre><code>cat wlp_usr/servers/myServer/server.env;echo\n</code></pre> <p></p> <p>As expected, the password used for the keystore does not match to the one in server.env and must be updated. </p> </li> <li> <p>Best practice is to store the password encoded or encrypted. In this case, you will use encoding via aes and store the password in the server.env file. To generate the encoded password, you can use the securityUtility encode command. Use the following command to update the server.env file with the encoded keystore password of \u201cmySecret\u201d, then review the result:</p> <pre><code>echo \"keystore_password=$(wlp/bin/securityUtility encode --encoding=aes mySecret)\" &gt; wlp_usr/servers/myServer/server.env\ncat wlp_usr/servers/myServer/server.env\n</code></pre> <p></p> <p></p> <p>The encoded keystore password is not unique, so you might have a different password as in the screenshot above.       But as long as you use the same password to be encoded, all of the different resulting strings are valid.  </p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#46-verify-that-the-server-configuration-works","title":"4.6  Verify that the server configuration works:","text":"<ol> <li> <p>Start the server via the following command:</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> <p></p> <p>As you can see, the Liberty server is running and listens on port 9080 and 9443. You can also see that it complains about the missing include file application-config.xml. You will fix this later.</p> </li> <li> <p>Verify that the server is accessible via HTTPs. Switch to the browser and access the web application via the URL https://localhost:9443. </p> <p>As before, you will get a warning that your connection is not secure. Click on Advanced, scroll down and click on \"Accept the Risk and Continue\". Then you should be able to access the application.</p> <p></p> </li> <li> <p>Switch back to the terminal window and press CTRL+C in the terminal window to stop the tail command.</p> </li> <li> <p>Stop the server via the following command:</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#47-deploying-a-sample-application-to-liberty","title":"4.7  Deploying a sample application to Liberty","text":"<p>In the first part of this lab, you used the Liberty Tools to develop an application and configure Liberty. The application got deployed via maven under the cover. Then you used the Liberty server package which already included the deployed application. In this section of the lab, you will deploy an application to Liberty using two different techniques.</p> <p>First, you will simply copy the application WAR module into the Liberty \"dropins\" directory. The dropins directory is monitored by Liberty. As deployable units (WAR, EAR, JAR) are added to the directory, Liberty automatically deploys and starts the application on the Liberty server.  The dropins directory can be used for applications that do not require extra configuration like security role mapping. As the deployable units are removed from the dropins folder, the applications are stopped and removed from the running Liberty server.</p> <ol> <li> <p>In the terminal window start the server and use the tail -f command to view the messages.log file.</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> </li> <li> <p>Right-click on Terminal and select New Window to open a second terminal window.</p> <p></p> </li> <li> <p>In the new Terminal window, navigate to the int directory:</p> <pre><code>cd ~/Student/ops/int/\n</code></pre> </li> <li> <p>Copy the web application into the dropins directory.</p> <pre><code>cp ~/Student/assets/simpleweb.war wlp_usr/servers/myServer/dropins\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window where tail command is running. You can see messages that the application deployment has taken place, the application simpleweb application has been started and is available at http://rhel9.techxchange.local:9080/simpleweb/.</p> <p>Be aware that Liberty defined the context root based on the name of the WAR file as \"/simpleweb\".</p> <p></p> </li> <li> <p>Verify that the application is accessible by opening a browser at: http://localhost:9080/simpleweb/helloWorld</p> <p></p> </li> <li> <p>In the terminal window where tail is running, you can see that the application has been accessed.</p> <p></p> </li> <li> <p>Switch back to the terminal where you entered the copy command and remove the deployed application from the dropins directory using the following command:</p> <pre><code>rm wlp_usr/servers/myServer/dropins/simpleweb.war\n</code></pre> </li> <li> <p>Switch back to the terminal window where tail is running. You can see that the application has been removed.</p> <p></p> <p>While the dropins directory can be used for applications that do not require extra configuration, deploying the application by adding it to the Liberty server configuration provides the freedom to configure the Liberty server based on the application configuration requirements. </p> <p>Now you will deploy the simpleweb application by adding it to the Liberty server configuration.</p> <p>The default place for applications is: ${server.config.dir}/apps.</p> </li> <li> <p>Switch back to the terminal window not running tail. Copy the application WAR file into the apps directory by using the following command:</p> <pre><code>cp ~/Student/assets/simpleweb.war wlp_usr/servers/myServer/apps\nls -lrt wlp_usr/servers/myServer/apps/*.war\n</code></pre> <p></p> </li> <li> <p>To define the application in the Liberty configuration file, take a look at the application configuration that has been provided as snippet.</p> <pre><code>cat ~/Student/assets/application-config.xml\n</code></pre> <p></p> <p>As you can see, a different context root has been defined.</p> </li> <li> <p>You will add the webApplication element to the Liberty configuration by using the include concept. Review that the include element and the properties that have already been defined in the server.xml file.</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep include\n</code></pre> <p></p> </li> <li> <p>Copy the application-config.xml into the server directory.</p> <pre><code>cp ~/Student/assets/application-config.xml wlp_usr/servers/myServer\nls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> <li> <p>Switch back to the terminal window running tail. You can see that the application simpleweb gets deployed, this time with the context root mysimpleweb. </p> <p></p> </li> <li> <p>Finally test the application in the browser via URL http://localhost:9080/mysimpleweb/helloWorld. </p> <p></p> </li> </ol> <p>You have successfully deployed the web application into Liberty, first via dropins directory, then by adding it to the server.xml file via include.</p>"},{"location":"1024-Liberty-Getting-Started/#48-change-logging-and-tracing-by-using-configdropins","title":"4.8  Change logging and tracing by using ConfigDropins","text":"<p>Right now, you used the include concept to enhance the server.xml file with additional configuration files. Alternatively, you can specify additional configuration files in the configDropins directory without specifying include elements in the server.xml file. If you want to add configuration files to override anything in the erver.xml file of the server, create a configDropins/overrides directory. </p> <p>In this case, you want to add/change the log level of the application server.</p> <ol> <li> <p>From the second terminal window, issue the following command to create a configDropins directory in the server directory.</p> <pre><code>mkdir -p wlp_usr/servers/myServer/configDropins/overrides\n</code></pre> <p></p> <p>Add INFO logging output to console</p> <p>Liberty provides the ability to set the logging level to any of the supported log levels defined in the documentation: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace </p> <ul> <li>AUDIT logging enables logging of \u201cSignificant event affecting server state or resources\u201d</li> <li>INFO logging enables of \u201cGeneral information outlining overall task progress\u201d</li> </ul> <p>By default, the Liberty Server has the console log level set to AUDIT.</p> <p>In this section, you will change the level of log messages written to the console from AUDIT to INFO, which will result in additional logging messages. You will perform this activity not directly in the server.xml file but using the configDropins concept. Purpose is that you could change the log level easily on the fly and switch back to the previous level without having to manually edit a file. </p> <p></p> <p>Note:      It is also possible to set default logging options in the bootstrap.properties file.      If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup,      so it may be useful for debugging server initialization problems. </p> </li> <li> <p>Switch to the terminal currently running the tail on the file messages.log and press CTRL+C to stop it.</p> </li> <li> <p>Review the current console logging and you can see that it only contains messages from type AUDIT.</p> <pre><code>tail -f wlp_usr/servers/myServer/logs/console.log\n</code></pre> <p></p> </li> <li> <p>Switch to the second terminal window. Create a server configuration file to change the console log level to INFO via the following command:</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;logging consoleLogLevel=\"INFO\"&gt; &lt;/logging&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>You will verify that messages of log level INFO will now be logged during the configuration of tracing.</p> <p>Update trace specification</p> <p>By default, the Liberty Server trace specification is set to \"*=info=enabled\". </p> <p>To update the trace specification, you will again use the configDropings concept.</p> </li> <li> <p>Switch to the second terminal window. Update the file configDropins/overrides/loglevel-config.xml to include a trace specification via the following command:</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled\"&gt;\n    &lt;/logging&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>As you can see, messages of log level INFO are displayed now which means that the change of the consoleLogLevel has been picked up.  The message indicates as expected, that the trace level has been set to \u201cwebcontainer=all\u201d. </p> </li> <li> <p>Switch to the second terminal window to verify that the trace has been created.</p> <pre><code>ls -lrt wlp_usr/servers/myServer/logs\n</code></pre> <p></p> </li> <li> <p>Remove the file to set the trace level back to default. </p> <pre><code>rm wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>As you can see, the trace specification has been changed back to \"*=info\".</p> </li> <li> <p>Press CTRL+C in the terminal window to stop the tail command.</p> </li> <li> <p>Stop the Liberty instance using the following command: </p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> <li> <p>Delete the generated trace files by using  the following command:</p> <pre><code>rm wlp_usr/servers/myServer/logs/trace*.log\n</code></pre> <p>As you have seen, the logging component can be controlled through the server configuration and it is quite convenient to enable and disable tracing using configDropins.</p> <p>Configure logging in the bootstrap.properties file</p> <p>Occasionally, you might need to configure trace to diagnose a problem that occurs before the server.xml file is processed. Or you want to change the log format to something other than basic. In this case, the equivalent configuration properties can be specified in the bootstrap.properties file. </p> <p>If a configuration property is specified in both the bootstrap.properties file and the server.xml file, the value in bootstrap.properties is used until the server.xml file is processed. Then, the value in the server.xml file is used. Avoid specifying different values for the same configuration property in both the bootstrap.properties and the server.xml file.</p> <p>You will now change the log format to json. As the bootstrap.properties file does not exist, you will simpoly create it.</p> </li> <li> <p>Create a bootstrap,properties file that defines the property com.ibm.ws.logging.console.format by executing the following command: </p> <pre><code>echo 'com.ibm.ws.logging.console.format=json' &gt; wlp_usr/servers/myServer/bootstrap.properties\ncat wlp_usr/servers/myServer/bootstrap.properties\n</code></pre> <p></p> </li> <li> <p>Start the server via server run and you can see that the log format has been set to JSON.</p> <pre><code>wlp/bin/server run myServer\n</code></pre> <p></p> </li> <li> <p>In the terminal window, press CTRL+C to stop the server.</p> </li> <li> <p>Change the log format back to default by deleting bootstrap.properties, then run the server again.</p> <pre><code>rm wlp_usr/servers/myServer/bootstrap.properties\nwlp/bin/server run myServer\n</code></pre> <p></p> </li> <li> <p>In the terminal, press CTRL+C to stop the server.</p> <p>If you are interested into additional logging attributes, please take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace \u2003</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#49-review-the-liberty-configuration-via-liberty-rest-apis","title":"4.9  Review the Liberty configuration via Liberty REST APIs","text":"<p>If you use several includes or config dropins, you might run into the situation where you want to review the final setup. This can be done by using the restConnector APIs. </p> <p>Configure the admin access to the Liberty instance. </p> <ol> <li> <p>First of all, you need a strong password as the APIs provide access to sensitive data which could help a hacker to manipulate the system. Use the securityUtility to create a secure password as LibertyIsGreat.</p> <pre><code>wlp/bin/securityUtility encode --encoding=aes LibertyIsGreat\n</code></pre> <p></p> <p>As before, the encoded password is not unique, so your output will likely look different that the one above. But both are valid.</p> </li> <li> <p>Use the following commands to setup and configure the restConnector.</p> <p>a. Update the user password in the following code snippet or keep the password as is.</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;restConnector-2.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n&lt;quickStartSecurity userName=\"admin\" userPassword=\"{aes}ALCpb79MrIuO8aVUdyXKVDWNssXfX3OmL+xD2J3jWcOgLwrIq1f7/qO8tCR7JwNmcQ==\" /&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/rest-config.xml\n</code></pre> <p></p> <p>b. As the restConnector feature is not installed so far, switch to a terminal window to install the missing features via command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> </li> <li> <p>Start the Liberty instance by using the command:</p> <pre><code>wlp/bin/server start myServer\n</code></pre> </li> <li> <p>From a browser window, access the Liberty REST APIs via the URL https://localhost:9443/ibm/api/config.      Enter Username/Password as: admin/LibertyIsGreat.</p> <p></p> </li> <li> <p>If asked, don\u2019t save the password in the browser. Your browser should display something like this:</p> <p></p> </li> <li> <p>In the browser window, press CTRL+F and enter webapp to search for webapp. You should find the related settings.</p> <p></p> </li> <li> <p>Search for logging and you get all attributes currently used for logging.</p> <p></p> </li> <li> <p>Finally stop the server and remove the restConnector configuration.</p> <pre><code>wlp/bin/server stop myServer\nrm wlp_usr/servers/myServer/configDropins/overrides/rest-config.xml\n</code></pre> <p>For more details about the restConnector for administration, please take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=features-admin-rest-connector-20</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#410-using-the-liberty-admincenter","title":"4.10 Using the Liberty AdminCenter","text":"<p>The Liberty AdminCenter can be used to monitor the status of the Liberty server. You will define two users, an administrative user with the role admin and the second user with the role reader. Use again the securityUtility to create two secure passwords.</p> <ol> <li> <p>Create a password as Liberty4Admins for the admin user.</p> <pre><code>    wlp/bin/securityUtility encode --encoding=xor Liberty4Admins\n</code></pre> <p></p> </li> <li> <p>Create a password as Liberty4Readers for the second user.</p> <pre><code>    wlp/bin/securityUtility encode --encoding=xor Liberty4Readers\n</code></pre> <p></p> </li> <li> <p>Execute the following command to Configure the AdminCenter with the two users using the generated passwords generated before.</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;adminCenter-1.0&lt;/feature&gt;\n        &lt;feature&gt;websocket-2.1&lt;/feature&gt;\n    &lt;/featureManager&gt;\n    &lt;!-- Configure administrative roles. --&gt;\n    &lt;basicRegistry realm=\"basicRealm\"&gt;\n        &lt;user name=\"admin\" password=\"{xor}EzY9Oi0rJmseOzI2MSw=\" /&gt;\n        &lt;user name=\"reader\" password=\"{xor}EzY9Oi0rJmsNOj47Oi0s\" /&gt;\n    &lt;/basicRegistry&gt; \n    &lt;!-- Assign 'admin' to Administrator --&gt;\n    &lt;administrator-role&gt;\n        &lt;user&gt;admin&lt;/user&gt;\n    &lt;/administrator-role&gt;\n    &lt;reader-role&gt;\n        &lt;user&gt;reader&lt;/user&gt;\n    &lt;/reader-role&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/adminCenter-config.xml\n</code></pre> <p></p> </li> <li> <p>As the AdminCenter feature is not installed so far, switch to a terminal window to install the feature via command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> </li> <li> <p>Start the server and take a look at the log:</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> <p></p> <p>As you can see, the AdminCenter feature adminCenter-1.0 has been enabled. </p> </li> <li> <p>Access the Liberty Admin Center via URL https://localhost:9443/adminCenter, then enter the credentials for the admin user (admin/Liberty4Admins) and press Submit.</p> <p> The Admin Center Toolbox is displayed.</p> </li> <li> <p>Click on Explore to explore the Liberty status, the applications as well monitoring data and configuration.</p> <p></p> </li> <li> <p>On the tab Overview take a look at the running servers and applications. </p> <p></p> <p>You would see more than one server if a collection would have been defined.</p> </li> <li> <p>On the tab Applications you can see the running applications. As user with admin rights, you can use the menu to start, stop or restart an application.</p> <p></p> </li> <li> <p>On the tab Montor, you can see basic performance data. </p> <p></p> <p>As you can see here, the Used Heap Memory max value above 1.9 MB which indicates that max heap has not been defined. You will change that in the next section of the lab.</p> </li> <li> <p>On the tab Configure, you can see current configuration. </p> <p></p> <p>You can see a warning that remote file access is not configured. You can ignore that as you will not configure Liberty via AdminCenter.  But you could click on the link to see the configuration in design and source view.</p> </li> <li> <p>Select to log out as admin.</p> <p></p> </li> <li> <p>Log in as user reader with password Liberty4Readers.</p> <p></p> </li> <li> <p>Click on Explore, then select the tab Applications. Try to click on the twisty next to the simpleweb application and you can see that you are not auithorized to start or stop an application.</p> <p></p> </li> <li> <p>Select to log out as reader.</p> <p></p> </li> <li> <p>In the terminal window, press CRTL+C to stop the tail command. </p> </li> <li> <p>Stop the Liberty server.</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#411-customizing-liberty-jvm-options","title":"4.11 Customizing Liberty JVM Options","text":"<p>As you have seen in the Admin Center, the Liberty value for max heap is quite large which indicates that a limit has not been defined yet. This will be done as part of this section by defining Liberty JVM options. </p> <p>The generic JVM arguments are used to configure and adjust how the JVM executes. Liberty is pre-configured with minimal settings defined. Custom generic JVM arguments such as heap settings for a Liberty server can be defined in the jvm.options file.</p> <ol> <li> <p>Create a jvm.options file with definitions for min and max heap by executing the following command:</p> <pre><code>echo '\n-Xms25m\n-Xmx500m\n' &gt; wlp_usr/servers/myServer/jvm.options\ncat wlp_usr/servers/myServer/jvm.options\n</code></pre> <p></p> </li> <li> <p>Start the server with the updated JVM options.</p> <pre><code>wlp/bin/server start myServer\n</code></pre> </li> <li> <p>Access the Liberty Admin Center again via URL https://localhost:9443/adminCenter. Log in as user reader with password Liberty4Readers.</p> <p></p> </li> <li> <p>Click on Explore, then select Monitor. Take a look at the dashboard and you can see that the Used Heap Memory Max is now 500 MB as defined in jvm.options.</p> <p> </p> </li> <li> <p>Log out from admin center.</p> </li> <li> <p>Stop the Liberty server using the following command:</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> <p>For additional information around the Liberty Admin Center, take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=center-setting-up-admin</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#412-recap","title":"4.12 Recap","text":"<p>Let\u2019s recap what you did in this part of the lab: </p> <ul> <li>installed a Liberty server using the Liberty kernel image.</li> <li>used Liberty environment variables to separate the Liberty configuration from the binaries.</li> <li>created a Liberty server instance and installed missing features.</li> <li>deployed a simple web application via dropins and via server.xml.</li> <li>configured logging via server.xml and server.env.</li> <li>changed the Liberty heap size via jvm.options.</li> <li>used the REST API to see the Liberty configuration.</li> <li>used Liberty Admin Center to see monitoring data and administer Liberty apps. \u2003</li> </ul>"},{"location":"1024-Liberty-Getting-Started/#5-lab-cleanup","title":"5 Lab Cleanup","text":"<ol> <li> <p>Once you are done, make sure that Liberty and Visual Studio Code is not running.</p> </li> <li> <p>Delete the Student folder via command:</p> <pre><code>rm -rf ~/Student\n</code></pre> </li> <li> <p>Close the browser and all terminal windows</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/#summary","title":"Summary","text":"<p>In this lab, you learned how to develop a simple application as a developer, how to deployment and configure the application as an configuration opertor, and how to install and configure Liberty as an administrator.</p> <p>Congratulations!</p> <p>You have successfully completed the lab Liberty Getting Started</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/","title":"Liberty Getting Started","text":""},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#liberty-getting-started","title":"Liberty Getting Started","text":""},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#data-collection-assessments-deployment-accelerators","title":"data collection, assessments, &amp; deployment accelerators","text":"<p>Last updated: March 2024</p> <p>Duration: 90 minutes</p> <p>Need support? Contact Lars Besselmann, Kevin Postreich</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#liberty-getting-started-tasks","title":"Liberty Getting Started tasks","text":"<p>WebSphere Liberty (Liberty) is a lightweight open framework for building fast and efficient cloud-native Java microservices. Build cloud-native apps and microservices while running only what you need. It is the most flexible server runtime available to Java developers in this solar system.</p> <p>Liberty is built on the open source Open Liberty codebase. Open Liberty is designed with both developers and application business owners in mind.</p> <ul> <li>It delivers the latest Java APIs and integrates with the most popular Developer and Build tools.</li> <li>It has built-in innovation like zero-migration to reduce application runtime costs and delivery effort.</li> <li>Liberty is downstream of Open Liberty so anything that works on Open Liberty works on Liberty.</li> <li>Same Monthly Continuous Delivery Release Cycle as Liberty</li> <li>You do not need to switch to Liberty for commercial support</li> </ul> <p>Liberty Tools is a set of intuitive developer tools for the Eclipse IDE, Visual Studio Code, and IntelliJ IDEA development environments. These tools adopt a Maven/Gradle-centric approach and enable fast, iterative cloud-native Java application development through Liberty dev mode. Liberty Tools also provides helpful, time-saving features such as code completion, hover descriptions, and configuration diagnostics for Jakarta EE APIs, MicroProfile APIs, and Liberty configuration. For more information, check out the Liberty Tools overview.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#1-introduction","title":"1. Introduction","text":"<p>In the lab, there will be different roles involved with perform different tasks using different tools. You will perform all the different roles during the lab. </p> <ul> <li>You will start as an application developer and use Liberty starter and the code assistant to develop a simple web application. But don't worry, you do not have to be a developer to do this.</li> <li>As Liberty configuration opertor, you will use the configuration assistant and concepts like includes and variables to create a portable configuration. </li> <li>As Liberty administrator, you will install Liberty from a kernel image, add missing features, configure logging, security and so on, will use the Liberty REST APIs to review the configuration and use Liberty Admin Center for monitoring.</li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#2-objective","title":"2. Objective","text":"<p>These are the objectives in the lab:</p> <ul> <li> <p>As application developer:</p> <ul> <li>Tasks: <ul> <li>Develops the application.</li> <li>Creates a basic Liberty configuration for the application</li> </ul> </li> <li>Tools:<ul> <li>Apache Maven <ul> <li>to build the project </li> <li>to download the Open Liberty server runtime from the maven repository</li> </ul> </li> <li>Liberty Maven Plugin for inner-loop development via Liberty Dev Mode<ul> <li>to build the application war and deploy it to Liberty</li> </ul> </li> <li>Visual Studio Code <ul> <li>as IDE to build the application code</li> </ul> </li> <li>Liberty Tools plugin for Visual Studio Code<ul> <li>provides a Liberty dashboard with Dev Mode integration in the IDE</li> <li>provides Jakarta EE and MicroProfile code assistance</li> <li>provides Liberty configuration assistance</li> </ul> </li> <li>Liberty Starter Project <ul> <li>to generate a maven project for Liberty </li> </ul> </li> <li>Open Liberty / WebSphere Liberty<ul> <li>as runtime for the Java application that will be developed</li> <li>to create a server package</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>As Liberty configuration operator:</p> <ul> <li>Tasks: <ul> <li>Extract Liberty package from command line and implement Liberty dynamic updates</li> <li>Develop portable Liberty configuration snippets using includes, variables and much more.</li> </ul> </li> <li>Tools:<ul> <li>Visual Studio Code with Liberty Tools plugin as editor with configuration assistance</li> </ul> </li> </ul> </li> <li> <p>As Liberty administrator:</p> <ul> <li>Tasks: <ul> <li>Installs Liberty</li> <li>Configures Liberty for the target application using Liberty configuration snippets</li> <li>Applies security to harden the Liberty configuration</li> <li>Configure logging using configDropins</li> <li>Review the configuration using LIberty REST APIs</li> <li>Monitor Liberty using the Admin Center</li> </ul> </li> <li>Tools:<ul> <li>Liberty server command to create a Liberty instance and start, stop or dump it</li> <li>Liberty installUtility to install missing features</li> <li>Liberty securityUtility to create a keystore or encode a password</li> <li>Liberty REST APIs and Admin Center</li> </ul> </li> </ul> </li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#3-prerequisites","title":"3. Prerequisites","text":"<p>The following prerequisites must be completed prior to beginning this lab:</p> <ul> <li>Familiarity with basic Linux commands</li> <li>Have internet access</li> <li>Have a lab environment ready</li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#4-accessing-the-environment","title":"4. Accessing the environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://TBD-to-the-reservation-link</p> <p>The lab environment contains one (1) Linux VM, named Workstation.</p> <p></p> <p></p> <ol> <li> <p>Access the lab environment from your web browser. </p> <p>A <code>Published Service</code> is configured to provide access to the <code>Workstation</code> VM through the noVNC interface for the lab environment.</p> <p>a. When the demo environment is provisioned, click on the <code>environment tile</code> to open its details view. </p> <p>b. Click on the <code>Published Service</code> link which will display a Directory listing </p> <p>c. Click on the <code>vnc.html</code> link to open the lab environment through the noVNC interface. </p> <p></p> <p>d. Click the <code>Connect</code> button </p> <p></p> <p>e. Enter the password as:  <code>passw0rd</code>. Then click the <code>Send Credentials</code> button to access the lab environment. </p> <p>Note: That is a numeric zero in passw0rd  </p> <p></p> <p></p> </li> <li> <p>If prompted to Login to the \"workstation\" VM, use the credetials below: </p> <p>The login credentials for the workstation\u201d VM is:</p> <ul> <li> <p>User ID: techzone</p> </li> <li> <p>Password: IBMDem0s!</p> </li> </ul> <p>Note: That is a numneric zero in the password</p> <p></p> <p></p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#5-tips-for-working-in-the-lab-environment","title":"5. Tips for working in the lab environment","text":"<ol> <li> <p>You can resize the viewable area using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a. From the environment VM, click on the twisty on the noNC control pane to open the menu.  </p> <p></p> <p>b. To increase the visible area, click on <code>Settings &gt; Scaling Mode</code> and set the value to <code>Remote Resizing</code></p> <p></p> </li> <li> <p>You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. </p> <p>a. Copy the text from the lab guide that you want to paste into the lab environment</p> <p>b. Click the <code>Clipboard</code> icon and <code>paste</code> the text into the noVNC clipboard</p> <p></p> <p>c. Paste the text into the VM, such as to a terminal window, browser window, etc. </p> <p>d. Click on the <code>clipboard</code> icon again to close the clipboard</p> </li> <li> <p>An alternative to using the noVNC Copy / Paste option, you may consider opening the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide without having to use the noVNC clipboard. </p> </li> <li> <p>To switch between different windows or get access the tool bar, click on the <code>Activities</code> icon within the VM.</p> <p></p> <p>Then select from the tool bar the application that you want to open. In the lab, you will use Firefox and the terminal.</p> <p></p> </li> <li> <p>How to change the background color  In the environment, the default background for terminal windows and Visual Studio Code is dark. For the lab documentation, we changed the color to light. Feel free to keep the background in light but if you want to change it to dark, here the explanation how it was changed.</p> <ol> <li> <p>How to change the terminal background to white     Right-click into the terminal background, then select Preferences.</p> <p></p> <p>A Preferences window opens. Click on Colors, then uncheck the box for  Use colors from system theme . (If you want to get back to dark, check the box again).</p> <p></p> <p>The terminal background should switch to white.</p> <p></p> <p>Close the Preferences window.</p> </li> <li> <p>How to switch the background of Visual Studio Code from dark to light</p> <p>In a terminal Window, run the following command to start Visual Studio Code</p> <pre><code>mkdir ~/temp\ncode ~/temp\n</code></pre> <p></p> <p>Visual Studio Code opens with a dark background.  Click on  Yes, I trust the authors </p> <p></p> <p>Then select Preferences &gt; Theme &gt; Color Theme</p> <p></p> <p>Select Light</p> <p></p> <p>The tool will change to a light background, see below.</p> <p></p> <p>Close Visual Studio Code.</p> </li> </ol> </li> </ol> <p> </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6-execute-lab-tasks","title":"6. Execute Lab Tasks","text":""},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#61-verify-the-installed-software","title":"6.1 Verify the installed software","text":"<ol> <li> <p>Open a terminal by clicking on Activities and selecting terminal.</p> <p></p> <p>The terminal window opens.</p> <p></p> </li> <li> <p>Check the Maven version via the following command:</p> <pre><code>mvn -version\n</code></pre> <p></p> </li> <li> <p>Check the Docker version via the following command:</p> <pre><code>docker -v\n</code></pre> <p></p> </li> <li> <p>Check the Git version via the following command:</p> <pre><code>git -v\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#62-create-the-required-working-directories","title":"6.2 Create the required working directories","text":"<ol> <li>Create the Student directories and some sub-directories used in the lab with commands:<pre><code>mkdir ~/Student\nmkdir ~/Student/dev\nmkdir ~/Student/ops\nmkdir ~/Student/assets\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#63-develop-a-liberty-web-application","title":"6.3 Develop a Liberty web application","text":"<p>The objective of this section is to develop a simple web application for Liberty. You will use a Liberty starter application to now start from scratch and use Visual Studio Code and Liberty Tools to build the application.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#631-create-a-starter-app-project","title":"6.3.1 Create a starter app project.","text":"<p>In this scenario, you want to create a Jakarta EE 10 Web application with the name simpleweb and will use maven to build it. The fastest way to get started is to use an Open Liberty starter application which generates a project with the maven configuration as well as a basic Liberty setup.</p> <p></p> <p>The Open Liberty starter gives you a simple, quick way to get the necessary files to start building an application on Open Liberty. There is no need to search how to find out what to add to your maven or gradle build files. A simple RestApplication.java file is generated for you to start creating a REST based application. A server.xml configuration file is provided with the necessary features for the MicroProfile and Jakarta EE versions that you previously selected. </p> <ol> <li> <p>Open a browser window by clicking on Activities and then select the Firefox browser icon.</p> <p></p> <p>If you get a pop-up that Authentication is required, enter IBMDem0s!. </p> <p></p> </li> <li> <p>Enter the URL https://openliberty.io/start/ </p> </li> </ol> <p>If the page does not open, close the browser and open it again. </p> <ol> <li> <p>Change the artifact name to simpleweb, change the Java level to 17 and leave the rest as is, then click on Generate project </p> <p></p> </li> <li> <p>Click on Save to save the project under Downloads.</p> <p></p> <p>You will see a pop-up like the one below. Click on Got it!  to close the window.</p> <p></p> </li> <li> <p>Extract the file.</p> <p>a. Click on Activities and switch to the terminal window. </p> <p>b. Move the starter project to the developer directory and extract it with commands:</p> <pre><code>mv ~/Downloads/simpleweb.zip ~/Student/dev\nunzip ~/Student/dev/simpleweb.zip -d ~/Student/dev/simpleweb\n</code></pre> <p></p> <p>The project has been created under ~/Student/dev/simpleweb directory.</p> <p>c. List the content via following command:</p> <pre><code>ls -lrt ~/Student/dev/simpleweb\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#632-inspect-the-starter-project-using-open-visual-studio-code","title":"6.3.2. Inspect the starter project using Open Visual Studio Code","text":"<p>Now you will use Visual Studio Code to see what has been generated as part of the starter project.</p> <ol> <li> <p>From the terminal window, start Visual Studio Code</p> <pre><code>cd ~/Student/dev/simpleweb/\ncode .\n</code></pre> <p></p> <p>Visual Studio Code UI will be opened.</p> </li> <li> <p>Click on Yes, I trust the authors to continue.</p> <p></p> <p>If you see during the lab one of the pop-ups below or any other pop-up asking to install something, close the pop-up without installation by clicking the X.  </p> </li> <li> <p>Investigate into the generated project:</p> <p>In Visual Studio Code, take a look at the Explorer section to see the content of the project. You can find a src and a target folder, a Dockerfile and a maven build file (pom.xml).</p> <p></p> </li> <li> <p>Take a look at the generated Maven configuration </p> <p>a. Click on pom.xml to see the maven pom.</p> <p>In the build section, you can find the configuration of the liberty-maven-plugin. </p> </li> </ol> <p>Don\u2019t worry if the version of the plugin has changed to 3.10.2 or later. </p> <pre><code>b. Finally close the pom.xml.\n</code></pre> <ol> <li> <p>Review the generated Liberty configuration</p> <p>a.  Open src &gt;  main &gt;liberty &gt; config &gt; server.xml to see the Liberty configuration.</p> <p></p> <p>As you can see, the features for jakartaee-10 and MicroProfile-6.1 have been configured.</p> <p></p> <p>b. Scroll down and you can see that the http endpoint and the web application have been configured.</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#633-adjust-the-liberty-configuration","title":"6.3.3 Adjust the Liberty configuration","text":"<p>The simpleweb application will not require the full Jakarta EE 10 standard but only the servlet specification.</p> <p>As best practice to optimize the footprint of the application runtime regarding memory and disk space and limit the number of potential vulnerabilities, you should define only the features that are required by the application. In this case, you are ging to replace the jakartaee-10 feature with an appropriate servlet feature. </p> <ol> <li> <p>In the Visual Studio Code editor for server.xml, scroll up to the feature section.</p> </li> <li> <p>Delete the lines \\jakartaee-10.0\\ and \\&lt; feature&gt;MicroProfile-6.1\\.     Your featureManager section should now look like this:</p> <p></p> </li> <li> <p>Now you will use the Liberty configuration assistant to define the servlet feature. Place your cursor at the beginning of an empty line in the featureManager section. Then press the CTRL key and press SPACE to activate the configuration assistant. You should see something like:</p> <p></p> </li> </ol> <p>You might have to click on the arrow right to feature to get the description. </p> <ol> <li> <p>Select feature and the feature element gets added.</p> <p></p> </li> <li> <p>Use again CTRL+SPACE to get the list of available features.</p> <p></p> </li> <li> <p>Type the word servlet to see the available servlet features.</p> <p></p> </li> <li> <p>Use the arrow-down key to get the description for servlet-6.0.</p> <p></p> </li> <li> <p>Select the feature servlet-6.0 and your configuration should now look like this:</p> <p></p> </li> <li> <p>For this part of the lab, you do not need to define a keystore or the basic registry, so you need to delete the generated entries.     Your configuration should now look like this:</p> <p></p> </li> <li> <p>Save the configuration by using CTRL+S.</p> </li> <li> <p>Close the server.xml file.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#634-using-liberty-dev-mode","title":"6.3.4   Using Liberty Dev Mode","text":"<p>Liberty development mode, or dev mode, allows you to develop applications with any text editor or IDE by providing hot reload and deployment, on demand testing, and debugger support. Liberty Dev Mode is enabled through Maven and Gradle projects.</p> <p>Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes.</p> <p>You can run tests on demand or even automatically so that you can get immediate feedback on your changes. You can also attach a debugger at any time to debug your running application.</p> <p></p> <p>You can use the capabilities of Liberty dev mode inside and outside of an IDE. This provides you the flexibility of choice. In a terminal window, you would use Liberty in dev mode with maven using the command mvn liberty:dev or mvn liberty:devc if you want to develop in a container. </p> <p>In the lab environment, the Liberty tools plugin has been installed into Visual Studio Code. Therefore you will use the integrated Liberty dashboard instead.\u2003</p> <ol> <li> <p>In Visual Studio Code, expand the Liberty Dashboard.</p> <p></p> </li> <li> <p>Right-click on simpleweb and then start to start the server in dev mode.</p> <p></p> </li> <li> <p>A terminal opens within Visual Studio Code and you can see that the start of the build process gets triggered.</p> <p></p> </li> <li> <p>The Liberty plugin as well as the Liberty server artifacts get downloaded, then the server is ready for testing.</p> <p></p> </li> <li> <p>Switch to the browser window and enter the URL localhost:9080. You should see something like this:</p> <p></p> </li> </ol> <p>If you get a pop-up with Authentication required, enter the password IBMDem0s! and click on Unlock. </p> <pre><code>Now, let\u2019s create a simple web application.\n</code></pre>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#635-edit-the-simpleweb-application","title":"6.3.5 Edit the simpleweb application","text":"<p>Now you will edit the simpleweb application which only consists of a servlet. Thanks to Liberty code assistant, you don't have to write the code on your own. </p> <ol> <li> <p>Switch to Visual Studio Code.</p> </li> <li> <p>In Visual Studio Code, expand the path to src/main/java/com/demo/rest, then right-click on demo and select New File.</p> <p></p> </li> <li> <p>Enter the name helloWorldServlet.java and press ENTER.</p> <p></p> </li> <li> <p>The file src/main/java/com/demo/helloWorldServlet.java is generated and opens in an editor.</p> <p></p> </li> <li> <p>Remove all code from the file. Then enter servlet and press CTRL+SPACE.</p> <p></p> </li> <li> <p>The code assistant offers some servlet methods for Jakarta EE. Select servlet_doget, and the required starter code gets generated.     As you can see, the fields that should be changed are highlighted.</p> <p></p> </li> <li> <p>Change the servletName to helloWorldServlet and the urlPatters to /helloWorld. The code should now look like this:</p> <p></p> </li> <li> <p>Press CTRL+S to save the code change. Take a look at the terminal output. As Liberty has been started in DevMode, the code changes are picked up automatically, the source gets compiled and Liberty gets updated.</p> <p></p> </li> <li> <p>Switch to the browser and open the URL localhost:9080/simpleweb/helloWorld. You should see the output of the created servlet.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and change the source code of the servlet response text to something like this: helloWorld - Example HTTP GET request for HTTPServlet</p> <p></p> </li> <li> <p>Save the changes and reload the page in the browser. The output should be updated.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and close the editor for the file helloWorldServlet.java.</p> </li> </ol> <p>Final step as developer is to export the developed application as WAR file so that it can be used in the next part of the lab.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#636-export-the-developed-application-as-war-file","title":"6.3.6 Export the developed application as WAR file","text":"<p>Export the developed application so that it can be deployed to Liberty by the operations team.</p> <p>The generated maven pom by default does not generate a WAR file as it uses a \u201clooseApplication\u201d approach to optimize the inner-loop development experience. (For more details, see https://github.com/OpenLiberty/ci.maven). To change the default build behaviour, you need to adjust the pom.xml file and configure the Liberty maven plugin to generate a WAR by setting the property: \\false\\.</p> <ol> <li> <p>Switch back to Visual Studio Code.</p> </li> <li> <p>In the Liberty dashboard, right-click on the simpleweb application and select Stop (or use CTRL+C on the terminal window instead).</p> <p></p> </li> <li> <p>Verify in the terminal that Liberty has been stopped.</p> <p></p> </li> <li> <p>In Visual Studio Code, open the file pom.xml and add to the Liberty plugin configuration the lines:</p> <pre><code>&lt;configuration&gt;\n&lt;looseApplication&gt;false&lt;/looseApplication&gt;\n&lt;/configuration&gt;\n</code></pre> <p></p> </li> <li> <p>If you would start Liberty now again in Dev Mode, the property looseApplication would be ignored and you would see a warning like this:   </p> <p></p> <p>Therefore, you must start Liberty in run mode to generate the WAR file. This can be done by entering in the terminal window the command:</p> <pre><code>mvn liberty:run\n</code></pre> <p></p> <p>As you can see in the screenshot above, maven has built the file simpleweb.war and stored it at ~/Student/dev/simpleweb/target/ directory.</p> </li> <li> <p>Scroll down and you can see that it has been installed into the directory ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer/apps.</p> <p></p> </li> <li> <p>Feel free to test the application in the browser, then stop the Liberty instance by using CTRL+C.</p> </li> <li> <p>Close Visual Studio Code.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#637-create-a-server-package","title":"6.3.7 Create a server package","text":"<p>For the next lab, you will need the WAR file as well as the server.xml which can be found in the created Liberty instance at:  ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer.</p> <p>More complex applications also depend on other files like utility jars, additional Liberty configuration files and JDBC drivers for example. </p> <p>So instead of copying the files one by one, you could create a server package that contains all files.</p> <p>What is a server package? A server package can contain only the user directory or the full application server.  </p> <p>The syntax of the server package command is: </p> <pre><code>server package server_name --archive=package_file_name.jar --include=all\n</code></pre> <p>With the option --include=all, the Liberty binaries as well as the usr directory get packaged.</p> <p>For more details and options, see https://www.ibm.com/docs/en/was-liberty/base?topic=line-packaging-liberty-server-from-command.</p> <ol> <li> <p>To create the server package, execute the following command:</p> <pre><code>~/Student/dev/simpleweb/target/liberty/wlp/bin/server package defaultServer --archive=simpleweb-serverpackage.jar --include=all\n</code></pre> <p></p> </li> <li> <p>To hand over the server package to the ops team, use the following commands: </p> <pre><code>cp ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer/simpleweb-serverpackage.jar ~/Student/assets\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#638-recap","title":"6.3.8 Recap","text":"<p>Congratulations, you have finished the application development part.</p> <p>Let\u2019s recap what you did so far. </p> <p>You acted as developer and used Visual Studio Code and the Liberty Tools for these tasks:</p> <ul> <li>generated a Liberty starter project including the required maven and Liberty configuration. </li> <li>used the Liberty Tools configuration assistant to adjust the Liberty configuration.</li> <li>used Liberty Dev Mode for inner-loop development.</li> <li>updated the simpleweb application using the Jakarta EE code assistant. </li> <li>exported the web application as WAR file.</li> <li>created a server package including application and Liberty binaries.</li> </ul> <p>Useful links: https://github.com/OpenLiberty/liberty-tools-vscode/blob/HEAD/docs/user-guide.md </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#64-liberty-operations","title":"6.4 Liberty operations","text":"<p>Now you will work with Liberty from an operational point of view. Development has handed over a Liberty server package to you. The server package contains all necessary configuration to run the application called simpleweb. The provided server package is typically not production-ready, as it is likely not portable between stages and does not fulfill the requirements regarding security and so on. </p> <p>In this part of the lab, you will explore how to create configuration snippets and how to administer Liberty from the command line. But first you will explore the server package and get an understanding about dynamic updates.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#641-explore-the-server-package","title":"6.4.1 Explore the server package","text":"<p>You will now explore the Liberty server package to get a better understanding how to use it, in addition you will use it to learn more about Liberty administration from the command line and Liberty dynamic updates.</p> <p>In this section, you will use the server run command instead of the server start command. This will allow you to see the logs immediately instead of having to use a tail command. It will also allow you to stop the Liberty server via CTRL+C </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6411-extract-liberty-package-from-command-line","title":"6.4.1.1 Extract Liberty package from command line","text":"<ol> <li> <p>Extract the Liberty server package and try to run it. When asked, enter test as target directory.</p> <pre><code>cd ~/Student/ops/\njava -jar ~/Student/assets/simpleweb-serverpackage.jar\n</code></pre> <p></p> <p>The directory test/wlp got created and contains the configured Liberty instance including application. </p> </li> <li> <p>Run the following command to get the Liberty version:</p> <pre><code>test/wlp/bin/productInfo version\n</code></pre> <p></p> </li> <li> <p>Run the following command to list the Liberty features that have been installed:</p> <pre><code>test/wlp/bin/productInfo featureInfo\n</code></pre> <p></p> <p>As you can see, the server package provided by the developer only contains the servlet-6.0 features which is the only feature required by the application. </p> </li> <li> <p>Run the following command to get the list of defined Liberty application servers:</p> <pre><code>test/wlp/bin/server list\n</code></pre> <p></p> </li> <li> <p>Start the Liberty server instance by running the command:</p> <pre><code>test/wlp/bin/server start defaultServer\n</code></pre> <p></p> <p>This runs the server in the background and the output is written to files in the test/wlp/bin/servers/defaultServer/logs directory.</p> <p>To start the server in the foreground (so the console messages are displayed in the command window) you would use the command </p> <pre><code>test/wlp/bin/server run defaultServer.\n</code></pre> <p>You will use it later in the lab.</p> </li> <li> <p>View the Liberty server\u2019s messages.log file to see the server startup messages via the command:</p> <pre><code>cat test/wlp/usr/servers/defaultServer/logs/messages.log\n</code></pre> <p></p> <p>At the beginning of the log, you can see that Open Liberty 24.0.0.2 is used. The server is started when the message \u201cThe defaultServer server is ready to run a smarter planet\u201d is displayed in the messages.log file.</p> </li> <li> <p>Test that the application is accessible via URL http://localhost:9080/simpleweb/helloWorld</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6412-liberty-dynamic-updates","title":"6.4.1.2 Liberty dynamic updates","text":"<p>Let\u2019s do a short excurse about Liberty dynamic updates. You will use Visual Studio Code to perform some minor configuration changes. For this part of the lab, you could instead also use a simple text editor like vi or gedit instead. </p> <ol> <li> <p>Open Visual Studio Code.</p> <pre><code>cd ~/Student/ops/test\ncode .\n</code></pre> <p></p> </li> <li> <p>Visual Studio Code opens. Click on Yes, if you are asked to trust the author.</p> <p></p> </li> <li> <p>In Visual Studio Code, open a terminal window</p> <p></p> </li> <li> <p>In the terminal, use the tail command to display the Liberty message log.</p> <pre><code>tail -f wlp/usr/servers/defaultServer/logs/messages.log\n</code></pre> <p></p> </li> <li> <p>Wait until the web application has been initialized</p> <p></p> </li> <li> <p>In Visual Studio Code, navigate to wlp &gt; usr &gt; servers &gt; defaultServer and open the file server.xml.</p> <p></p> </li> <li> <p>In the server.xml file, change the httpPort setting from port 9080 to port 9081.</p> <p></p> <p>You can see in the terminal that the change is picked up and Liberty listens now on port 9081.</p> <p></p> </li> <li> <p>Change the webApplication contextRoot setting from \u201c/simpleweb\u201d to \u201c/mysimpleweb\u201d.</p> <p></p> <p>You can see in the log that the change is picked up.</p> <p></p> </li> <li> <p>Switch to the browser and access the application via URL localhost:9081/mysimpleweb/helloWorld.</p> <p></p> <p>As you have seen, you can change the Liberty configuration without having to restart the server.  You will explore this further later in the lab when you dynamically update the logging for example. Now let's stop the server.</p> </li> <li> <p>In the terminal, press CTRL+C to stop the tail command. </p> </li> <li> <p>Stop the Liberty instance by executing in the terminal the command:</p> <pre><code>wlp/bin/server stop defaultServer\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#642-create-liberty-configuration-snippets","title":"6.4.2 Create Liberty configuration snippets","text":"<p>There are different ways to create a Liberty server configuration and there are often different roles involved to get the final configuration for production. The application specific configuration, for example, is typically created by the application developer while security related configuration is typically done by operations. Operations is typically also responsible to make the configuration portable across stages, configure logging and so on. </p> <p>You could create Liberty configuration snippets by copying over the related snippets from the product documentation and adjust them in a normal text editor. In this part of the lab, you will see that the Liberty tools plugin in Visual Studio Code can help you to speed up the create of configuration snippets as it provides configuration assistance including documentation. Let\u2019s get started.</p> <p>You will now modify the file server.xml which has been provided as part of the server package to make it more portable and re-usable.</p> <ol> <li> <p>In Visual Studio Code, open the file server.xml if you closed it previously.</p> <p></p> </li> <li> <p>Take a look at the httpEndpoint element.</p> <p></p> <p>As mentioned in the comment, the httpEndpoint is by default not accessible from a remote client.  This is good from security point of view and works fine if the client is local to the server. But if you, for example, use a remote load balancer or a remote HTTP server, this will not work. So there will be likely situations where you want to allow access to the application from a remote client and you must add a host attribute. You will use the Liberty Tools configuration assistant to do this.</p> </li> <li> <p>Place the cursor at the end of the line &lt;httpEndpoint id=\"defaultHttpEndpoint\" and press ENTER to add another line. </p> <p>In the new line, press CTRL+SPACE to see the available attributes. </p> <p>Use the arrow-down key and navigate to the host attribute to see the description of the attribute.</p> <p></p> </li> <li> <p>Select host and your configuration should look like this:</p> <p></p> <p>As you can see, the attribute host defaults to localhost.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6421-use-variables-for-portability","title":"6.4.2.1 Use variables for portability","text":"<p>To make the configuration portable, you will replace the fixed values for ports and host with Liberty variables. Liberty variables can be defined with a default value and overridden from inside or outside Liberty. To show the concept, you will adjust the httpEndpoint settings.</p> <p>You could use the configuration snippet below to replace the existing httpEndpoint configuration with a portable configuration. </p> <pre><code>&lt;httpEndpoint id=\"defaultHttpEndpoint\"\n              host=\"${httpEndpoint_host}\"\n              httpPort=\"${httpEndpoint_port}\"\n              httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n&lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n&lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n&lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n</code></pre> <p>Instead you will use the Liberty configuration assistant to get an understanding how you could create such a configuration snippet.</p> <ol> <li> <p>Place the cursor in an empty line under the httpEndpoint section, then enter var and press CTRL+SPACE.</p> <p></p> </li> <li> <p>Select variable, then enter as name \"httpEndpoint_port\".</p> <p></p> </li> <li> <p>Place the cursor after name=\"httpEndpoint_port\", enter a SPACE and press CTRL+SPACE.</p> <p></p> </li> <li> <p>Select defaultValue and enter as value 9080.</p> <p> </p> </li> <li> <p>Use copy and paste to create two additional variables: </p> <ul> <li>one with the name \"httpEndpoint_secure_port\" and the default value \"9443\"</li> <li>the other one with the name \"httpEndpoint_host\" and the value \"*\".</li> </ul> <p>Your configuration should now look like this:</p> <p></p> </li> <li> <p>Switch to the httpEndpoint section, remove for the attribute host the value \"localhost\", enter ${ht and press CTRL+SPACE.</p> <p></p> <p>As you can see, the variable names are offered. </p> </li> <li> <p>Select \"httpEndpoint_host\", then enter \"}\". Your configuration should look like this:</p> <p></p> </li> <li> <p>Do the same kind of change for the attributes httpPort and httpsPort. </p> <p>Your final httpEndpoint configuration should now look like this:</p> <p></p> </li> <li> <p>Save your changes.</p> <p>Your server.xml file should now look like this:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;server description=\"new server\"&gt;\n\n&lt;!-- Enable features --&gt;\n&lt;featureManager&gt;\n    &lt;feature&gt;servlet-6.0&lt;/feature&gt;\n&lt;/featureManager&gt;\n\n&lt;!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" --&gt;\n&lt;httpEndpoint id=\"defaultHttpEndpoint\"\n              host=\"${httpEndpoint_host}\"\n              httpPort=\"${httpEndpoint_port}\"\n              httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n&lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n&lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n&lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n\n&lt;!-- Automatically expand WAR files and EAR files --&gt;\n&lt;applicationManager autoExpand=\"true\"/&gt;\n\n&lt;!-- Configures the application on a specified context root --&gt;\n&lt;webApplication contextRoot=\"/mysimpleweb\" location=\"simpleweb.war\" /&gt;\n\n&lt;!-- Default SSL configuration enables trust for default certificates from the Java runtime --&gt;\n&lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n&lt;/server&gt;\n</code></pre> <p>Now let's test if the Liberty configuration is really portable.</p> </li> <li> <p>From the Visual Studio Code terminal, start the Liberty server instance via the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, the Liberty server gets started and listens on port 9080.</p> </li> <li> <p>Press CTRL+C to stop the server. </p> </li> <li> <p>Set the httpEnpoint_port value in the Operating System environment variable and start the Liberty server again.</p> <pre><code>export httpEndpoint_port=9081\nwlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, the Liberty server now listens on port 9081, which shows that you can now override from outside Liberty the default settings defined in the Liberty server.xml file. In a Kubernetes environment, you could for example use a config map to change configuration settings.</p> </li> <li> <p>Press CTRL+C to stop the server. Then unset the operating system variable by the following command:</p> <pre><code>unset httpEndpoint_port\n</code></pre> <p>This will restore the httpEnpoint_port value in the Operating System environment variable to 9080.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6422-use-includes-for-better-re-use-and-visibility","title":"6.4.2.2 Use includes for better re-use and visibility","text":"<p>If you configure a Liberty server with resources like datasources or JMS queues, user registry and more, your configureation file can get quite long and not easy to be read and maintained. Liberty allows to specify configuration resources to get included into the server configuration. This helps to keep control over the configuration, provides better reuse of the different configuration and allows to split the responsibility for the configuration between different teams. The developer for example could create the application specific configuration and operations the security configuration.</p> <p>You will now use includes to structure the server configuration.</p> <ol> <li> <p>In the terminal in Visual Studio Code, copy the existing server.xml file into a new file called application-config.xml.</p> <pre><code>cp wlp/usr/servers/defaultServer/server.xml wlp/usr/servers/defaultServer/application-config.xml\n</code></pre> <p></p> </li> <li> <p>Open the newly created file application-config.xml in Visual Studio Code.</p> <p></p> </li> <li> <p>Remove all configuration inside the server section other than the definition of the webApplication element.     Your application-config.xml should look like this:</p> <p></p> </li> <li> <p>Save the changes, then close the application-config.xml file.</p> </li> <li> <p>Switch to the server.xml file. Delete the webApplication element, then enter include and press CTRL+SPACE.</p> <p>The Liberty configuration assistant shows you the available elements.</p> <p></p> </li> <li> <p>Select include and the element gets generated. As value for location, enter \"application-config.xml\".</p> <p></p> </li> <li> <p>As the owner of the server.xml file, you might want to decide what happens if the file to be included does not exist or contains conflicting configuration settings. </p> <p>Go to the end of the include statement and press CTRL+SPACE. The available attributes for the include element are displayed.</p> <p></p> <p>As you can see, you could define the include file as optional, so Liberty would not throw an error if the include file is missing. </p> </li> <li> <p>Click on onConflict to see the available attributes for that options. </p> <p></p> <p>If you want to make sure, that settings in the server.xml cannot be overridden by included files, select IGNORE, otherwise use MERGE or REPLACE. </p> </li> <li> <p>Click on MERGE and your include statement should look like this:</p> <pre><code>&lt;include location=\"application-config.xml\" onConflict=\"MERGE\"/&gt;\n</code></pre> <p></p> <p>You can configure multiple include files, for example one file for security-config.xml and another one for resource specific configuration settings like for databases or JMS. Now let's test if the include works.</p> </li> <li> <p>Save the server.xml file.</p> </li> <li> <p>From the Visual Studio Code terminal, start the Liberty server instance via the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p>As you can see, the include has been found and processed, so that the application is started.</p> <p></p> <p>Keep the server running as we need it in the next section.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6423-enable-transport-security","title":"6.4.2.3 Enable transport security","text":"<p>Right now, you are not able to access Liberty via HTTPS. While the HTTPS port 9443 has been defined, SSL has not been enabled in Liberty. SSL can be enabled using the transport security feature. So the next step is to enable transport security and take a look at other related topics like keystores.</p> <ol> <li> <p>In the file server.xml, navigate the to featureManager section.</p> </li> <li> <p>Add the feature transportSecurity-1.0 to the featureManager section by add the line:</p> <pre><code>&lt;feature&gt;transportSecurity-1.0&lt;/feature&gt;\n</code></pre> <p>Alternatively, you can use the configuration assistant to enable it.</p> <p></p> </li> <li> <p>Take a look at the logs and you can see that the feature is not available yet.</p> <p></p> <p>This is due to the fact that the Liberty server package generated by the developer only includes the required features (features that have been defined in the server configuration file). You will use the Liberty featureUtility tool to install the missing feature. The feature could be downloaded from a local repository if configured, in this case you will download it from a central maven repository.</p> </li> <li> <p>In the terminal window, stop the Liberty instance by pressing CTRL+C.</p> <p>Then execute the following command to install the missing feature from the maven repository:</p> <pre><code>wlp/bin/featureUtility installFeature transportSecurity-1.0\n</code></pre> <p></p> </li> <li> <p>Then start the Liberty instance again by running the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, Liberty created a certificate and placed it into the SSL key file \"wlp/usr/servers/defaultServer/resources/security/key.p12\". </p> </li> <li> <p>Liberty used the variable keystore_password to secure the keystore. As you did not define a value for the variable keystore_password, Liberty generated a password and stored it in the server.env file. In Visual Studio, open the server.env file to see the keystore password. Your password will likely look different as it has been generated randomly.</p> <p></p> <p>Close the server.env file.</p> </li> <li> <p>To make it more visible where the keystore password comes from, add the following definition to the server.xml file:</p> <pre><code>&lt;keyStore id=\"defaultKeyStore\" password=\"${keystore_password}\" /&gt;\n</code></pre> <p>The keyStore element also allows you to specify a different keystore location and much more.</p> <p></p> </li> <li> <p>Review your configuration in server.xml. It should look like this:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;server description=\"new server\"&gt;\n\n    &lt;!-- Enable features --&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;servlet-6.0&lt;/feature&gt;\n        &lt;feature&gt;transportSecurity-1.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n\n    &lt;!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" --&gt;\n    &lt;httpEndpoint id=\"defaultHttpEndpoint\"\n                host=\"${httpEndpoint_host}\"\n                httpPort=\"${httpEndpoint_port}\"\n                httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n    &lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n    &lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n    &lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n\n    &lt;!-- Automatically expand WAR files and EAR files --&gt;\n    &lt;applicationManager autoExpand=\"true\"/&gt;\n\n    &lt;!-- Configures the application on a specified context root --&gt;\n    &lt;include location=\"application-config.xml\" onConflict=\"MERGE\"/&gt;\n\n    &lt;!-- Default SSL configuration enables trust for default certificates from the Java runtime --&gt;\n    &lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n    &lt;keyStore id=\"defaultKeyStore\" password=\"${keystore_password}\" /&gt;\n&lt;/server&gt;\n</code></pre> </li> <li> <p>Now let's see if the application is accessible via HTTPS. </p> <p>Switch to the browser and access Liberty via https://localhost:9443/mysimpleweb/helloWorld.</p> <p>You should get a security warning like this:</p> <p></p> </li> <li> <p>Click on Advanced, then scroll down and click on \"Accept the Risk and Continue\".</p> <p></p> </li> <li> <p>You should see the output of the web application.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and stop the running Liberty instance by entering CTRL+C in the terminal window. </p> </li> <li> <p>Close Visual Studio Code.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6424-backup-the-generated-files","title":"6.4.2.4 Backup the generated files","text":"<p>You will re-use the generated configuration snippets and other assets in the next section of the lab. Therefore it is a good approach to create a snippet repository. Configuration snippets are typically hosted in a git repository or so, here you will use the folder ~/Student/assets. You will also use the asset directory to store the application WAR file.</p> <ol> <li> <p>Copy the generated configuration files as well as the application war file into the assets directory.</p> <pre><code>cp ~/Student/ops/test/wlp/usr/servers/defaultServer/server.* ~/Student/assets\n\ncp ~/Student/ops/test/wlp/usr/servers/defaultServer/application-config.xml ~/Student/assets\n\ncp ~/Student/ops/test/wlp/usr/servers/defaultServer/apps/simpleweb.war ~/Student/assets\n</code></pre> <p></p> </li> <li> <p>Verify that the assets directory contains the application WAR as well as the configuration files. It also contains the server package but this is no longer required.</p> <pre><code>ls ~/Student/assets\n</code></pre> <p></p> </li> <li> <p>If not already done, exit Visual Studio Code and stop any running Liberty instance.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6425-recap","title":"6.4.2.5 Recap","text":"<p>In this section of the lab, you got an impression how to create and use configuration snippets:</p> <ul> <li>used the Liberty Tools configuration assistant to create configuration snippets and to configure Liberty. </li> <li>used the Liberty featureUtility tool to install missing features.</li> <li>learned how to use variables to make the configuration more portable.</li> <li>learned how to use includes to split the configuration into multiple re-usable files.</li> <li>created a security configuration. </li> </ul> <p>Comments:</p> <ul> <li>Instead of using the Liberty Tools configuration assistant in Visual Studio Code, you could also use the product documentation and copy &amp; paste to create Liberty configuration snippets. </li> <li>You could also use the IBM migration tools to transform an existing configuration for WebSphere Traditional and other runtimes into a Liberty configuration.</li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#65-liberty-administration","title":"6.5 Liberty Administration","text":"<p>Now let\u2019s switch to Liberty Admistrator role and explor how to install and configure Liberty from an administrator point of view. </p> <p>A traditional administrator typically downloads the application server binaries from the IBM pages and uses a regular editor instead of an IDE like Visual Studio to configure Liberty. To download the latest version of WebSphere Liberty, the administrator can use the IBM support page https://www.ibm.com/support/pages/recommended-updates-websphere-application-server</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#651-install-liberty-from-scratch","title":"6.5.1 Install Liberty from scratch","text":"<p>The best practice for Liberty installation is to create a minimal installation by using the Liberty kernel image and install only the required features on top of it. The latest WebSphere Liberty kernel image could be downloaded from the IBM support page. For simplicity, we will use the International License Agreement for Non-Warranted Programs (ILAN) package which is available as zip file at: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/24.0.0.1/wlp-kernel-24.0.0.1.zip</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Create a directory to store the Liberty package. </p> <pre><code>mkdir ~/Student/ops/software\n</code></pre> <p></p> </li> <li> <p>Download and store the Liberty kernel image. </p> <pre><code>wget https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/24.0.0.1/wlp-kernel-24.0.0.1.zip -P ~/Student/ops/software\n</code></pre> <p></p> </li> <li> <p>Use ls command to see that the kernel image is less than 17 MB in size. The overall disk footprint will be larger depending on the required Liberty features.</p> <pre><code>ls -lrt ~/Student/ops/software/\n</code></pre> <p></p> </li> <li> <p>Create a directory for the integration environment. This will be used for the Liberty installation.</p> <pre><code>mkdir ~/Student/ops/int\ncd ~/Student/ops/int\n</code></pre> <p></p> </li> <li> <p>Use the unzip command to extract the image.</p> <pre><code>unzip ../software/wlp-kernel-24.0.0.1.zip\n</code></pre> <p></p> </li> </ol> <p>On the IBM support page, you can find next to the convenience packages like the Liberty kernel package also Liberty archives for Liberty Core, Liberty Base or Liberty ND. To install such an archive, you would use a command like:     \"java -jar ../wlp-base-all-24.0.0.1.jar --acceptLicense .\" </p> <ol> <li> <p>Get the Liberty version by running the following command:</p> <pre><code>wlp/bin/productInfo version\n</code></pre> <p></p> <p>As you can see, this is an ILAN package which can be used for evaluation as well as for production. </p> </li> <li> <p>Get the list of Liberty features that are part of the installation:</p> <pre><code>wlp/bin/productInfo featureInfo\n</code></pre> <p></p> <p>As you can see, no feature is included in the kernel image.</p> <p>Now that Liberty has been installed, the next step is to create a Liberty server instance.</p> </li> </ol> <p>As you have seen, the installation of Liberty is basically an unzip. If you  want to update Liberty later on, you can either apply a jar file or simply replace the binaries.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#652-introducing-liberty-environment-variable-configuration","title":"6.5.2   Introducing Liberty Environment Variable Configuration","text":"<p>You can customize the Liberty environment using certain specific variables to support the placement of product binaries and shared resources. The Liberty environment variables are specified using server.env file. You can use server.env file at the installation and server levels to specify environment variables such as JAVA_HOME, WLP_USER_DIR and WLP_OUTPUT_DIR. Here some of the Liberty specific variables can be used to customize the Liberty environment: (see also https://www.ibm.com/docs/en/was-liberty/nd?topic=liberty-customizing-environment) </p> <ul> <li>${wlp.install.dir} - This configuration variable has an inferred location. The installation directory is always set to the parent of the directory containing the launch script or the parent of the /lib directory containing the target jar files.</li> <li>JVM_ARGS - This environment variable can be used to specify a list of command-line options, such as system properties or -X parameters, that are passed to the JVM when the server starts. Any values that contain spaces must be enclosed in quotes.</li> <li>WLP_USER_DIR - This environment variable can be used to specify an alternative location for wlp.user.dir. This variable must be an absolute path. If this variable is specified, the runtime environment looks for shared resources and server definitions in the specified directory. WLP_USER_DIR can be specified only in the ${wlp.install.dir}/etc/server.env file because the purpose of this variable is to specify where the remaining configuration is located. After the remaining configuration is found and merged, no further configuration in a different location is expected, or supported</li> <li>WLP_OUTPUT_DIR - This environment variable can be used to specify an alternative location for server generated output such as logs, the workarea directory, and generated files. Files in the logs directory can include console.log, messages.log, and any generated FFDC files. Generated files can include server dumps that are created with the server dump or server javadump command. This variable must be an absolute path.</li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#653-create-a-liberty-server-instance","title":"6.5.3 Create a Liberty server instance","text":"<p>The Liberty server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options </p> <p>The server create command creates by default the user directory in a sub-directory of the \\${wlp.install.dir} directory. In production, it is recommended to store the Liberty configuration in a separate directory. This can be done by setting the WLP_USER_DIR environment variable.</p> <ol> <li> <p>The etc directory as well as the server.env file are not created as part of the installation.      Use the following commands to set the variable WLP_USER_DIR to /home/techzone/Student/ops/int/wlp_usr in the server.env on runtime level.      (Keep in mind that the path in server.env must be absolute, ~/Student for example is not supported):</p> <pre><code>mkdir ~/Student/ops/int/wlp/etc\necho \"WLP_USER_DIR=/home/techzone/Student/ops/int/wlp_usr\" &gt; ~/Student/ops/int/wlp/etc/server.env\ncat ~/Student/ops/int/wlp/etc/server.env\n</code></pre> <p></p> </li> <li> <p>Run the following commands to create a new server named \"myServer\":</p> <pre><code>wlp/bin/server create myServer\n</code></pre> <p></p> <p>The new server is created in the following directory: wlp_usr/servers/myServer.</p> </li> <li> <p>Run the following command to verify the name and the path of the server instance:</p> <pre><code>wlp/bin/server list\n</code></pre> <p></p> </li> <li> <p>Run the following command to list the files and directories that have been created for myServer:</p> <pre><code>ls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> <li> <p>Replace the generated Liberty configuration with the configuration that you stored in the assets directory.</p> <pre><code>cp ~/Student/assets/server.* wlp_usr/servers/myServer\nls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> </ol> <p>In the Liberty setup, you now have a server.env file on two levels:          - on runtime level at ${wlp.install.dir}/etc/server.env and          - on server level at ${server.config.dir}/server.env.          If both files are present, the contents of the two files are merged; values in the server-level file take precedence over values in the runtime-level file.     </p> <ol> <li> <p>Verify that the pre-defined HTTP settings fit to your environment:</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep http\n</code></pre> <p></p> </li> </ol> <p>If you want to change those port values, you could define them in the server.env file or bootstrap.properties file for example.  Alternatively you could define the related variable on the operating system level.      </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#654-install-required-features","title":"6.5.4   Install required features","text":"<p>You installed the Liberty kernel package which does not contain any features. The next step is to install the required features. Instead of looking into the Liberty configuration to determine which features are required, you can let Liberty inspect which features are missing. This can be done using the featureUtility and specifying the server you are looking for. The command by default will download the required features from the online repository. In an air-gapped environment, you could download the feature repository from the IBM support page and then specify in the featureUtility command to use a local repository. </p> <ol> <li> <p>To download and install the required features, use the following command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> <p>As you can see, the command detected that the features for servlet-6.0 and transportSecurity-1.0 were missing. It also downloads the feature ssl-1.0 as transportSecurity-1.0 depends on it.</p> </li> <li> <p>Verify that the Liberty features have been installed by using the following command:</p> <pre><code>wlp/bin/productInfo featureInfo\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#655-use-your-own-keystore","title":"6.5.5   Use your own keystore","text":"<p>If you do not create a keystore but enable SSL, Liberty will create a keystore with a random password. Now, you will create your own keystore with a password of choice. </p> <ol> <li> <p>Run the following command to create a keystore</p> <pre><code>wlp/bin/securityUtility createSSLCertificate --server=myServer --password=mySecret\n</code></pre> <p></p> <p>As you can see, the command uses the hostname and server name as subjectDN and encodes the password using xor. The command also allows to use aes encoding or encryption, see https://www.ibm.com/docs/en/was-liberty/base?topic=applications-securityutility-command.</p> </li> <li> <p>Our server template has already configured SSL and uses a variable to specify the keystore password. Use the following commands to review what has been configured in the server.xml file:</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep trans\ncat wlp_usr/servers/myServer/server.xml | grep keystore\n</code></pre> <p></p> </li> <li> <p>The keystore password has been configured in the server.env file. Use the following command for review the settings:</p> <pre><code>cat wlp_usr/servers/myServer/server.env;echo\n</code></pre> <p></p> <p>As expected, the password used for the keystore does not match to the one in server.env and must be updated. </p> </li> <li> <p>Best practice is to store the password encoded or encrypted. In this case, you will use encoding via aes and store the password in the server.env file. To generate the encoded password, you can use the securityUtility encode command. Use the following command to update the server.env file with the encoded keystore password of \u201cmySecret\u201d, then review the result:</p> <pre><code>echo \"keystore_password=$(wlp/bin/securityUtility encode --encoding=aes mySecret)\" &gt; wlp_usr/servers/myServer/server.env\ncat wlp_usr/servers/myServer/server.env\n</code></pre> <p></p> </li> </ol> <p>The encoded keystore password is not unique, so you might have a different password as in the screenshot above.           But as long as you use the same password to be encoded, all of the different resulting strings are valid.      </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#656-verify-that-the-server-configuration-works","title":"6.5.6   Verify that the server configuration works:","text":"<ol> <li> <p>Start the server via the following command:</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> <p></p> <p>As you can see, the Liberty server is running and listens on port 9080 and 9443. You can also see that it complains about the missing include file application-config.xml. You will fix this later.</p> </li> <li> <p>Verify that the server is accessible via HTTPs. Switch to the browser and access the web application via the URL https://localhost:9443.      As before, you will get a warning that your connection is not secure. Click on Advanced, scroll down and click on \"Accept the Risk and Continue\". Then you should be able to access the application.</p> <p></p> </li> <li> <p>Switch back to the terminal window and press CTRL+C in the terminal window to stop the tail command.</p> </li> <li> <p>Stop the server via the following command:</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#657-deploying-a-sample-application-to-liberty","title":"6.5.7   Deploying a sample application to Liberty","text":"<p>In the first part of this lab, you used the Liberty Tools to develop an application and configure Liberty. The application got deployed via maven under the cover. Then you used the Liberty server package which already included the deployed application. In this section of the lab, you will deploy an application to Liberty using two different techniques.</p> <p>First, you will simply copy the application WAR module into the Liberty \"dropins\" directory. The dropins directory is monitored by Liberty. As deployable units (WAR, EAR, JAR) are added to the directory, Liberty automatically deploys and starts the application on the Liberty server.  The dropins directory can be used for applications that do not require extra configuration like security role mapping. As the deployable units are removed from the dropins folder, the applications are stopped and removed from the running Liberty server.</p> <ol> <li> <p>In the terminal window start the server and use the tail -f command to view the messages.log file.</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> </li> <li> <p>Right-click on Terminal and select New Window to open a second terminal window.</p> <p></p> </li> <li> <p>In the new Terminal window, navigate to the int directory:</p> <pre><code>cd ~/Student/ops/int/\n</code></pre> </li> <li> <p>Copy the web application into the dropins directory.</p> <pre><code>cp ~/Student/assets/simpleweb.war wlp_usr/servers/myServer/dropins\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window where tail command is running. You can see messages that the application deployment has taken place, the application simpleweb application has been started and is available at http://rhel9-base.gym..lan:9080/simpleweb/.</p> <p>Be aware that Liberty defined the context root based on the name of the WAR file as \"/simpleweb\".</p> <p></p> </li> <li> <p>Verify that the application is accessible by opening a browser at: http://localhost:9080/simpleweb/helloWorld</p> <p></p> </li> <li> <p>In the terminal window where tail is running, you can see that the application has been accessed.</p> <p></p> </li> <li> <p>Switch back to the terminal where you entered the copy command and remove the deployed application from the dropins directory using the following command:</p> <pre><code>rm wlp_usr/servers/myServer/dropins/simpleweb.war\n</code></pre> </li> <li> <p>Switch back to the terminal window where tail is running. You can see that the application has been removed.</p> <p></p> <p>While the dropins directory can be used for applications that do not require extra configuration, deploying the application by adding it to the Liberty server configuration provides the freedom to configure the Liberty server based on the application configuration requirements.  Now you will deploy the simpleweb application by adding it to the Liberty server configuration.</p> <p>The default place for applications is: ${server.config.dir}/apps.</p> </li> <li> <p>Switch back to the terminal window not running tail. Copy the application WAR file into the apps directory by using the following command:</p> <pre><code>cp ~/Student/assets/simpleweb.war wlp_usr/servers/myServer/apps\nls -lrt wlp_usr/servers/myServer/apps/*.war\n</code></pre> <p></p> </li> <li> <p>To define the application in the Liberty configuration file, take a look at the application configuration that has been provided as snippet.</p> <pre><code>cat ~/Student/assets/application-config.xml\n</code></pre> <p></p> <p>As you can see, a different context root has been defined.</p> </li> <li> <p>You will add the webApplication element to the Liberty configuration by using the include concept. Review that the include element and the properties that have already been defined in the server.xml file.</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep include\n</code></pre> <p></p> </li> <li> <p>Copy the application-config.xml into the server directory.</p> <pre><code>cp ~/Student/assets/application-config.xml wlp_usr/servers/myServer\nls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> <li> <p>Switch back to the terminal window running tail. You can see that the application simpleweb gets deployed, this time with the context root mysimpleweb. </p> <p></p> </li> <li> <p>Finally test the application in the browser via URL http://localhost:9080/mysimpleweb/helloWorld. </p> <p></p> </li> </ol> <p>You have successfully deployed the web application into Liberty, first via dropins directory, then by adding it to the server.xml file via include.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#658-change-logging-and-tracing-by-using-configdropins","title":"6.5.8   Change logging and tracing by using ConfigDropins","text":"<p>Right now, you used the include concept to enhance the server.xml file with additional configuration files. Alternatively, you can specify additional configuration files in the configDropins directory without specifying include elements in the server.xml file. If you want to add configuration files to override anything in the erver.xml file of the server, create a configDropins/overrides directory.  In this case, you want to add/change the log level of the application server.</p> <ol> <li> <p>From the second terminal window, issue the following command to create a configDropins directory in the server directory.</p> <pre><code>mkdir -p wlp_usr/servers/myServer/configDropins/overrides\n</code></pre> <p></p> <p>Add INFO logging output to console</p> <p>Liberty provides the ability to set the logging level to any of the supported log levels defined in the documentation: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace </p> <ul> <li>AUDIT logging enables logging of \u201cSignificant event affecting server state or resources\u201d</li> <li>INFO logging enables of \u201cGeneral information outlining overall task progress\u201d By default, the Liberty Server has the console log level set to AUDIT. In this section, you will change the level of log messages written to the console from AUDIT to INFO, which will result in additional logging messages. You will perform this activity not directly in the server.xml file but using the configDropins concept. Purpose is that you could change the log level easily on the fly and switch back to the previous level without having to manually edit a file. </li> </ul> </li> </ol> <p>Note:          It is also possible to set default logging options in the bootstrap.properties file.          If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup,          so it may be useful for debugging server initialization problems.     </p> <ol> <li> <p>Switch to the terminal currently running the tail on the file messages.log and press CTRL+C to stop it.</p> </li> <li> <p>Review the current console logging and you can see that it only contains messages from type AUDIT.</p> <pre><code>tail -f wlp_usr/servers/myServer/logs/console.log\n</code></pre> <p></p> </li> <li> <p>Switch to the second terminal window. Create a server configuration file to change the console log level to INFO via the following command:</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;logging consoleLogLevel=\"INFO\"&gt; &lt;/logging&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>You will verify that messages of log level INFO will now be logged during the configuration of tracing.</p> <p>Update trace specification</p> <p>By default, the Liberty Server trace specification is set to \"*=info=enabled\". </p> <p>To update the trace specification, you will again use the configDropings concept.</p> </li> <li> <p>Switch to the second terminal window. Update the file configDropins/overrides/loglevel-config.xml to include a trace specification via the following command:</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled\"&gt;\n    &lt;/logging&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>As you can see, messages of log level INFO are displayed now which means that the change of the consoleLogLevel has been picked up.  The message indicates as expected, that the trace level has been set to \u201cwebcontainer=all\u201d. </p> </li> <li> <p>Switch to the second terminal window to verify that the trace has been created.</p> <pre><code>ls -lrt wlp_usr/servers/myServer/logs\n</code></pre> <p></p> </li> <li> <p>Remove the file to set the trace level back to default. </p> <pre><code>rm wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>As you can see, the trace specification has been changed back to \"*=info\".</p> </li> <li> <p>Press CTRL+C in the terminal window to stop the tail command.</p> </li> <li> <p>Stop the Liberty instance using the following command: </p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> <li> <p>Delete the generated trace files by using  the following command:</p> <pre><code>rm wlp_usr/servers/myServer/logs/trace*.log\n</code></pre> <p>As you have seen, the logging component can be controlled through the server configuration and it is quite convenient to enable and disable tracing using configDropins.</p> <p>Configure logging in the bootstrap.properties file</p> <p>Occasionally, you might need to configure trace to diagnose a problem that occurs before the server.xml file is processed. Or you want to change the log format to something other than basic. In this case, the equivalent configuration properties can be specified in the bootstrap.properties file. </p> <p>If a configuration property is specified in both the bootstrap.properties file and the server.xml file, the value in bootstrap.properties is used until the server.xml file is processed. Then, the value in the server.xml file is used. Avoid specifying different values for the same configuration property in both the bootstrap.properties and the server.xml file.</p> <p>You will now change the log format to json. As the bootstrap.properties file does not exist, you will simpoly create it.</p> </li> <li> <p>Create a bootstrap,properties file that defines the property com.ibm.ws.logging.console.format by executing the following command: </p> <pre><code>echo 'com.ibm.ws.logging.console.format=json' &gt; wlp_usr/servers/myServer/bootstrap.properties\ncat wlp_usr/servers/myServer/bootstrap.properties\n</code></pre> <p></p> </li> <li> <p>Start the server via server run and you can see that the log format has been set to JSON.</p> <pre><code>wlp/bin/server run myServer\n</code></pre> <p></p> </li> <li> <p>In the terminal window, press CTRL+C to stop the server.</p> </li> <li> <p>Change the log format back to default by deleting bootstrap.properties, then run the server again.</p> <pre><code>rm wlp_usr/servers/myServer/bootstrap.properties\nwlp/bin/server run myServer\n</code></pre> <p></p> </li> <li> <p>In the terminal, press CTRL+C to stop the server.</p> <p>If you are interested into additional logging attributes, please take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace \u2003</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#659-review-the-liberty-configuration-via-liberty-rest-apis","title":"6.5.9   Review the Liberty configuration via Liberty REST APIs","text":"<p>If you use several includes or config dropins, you might run into the situation where you want to review the final setup. This can be done by using the restConnector APIs. </p> <p>Configure the admin access to the Liberty instance. </p> <ol> <li> <p>First of all, you need a strong password as the APIs provide access to sensitive data which could help a hacker to manipulate the system. Use the securityUtility to create a secure password as LibertyIsGreat.</p> <pre><code>wlp/bin/securityUtility encode --encoding=aes LibertyIsGreat\n</code></pre> <p></p> <p>As before, the encoded password is not unique, so your output will likely look different that the one above. But both are valid.</p> </li> <li> <p>Use the following commands to setup and configure the restConnector.</p> <p>a. Update the user password in the following code snippet or keep the password as is.</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;restConnector-2.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n&lt;quickStartSecurity userName=\"admin\" userPassword=\"{aes}ALCpb79MrIuO8aVUdyXKVDWNssXfX3OmL+xD2J3jWcOgLwrIq1f7/qO8tCR7JwNmcQ==\" /&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/rest-config.xml\n</code></pre> <p></p> <p>b. As the restConnector feature is not installed so far, switch to a terminal window to install the missing features via command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> </li> <li> <p>Start the Liberty instance by using the command:</p> <pre><code>wlp/bin/server start myServer\n</code></pre> </li> <li> <p>From a browser window, access the Liberty REST APIs via the URL https://localhost:9443/ibm/api/config.      Enter Username/Password as: admin/LibertyIsGreat.</p> <p></p> </li> <li> <p>If asked, don\u2019t save the password in the browser. Your browser should display something like this:</p> <p></p> </li> <li> <p>In the browser window, press CTRL+F and enter webapp to search for webapp. You should find the related settings.</p> <p></p> </li> <li> <p>Search for logging and you get all attributes currently used for logging.</p> <p></p> </li> <li> <p>Finally stop the server and remove the restConnector configuration.</p> <pre><code>wlp/bin/server stop myServer\nrm wlp_usr/servers/myServer/configDropins/overrides/rest-config.xml\n</code></pre> <p>For more details about the restConnector for administration, please take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=features-admin-rest-connector-20</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6510-using-the-liberty-admincenter","title":"6.5.10 Using the Liberty AdminCenter","text":"<p>The Liberty AdminCenter can be used to monitor the status of the Liberty server. You will define two users, an administrative user with the role admin and the second user with the role reader. Use again the securityUtility to create two secure passwords.</p> <ol> <li> <p>Create a password as Liberty4Admins for the admin user.</p> <pre><code>    wlp/bin/securityUtility encode --encoding=xor Liberty4Admins\n</code></pre> <p></p> </li> <li> <p>Create a password as Liberty4Readers for the second user.</p> <pre><code>    wlp/bin/securityUtility encode --encoding=xor Liberty4Readers\n</code></pre> <p></p> </li> <li> <p>Execute the following command to Configure the AdminCenter with the two users using the generated passwords generated before.</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;adminCenter-1.0&lt;/feature&gt;\n        &lt;feature&gt;websocket-2.1&lt;/feature&gt;\n    &lt;/featureManager&gt;\n    &lt;!-- Configure administrative roles. --&gt;\n    &lt;basicRegistry realm=\"basicRealm\"&gt;\n        &lt;user name=\"admin\" password=\"{xor}EzY9Oi0rJmseOzI2MSw=\" /&gt;\n        &lt;user name=\"reader\" password=\"{xor}EzY9Oi0rJmsNOj47Oi0s\" /&gt;\n    &lt;/basicRegistry&gt; \n    &lt;!-- Assign 'admin' to Administrator --&gt;\n    &lt;administrator-role&gt;\n        &lt;user&gt;admin&lt;/user&gt;\n    &lt;/administrator-role&gt;\n    &lt;reader-role&gt;\n        &lt;user&gt;reader&lt;/user&gt;\n    &lt;/reader-role&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/adminCenter-config.xml\n</code></pre> <p></p> </li> <li> <p>As the AdminCenter feature is not installed so far, switch to a terminal window to install the feature via command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> </li> <li> <p>Start the server and take a look at the log:</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> <p></p> <p>As you can see, the AdminCenter feature adminCenter-1.0 has been enabled. </p> </li> <li> <p>Access the Liberty Admin Center via URL https://localhost:9443/adminCenter, then enter the credentials for the admin user (admin/Liberty4Admins) and press Submit.</p> <p> The Admin Center Toolbox is displayed.</p> </li> <li> <p>Click on Explore to explore the Liberty status, the applications as well monitoring data and configuration.</p> <p></p> </li> <li> <p>On the tab Overview take a look at the running servers and applications. </p> <p></p> <p>You would see more than one server if a collection would have been defined.</p> </li> <li> <p>On the tab Applications you can see the running applications. As user with admin rights, you can use the menu to start, stop or restart an application.</p> <p></p> </li> <li> <p>On the tab Montor, you can see basic performance data. </p> <p></p> <p>As you can see here, the Used Heap Memory max value above 1.9 MB which indicates that max heap has not been defined. You will change that in the next section of the lab.</p> </li> <li> <p>On the tab Configure, you can see current configuration. </p> <p></p> <p>You can see a warning that remote file access is not configured. You can ignore that as you will not configure Liberty via AdminCenter.  But you could click on the link to see the configuration in design and source view.</p> </li> <li> <p>Select to log out as admin.</p> <p></p> </li> <li> <p>Log in as user reader with password Liberty4Readers.</p> <p></p> </li> <li> <p>Click on Explore, then select the tab Applications. Try to click on the twisty next to the simpleweb application and you can see that you are not auithorized to start or stop an application.</p> <p></p> </li> <li> <p>Select to log out as reader.</p> <p></p> </li> <li> <p>In the terminal window, press CRTL+C to stop the tail command. </p> </li> <li> <p>Stop the Liberty server.</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6511-customizing-liberty-jvm-options","title":"6.5.11 Customizing Liberty JVM Options","text":"<p>As you have seen in the Admin Center, the Liberty value for max heap is quite large which indicates that a limit has not been defined yet. This will be done as part of this section by defining Liberty JVM options. </p> <p>The generic JVM arguments are used to configure and adjust how the JVM executes. Liberty is pre-configured with minimal settings defined. Custom generic JVM arguments such as heap settings for a Liberty server can be defined in the jvm.options file.</p> <ol> <li> <p>Create a jvm.options file with definitions for min and max heap by executing the following command:</p> <pre><code>echo '\n-Xms25m\n-Xmx500m\n' &gt; wlp_usr/servers/myServer/jvm.options\ncat wlp_usr/servers/myServer/jvm.options\n</code></pre> <p></p> </li> <li> <p>Start the server with the updated JVM options.</p> <pre><code>wlp/bin/server start myServer\n</code></pre> </li> <li> <p>Access the Liberty Admin Center again via URL https://localhost:9443/adminCenter. Log in as user reader with password Liberty4Readers.</p> <p></p> </li> <li> <p>Click on Explore, then select Monitor. Take a look at the dashboard and you can see that the Used Heap Memory Max is now 500 MB as defined in jvm.options.</p> <p> </p> </li> <li> <p>Log out from admin center.</p> </li> <li> <p>Stop the Liberty server using the following command:</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> <p>For additional information around the Liberty Admin Center, take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=center-setting-up-admin</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#6512-recap","title":"6.5.12 Recap","text":"<p>Let\u2019s recap what you did in this part of the lab: </p> <ul> <li>installed a Liberty server using the Liberty kernel image.</li> <li>used Liberty environment variables to separate the Liberty configuration from the binaries.</li> <li>created a Liberty server instance and installed missing features.</li> <li>deployed a simple web application via dropins and via server.xml.</li> <li>configured logging via server.xml and server.env.</li> <li>changed the Liberty heap size via jvm.options.</li> <li>used the REST API to see the Liberty configuration.</li> <li>used Liberty Admin Center to see monitoring data and administer Liberty apps. \u2003</li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#7-lab-cleanup","title":"7 Lab Cleanup","text":"<ol> <li> <p>Once you are done, make sure that Liberty and Visual Studio Code is not running.</p> </li> <li> <p>Delete the Student folder via command:</p> <pre><code>rm -rf ~/Student\n</code></pre> </li> <li> <p>Close the browser and all terminal windows</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_YI/#summary","title":"Summary","text":"<p>In this lab, you learned how to develop a simple application as a developer, how to deployment and configure the application as an configuration opertor, and how to install and configure Liberty as an administrator.</p> <p>Congratulations!</p> <p>You have successfully completed the lab \"Liberty Getting Started\"</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/","title":"Liberty Getting Started","text":""},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#liberty-getting-started","title":"Liberty Getting Started","text":""},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#data-collection-assessments-deployment-accelerators","title":"data collection, assessments, &amp; deployment accelerators","text":"<p>Last updated: March 2024</p> <p>Duration: 90 minutes</p> <p>Need support? Contact Lars Besselmann, Kevin Postreich</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#liberty-getting-started-tasks","title":"Liberty Getting Started tasks","text":"<p>Liberty is a lightweight open framework for building fast and efficient cloud-native Java microservices. Build cloud-native apps and microservices while running only what you need. It is the most flexible server runtime available to Java developers in this solar system.</p> <ul> <li>Open Liberty is designed with both developers and application business owners in mind.<ul> <li>It delivers the latest Java APIs and integrates with the most popular Developer and Build tools.</li> <li>It has built-in innovation like zero-migration to reduce application runtime costs and delivery effort.</li> <li>WebSphere Liberty is downstream of Open Liberty so anything that works on Open Liberty works on WebSphere Liberty.</li> <li>Same Monthly Continuous Delivery Release Cycle as WebSphere Liberty</li> <li>You do not need to switch to WebSphere Liberty for commercial support</li> </ul> </li> </ul> <p>Liberty Tools is a set of intuitive developer tools for the Eclipse IDE, Visual Studio Code, and IntelliJ IDEA development environments. These tools adopt a Maven/Gradle-centric approach and enable fast, iterative cloud-native Java application development through Liberty dev mode. Liberty Tools also provides helpful, time-saving features such as code completion, hover descriptions, and configuration diagnostics for Jakarta EE APIs, MicroProfile APIs, and Liberty configuration. For more information, check out the Liberty Tools overview.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#1-introduction","title":"1. Introduction","text":"<p>In the lab, there will be different roles involved with perform different tasks using different tools. You will perform all the different roles during the lab. </p> <ul> <li> <p>You will start as an application developer and use Liberty starter and the code assistant to develop a simple web application. But don't worry, you do not have to be a developer to do this.</p> </li> <li> <p>As Liberty configuration developer, You will use the configuration assistant and concepts like includes and variables to create a portable configuration. </p> </li> <li> <p>As Liberty administrator, you will install Liberty from a kernel image, add missing features, configure loging, security and so on, will use the Liberty REST APIs to review the configuration and use Liberty Admin Center for monitoring.</p> </li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#2-objective","title":"2. Objective","text":"<p>These are the objectives in the lab:</p> <ul> <li> <p>As application developer:</p> <ul> <li>Tasks: <ul> <li>Develops the application.</li> <li>Creates a basic Liberty configuration for the application</li> </ul> </li> <li>Tools:<ul> <li>Apache Maven <ul> <li>to build the project </li> <li>to download the Open Liberty server runtime from the maven repository</li> </ul> </li> <li>Liberty Maven Plugin for inner-loop development via Liberty Dev Mode<ul> <li>to build the application war and deploy it to Liberty</li> </ul> </li> <li>Visual Studio Code <ul> <li>as IDE to build the application code</li> </ul> </li> <li>Liberty Tools plugin for Visual Studio Code<ul> <li>provides a Liberty dashboard with Dev Mode integration in the IDE</li> <li>provides Jakarta EE and MicroProfile code assistance</li> <li>provides Liberty configuration assistance</li> </ul> </li> <li>Liberty Starter Project <ul> <li>to generate a maven project for Liberty </li> </ul> </li> <li>Open Liberty / WebSphere Liberty<ul> <li>as runtime for the Java application that will be developed</li> <li>to create a server package</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>As Liberty configuration developer:</p> <ul> <li>Tasks: <ul> <li>Develop portable Liberty configuration snippets using includes, variables and much more.</li> </ul> </li> <li>Tools:<ul> <li>Visual Studio Code with Liberty Tools plugin as editor with configuration assistance</li> </ul> </li> </ul> </li> <li> <p>As Liberty administrator:</p> <ul> <li>Tasks: <ul> <li>Installs Liberty</li> <li>Configures Liberty for the target application using Liberty configuration snippets</li> <li>Applies security to harden the Liberty configuration</li> <li>Configure logging using configDropins</li> <li>Review the configuration using LIberty REST APIs</li> <li>Monitor Liberty using the Admin Center</li> </ul> </li> <li>Tools:<ul> <li>Liberty server command to create a Liberty instance and start, stop or dump it</li> <li>Liberty installUtility to install missing features</li> <li>Liberty securityUtility to create a keystore or encode a password</li> <li>Liberty REST APIs and Admin Center</li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#3-prerequisites","title":"3. Prerequisites","text":"<p>The following prerequisites must be completed prior to beginning this lab:</p> <ul> <li> <p>Familiarity with basic Linux commands</p> </li> <li> <p>Have internet access</p> </li> <li> <p>Have a lab environment ready</p> </li> </ul> <p></p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#4-accessing-the-environment","title":"4. Accessing the environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://techzone.ibm.com/collection/libery-getting-started-labs </p> <p>The lab environment contains one (1) Linux VM, named Workstation.</p> <p></p> <p></p> <ol> <li> <p>Access the lab environment from your web browser. </p> <p>A <code>Published Service</code> is configured to provide access to the <code>Workstation</code> VM through the noVNC interface for the lab environment.</p> <p>a. When the demo environment is provisioned, click on the <code>environment tile</code> to open its details view. </p> <p>b. Click on the <code>Published Service</code> link which will display a Directory listing </p> <p>c. Click on the <code>vnc.html</code> link to open the lab environment through the noVNC interface. </p> <p></p> <p>d. Click the <code>Connect</code> button </p> <p></p> <p>e. Enter the password as:  <code>IBMDem0s!</code>. Then click the <code>Send Credentials</code> button to access the lab environment. </p> <p>Note: That is a numeric zero in IBMDem0s!  </p> <p></p> <p></p> </li> <li> <p>If prompted to Login to the \"workstation\" VM, use the credetials below: </p> <p>The login credentials for the workstation\u201d VM is:</p> <ul> <li> <p>User ID: techzone</p> </li> <li> <p>Password: IBMDem0s!</p> </li> </ul> <p>Note: That is a numneric zero in the password</p> <p></p> <p></p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#5-tips-for-working-in-the-lab-environment","title":"5. Tips for working in the lab environment","text":"<ol> <li> <p>You can resize the viewable area using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a. From the environemnt VM, click on the twisty on the noNC control pane to open the menu.  </p> <p></p> <p>b. To increase the visible area, click on <code>Settings &gt; Scaling Mode</code> and set the value to <code>Remote Resizing</code></p> <p></p> </li> <li> <p>You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. </p> <p>a. Copy the text from the lab guide that you want to paste into the lab environment</p> <p>b. Click the <code>Clipboard</code> icon and <code>paste</code> the text into the noVNC clipboard</p> <p></p> <p>c. Paste the text into the VM, such as to a terminal window, browser window, etc. </p> <p>d. Click on the <code>clipboard</code> icon again to close the clipboard</p> </li> <li> <p>An alternative to using the noVNC Copy / Paste option, you may consider opening the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide without having to use the noVNC clipboard. </p> </li> <li> <p>To switch between different windows or get access the tool bar, click on the <code>Activities</code> icon within the VM.</p> <p></p> <p>Then select from the tool bar the application that you want to open. In the lab, you will use Firefox and the terminal.</p> <p></p> </li> <li> <p>How to change the background color  In the environment, the default background for terminal windows and Visual Studio Code is dark. For the lab documentation, we changed the color to light. Feel free to keep the background in light but if you want to change it to dark, here the explanation how it was changed.</p> <ol> <li> <p>How to change the terminal background to white     Right-click into the terminal background, then select Preferences.</p> <p></p> <p>A Preferences window opens. Click on Colors, then uncheck the box for  Use colors from system theme . (If you want to get back to dark, check the box again).</p> <p></p> <p>The terminal background should switch to white.</p> <p></p> <p>Close the Preferences window.</p> </li> <li> <p>How to switch the background of Visual Studio Code from dark to light</p> <p>In a terminal Window, run the following command to start Visual Studio Code</p> <pre><code>mkdir ~/temp\ncode ~/temp\n</code></pre> <p></p> <p>Visual Studio Code opens with a dark background.  Click on  Yes, I trust the authors </p> <p></p> <p>Then select Preferences &gt; Theme &gt; Color Theme</p> <p></p> <p>Select Light</p> <p></p> <p>The tool will change to a light background, see below.</p> <p></p> <p>Close Visual Studio Code.</p> </li> </ol> </li> </ol> <p> </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6-execute-lab-tasks","title":"6. Execute Lab Tasks","text":""},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#61-verify-the-installed-software","title":"6.1 Verify the installed software","text":"<p>Open a terminal by clicking on Activities and selecting terminal.</p> <p></p> <p>The terminal window opens.</p> <p></p> <p>Check the Maven version via the following command:</p> <pre><code>mvn -version\n</code></pre> <p></p> <p>Check the Docker version via the following command:</p> <pre><code>docker -v\n</code></pre> <p></p> <p>Check the Git version via the following command:</p> <pre><code>git -v\n</code></pre> <p></p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#62-create-the-required-working-directories","title":"6.2 Create the required working directories","text":"<p>Create the Student directories and some sub-directories used in the lab:</p> <pre><code>mkdir ~/Student\nmkdir ~/Student/dev\nmkdir ~/Student/ops\nmkdir ~/Student/assets\n</code></pre>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#63-develop-a-liberty-web-application","title":"6.3 Develop a Liberty web application","text":"<p>Target of the section is to develop a simple web application for Liberty. You will use a Liberty starter application to now start from scratch and use Visual Studio Code and Liberty Tools to build the application.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#631-create-a-starter-app-project","title":"6.3.1 Create a starter app project.","text":"<p>In this scenario, you want to create a Jakarta EE 10 Web application with the name \u201esimpleweb\u201c and will use maven to build it. The fastest way to get started is to use an Open Liberty starter application which generates a project with the maven configuration as well as a basic Liberty setup.</p> <p></p> <p>The Open Liberty starter gives you a simple, quick way to get the necessary files to start building an application on Open Liberty. There is no need to search how to find out what to add to your maven or gradle build files. A simple RestApplication.java file is generated for you to start creating a REST based application. A server.xml configuration file is provided with the necessary features for the MicroProfile and Jakarta EE versions that you previously selected. </p> <ol> <li>Open a browser window by clicking on Activities and then select the Firefox browser icon.</li> </ol> <p></p> <p>If you get a pop-up that Authentication is required, enter  IBMDem0s! </p> <p></p> <ol> <li>Enter the URL https://openliberty.io/start/</li> </ol> <p>|  | If the page does not open, close the browser and open it again. |</p> <ol> <li>Change the artifact name to simpleweb, change the Java level to 17 and leave the rest as is, then click on Generate project </li> </ol> <p></p> <ol> <li>Click on Save to save the project under Downloads.</li> </ol> <p></p> <p>You will see a pop-up like the one below. Click on Got it!  to close the window.</p> <p></p> <ol> <li>Extract the file</li> </ol> <p>Click on Activities and switch to the terminal window. Move the starter project to the developer directory and extract it:</p> <pre><code>mv ~/Downloads/simpleweb.zip ~/Student/dev\nunzip ~/Student/dev/simpleweb.zip -d ~/Student/dev/simpleweb\n</code></pre> <p></p> <p>The project has been created under ~/Student/dev/simpleweb. List the content via following command:</p> <pre><code>ls -lrt ~/Student/dev/simpleweb\n</code></pre> <p></p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#632-inspect-the-starter-project-using-open-visual-studio-code","title":"6.3.2. Inspect the starter project using Open Visual Studio Code","text":"<p>Now you will use Visual Studio Code to see what has been generated as part of the starter project</p> <ol> <li> <p>From the terminal window, start Visual Studio Code</p> <p>cd ~/Student/dev/simpleweb/ code .</p> </li> </ol> <p></p> <p>Visual Studio Code will be opened.</p> <p></p> <p>Click on Yes, I trust the authors.</p> <p>If you see during the lab one of the pop-ups below or any other pop-up asking to install something, close the pop-up without installation by clicking the X.  </p> <ol> <li> <p>Investigate into the generated project:</p> <p>In Visual Studio Code, take a look at the Explorer section to see the content of the project. You can find a src and a target folder, a Dockerfile and a maven build file (pom.xml).</p> <p></p> </li> <li> <p>Take a look at the generated Maven configuration </p> <p>Click on pom.xml to see the maven pom.</p> <p>In the build section, you can find the configuration of the liberty-maven-plugin.</p> <p></p> <p>Don\u2019t worry if the version of the plugin has changed to 3.10.2 or later.</p> <p>Finally close the pom.xml.</p> </li> <li> <p>Review the generated Liberty configuration      Open src &gt;  main &gt;liberty &gt; config &gt; server.xml to see the Liberty configuration.</p> <p></p> <p>As you can see, the features for jakartaee-10 and MicroProfile-6.1 have been configured.</p> <p></p> <p>Scroll down and you can see that the http endpoint and the web application have been configured.</p> <p></p> <p>Don't close the server.xml file as you will modify it in teh next section.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#633-adjust-the-liberty-configuration","title":"6.3.3 Adjust the Liberty configuration","text":"<p>The application will not require the full Jakarta EE 10 standard but only the servlet specification. As best practice to optimize the footprint of the application runtime regarding memory and disk space and limit the number of potential vulnerabilities, define only the features that are required by the application. In this case, replace the jakartaee-10 feature with an appropriate servlet feature. </p> <ol> <li> <p>In the Visual Studio Code editor for server.xml, scroll up to the feature section.</p> </li> <li> <p>Delete the lines jakartaee-10.0 and &lt; feature&gt;MicroProfile-6.1.     Your featureManager section should now look like this:</p> <p></p> </li> <li> <p>Now you will use the Liberty configuration assistant to define the servlet feature. Place your cursor at the beginning of an empty line in the featureManager section. Then press the CTRL key and type SPACE to activate the configuration assistant. You should see something like:</p> <p></p> <p>|  | You might have to click on the arrow right to feature to get the description. |</p> </li> <li> <p>Select feature and the feature element gets added.</p> <p></p> </li> <li> <p>Use again CTRL+SPACE to get the list of available features.</p> <p></p> </li> <li> <p>Type the word servlet to see the available servlet features.</p> <p></p> </li> <li> <p>Use the arrow-down key to get the description for servlet-6.0.</p> <p></p> </li> <li> <p>Select the feature servlet-6.0 and your configuration should now look like this:</p> <p></p> </li> <li> <p>For this part of the lab, we do not define a keystore or the basic registry, so delete the generated entries.     Your configuration should now look like this:</p> <p></p> </li> <li> <p>Save the configuration by using CTRL+S.</p> </li> <li> <p>Close the file server.xml.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#634-using-liberty-dev-mode","title":"6.3.4   Using Liberty Dev Mode","text":"<p>Liberty development mode, or dev mode, allows you to develop applications with any text editor or IDE by providing hot reload and deployment, on demand testing, and debugger support. Liberty Dev Mode is enabled through Maven and Gradle projects.</p> <p>Your code is automatically compiled and deployed to your running server, making it easy to iterate on your changes.</p> <p>You can run tests on demand or even automatically so that you can get immediate feedback on your changes. You can also attach a debugger at any time to debug your running application.</p> <p></p> <p>You can use the capabilities of Liberty dev mode inside and outside of an IDE. This provides you the flexibility of choice. In a terminal window, you would use Liberty in dev mode with maven using the command mvn liberty:dev or mvn liberty:devc if you want to develop in a container. </p> <p>In the lab environment, the Liberty tools plugin has been installed into Visual Studio Code. Therefore you will use the integrated Liberty dashboard instead.\u2003</p> <ol> <li> <p>In Visual Studio Code, expand the Liberty Dashboard.</p> <p></p> </li> <li> <p>Right-click on simpleweb and then start to start the server in dev mode.</p> <p></p> </li> <li> <p>A terminal opens within Visual Studio Code and you can see that the start of the build process gets triggered.</p> <p></p> </li> <li> <p>The Liberty plugin as well as the Liberty server artifacts get downloaded, then the server is ready for testing.</p> <p></p> </li> <li> <p>Switch to the browser window and enter the URL \u201clocalhost:9080\u201d. You should see something like this:</p> <p></p> <p>|  | If you get a pop-up with \u201cAuthentication required\u201d, enter the password \u201cIBMDem0s!\u201d and click on \u201cUnlock\u201d. |</p> </li> </ol> <p>Now, let\u2019s create a simple web application.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#635-create-a-simple-web-application","title":"6.3.5 Create a simple web application","text":"<p>Now you will develop a simple web application which maiy consists of a servlet. Thanks to Liberty code assistant, you don't have to write the code on your own. </p> <ol> <li> <p>Switch to Visual Studio Code.</p> </li> <li> <p>In Visual Studio Code, expand the path to src/main/java/com/demo/rest, then right-click on demo and select New File.</p> <p></p> </li> <li> <p>Enter the name helloWorldServlet.java and press ENTER.</p> <p></p> </li> <li> <p>The file src/main/java/com/demo/helloWorldServlet.java is generated and opens in an editor.</p> <p></p> </li> <li> <p>Remove all code from the file. Then enter servlet and press CTRL+SPACE.</p> <p></p> </li> <li> <p>The code assistant offers some servlet methods for Jakarta EE. Select servlet_doget, and the required starter code gets generated.     As you can see, the fields that should be changed are highlighted.</p> <p></p> </li> <li> <p>Change the servletName to helloWorldServlet and the urlPatters to /helloWorld. The code should now look like this:</p> <p></p> </li> <li> <p>Press CTRL+S to save the code change. Take a look at the terminal output. As Liberty has been started in DevMode, the code changes are picked up automatically, the source gets compiled and Liberty gets updated.</p> <p></p> </li> <li> <p>Switch to the browser and open the URL localhost:9080/simpleweb/helloWorld. You should see the output of the created servlet.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and change the source code of the servlet response text to something like this:</p> <p></p> </li> <li> <p>Save the changes and reload the page in the browser. The output should be updated.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and close the editor for the file helloWorldServlet.java.</p> </li> </ol> <p>Final step as developer is to export the developed application as WAR file so that it can be used in the next part of the lab.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#636-export-the-developed-application-as-war-file","title":"6.3.6 Export the developed application as WAR file","text":"<p>Export the developed application so that it can be deployed to Liberty by the operations team.</p> <p>The generated maven pom by default does not generate a WAR file as it uses a \u201clooseApplication\u201d approach to optimize the inner-loop development experience. (For more details, see https://github.com/OpenLiberty/ci.maven). To change the default build behaviour, you need to adjust the pom.xml file and configure the Liberty maven plugin to generate a WAR by setting the property: false.</p> <ol> <li> <p>Switch back to Visual Studio Code.</p> </li> <li> <p>In the Liberty dashboard, right-click on the simpleweb application and select Stop (or use CTRL+C on the terminal window instead).</p> <p></p> </li> <li> <p>Verify in the terminal that Liberty has been stopped.</p> <p></p> </li> <li> <p>In Visual Studio Code, open the file pom.xml and add to the Liberty plugin configuration the lines:</p> <p> false </p> <p></p> </li> <li> <p>If you would start Liberty now again in Dev Mode, the property looseApplication would be ignored and you would see a warning like this:   </p> <p></p> <p>Therefore, you must start Liberty in run mode to generate the WAR file. This can be done by entering in the terminal window the command:</p> <pre><code>mvn liberty:run\n</code></pre> <p></p> <p>As you can see in the screenshot above, maven has built the file simpleweb.war and stored it at ~/Student/dev/simpleweb/target/simpleweb.war.</p> </li> <li> <p>Scroll down and you can see that it has been installed into the directory ~/Student/simpleweb/target/liberty/wlp/usr/servers/defaultServer/apps.</p> <p></p> </li> <li> <p>Feel free to test the application in the browser, then stop the Liberty instance by using CTRL+C.</p> </li> <li> <p>Close Visual Studio Code.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#637-create-a-server-package","title":"6.3.7 Create a server package","text":"<p>For the next lab, you will need the WAR file as well as the server.xml which can be found in the created Liberty instance at:  ~/Student/simpleweb/target/liberty/wlp/usr/servers/defaultServer. More complex applications also depend on other files like utility jars, additional Liberty configuration files and JDBC drivers for example.  So instead of copying the files one by one, you could create a server package that contains all files.</p> <p>What is a server package? A server package can contain only the user directory or the full application server. The syntax of the server package command is: </p> <pre><code>server package server_name --archive=package_file_name.jar --include=all\n</code></pre> <p>With the option --include=all, the Liberty binaries as well as the usr directory get packaged. For more details and options, see https://www.ibm.com/docs/en/was-liberty/base?topic=line-packaging-liberty-server-from-command.</p> <ol> <li> <p>To create the server package, execute the following command:</p> <pre><code>~/Student/dev/simpleweb/target/liberty/wlp/bin/server package defaultServer --archive=simpleweb-serverpackage.jar --include=all\n</code></pre> <p></p> </li> <li> <p>To hand over the server package to the ops team, use the following commands: </p> <pre><code>cp ~/Student/dev/simpleweb/target/liberty/wlp/usr/servers/defaultServer/simpleweb-serverpackage.jar ~/Student/assets\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#638-recap","title":"6.3.8 Recap","text":"<p>Congratulations, you have finished the application development part.</p> <p>Let\u2019s recap what you did so far. </p> <p>You acted as developer and used Visual Studio Code and the Liberty Tools for these tasks: -   You generated a Liberty starter project including the required maven and Liberty configuration.  -   You used the Liberty Tools configuration assistant to adjust the Liberty configuration. -   You used Liberty Dev Mode for inner-loop development. -   You create a simple web application using the Jakarta EE code assistant.  -   You exported the web application as WAR file. -   You created a server package including application and Liberty binaries.</p> <p>Useful links: https://github.com/OpenLiberty/liberty-tools-vscode/blob/HEAD/docs/user-guide.md </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#64-liberty-operations","title":"6.4 Liberty operations","text":"<p>Now you will work with Liberty from an operational point of view. Development has handed over a server package to you. The server package contains all necessary configuration to run the application called simpleweb. The provided server package is typically not production-ready, as it is likely not portable between stages and does not fulfill the requirements regarding security and so on. </p> <p>In this part of the lab, you will explore how to create configuration snippets and how to administer Liberty from the command line. But first you will explore the server package and get an understanding about dynamic updates.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#641-explore-the-server-package","title":"6.4.1 Explore the server package","text":"<p>You will now explore the Liberty server package to get a better understanding how to use it, in addition you will use it to learn more about Liberty administration from the command line and Liberty dynamic updates.</p> <p>In this section, you will use the server run command instead of the server start command.     This will allow you to see the logs immediately instead of having to use a tail command.      It will also allow you to stop the Liberty server via CTRL+C</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6411-liberty-administration-from-the-command-line","title":"6.4.1.1 Liberty administration from the command line","text":"<ol> <li> <p>Extract the Liberty server package and try to run it. When asked, enter test as target directory.</p> <pre><code>cd ~/Student/ops/\njava -jar ~/Student/assets/simpleweb-serverpackage.jar\n</code></pre> <p></p> <p>The directory test/wlp got created and contains the configured Liberty instance including application. </p> </li> <li> <p>Run the following command to get the Liberty version:</p> <pre><code>test/wlp/bin/productInfo version\n</code></pre> <p></p> </li> <li> <p>Run the following command to list the Liberty features that have been installed:</p> <pre><code>test/wlp/bin/productInfo featureInfo\n</code></pre> <p></p> <p>As you can see, the server package provided by the developer only contains the servlet-6.0 features which is the only feature required by the application. </p> </li> <li> <p>Run the following command to get the list of defined Liberty application servers:</p> <pre><code>test/wlp/bin/server list\n</code></pre> <p></p> </li> <li> <p>Start the Liberty server instance by running the command:</p> <pre><code>test/wlp/bin/server start defaultServer\n</code></pre> <p></p> <p>This runs the server in the background and the output is written to files in the test/wlp/bin/servers/defaultServer/logs directory.</p> <p>To start the server in the foreground (so the console messages are displayed in the command window) you would use the command </p> <pre><code>test/wlp/bin/server run defaultServer.\n</code></pre> <p>You will use it later in the lab.</p> </li> <li> <p>View the Liberty server\u2019s messages.log file to see the server startup messages via the command:</p> <pre><code>cat test/wlp/usr/servers/defaultServer/logs/messages.log\n</code></pre> <p></p> <p>At the beginning of the log, you can see that Open Liberty 24.0.0.2 is used. The server is started when the message \u201cThe defaultServer server is ready to run a smarter planet\u201d is displayed in the messages.log file.</p> </li> <li> <p>Test that the application is accessible via URL http://localhost:9080/simpleweb/helloWorld</p> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6412-liberty-dynamic-updates","title":"6.4.1.2 Liberty dynamic updates","text":"<p>Let\u2019s do a short excurse about Liberty dynamic updates. You will use Visual Studio Code to perform some minor configuration changes. For this part of the lab, you could instead also use a simple text editor like vi or gedit instead. </p> <ol> <li> <p>Open Visual Studio Code.</p> <pre><code>cd ~/Student/ops/test\ncode .\n</code></pre> <p></p> </li> <li> <p>Visual Studio Code opens. Click on Yes, if you are asked to trust the author.</p> <p></p> </li> <li> <p>In Visual Studio Code, open a terminal window</p> <p></p> </li> <li> <p>In the terminal, use the tail command to display the Liberty message log.</p> <pre><code>tail -f wlp/usr/servers/defaultServer/logs/messages.log\n</code></pre> <p></p> </li> <li> <p>Wait until the web application has been initialized</p> <p></p> </li> <li> <p>In Visual Studio Code, navigate to wlp &gt; usr &gt; servers &gt; defaultServer and open the file server.xml.</p> <p></p> </li> <li> <p>In the file server.xml, change the httpPort setting from port 9080 to port 9081</p> <p></p> <p>You can see in the terminal that the change is picked up and Liberty listens now on port 9081.</p> <p></p> </li> <li> <p>Change the webApplication contextRoot setting from \u201c/simpleweb\u201d to \u201c/mysimpleweb\u201d.</p> <p></p> <p>You can see in the log that the change is picked up.</p> <p></p> </li> <li> <p>Switch to the browser and access the application via URL localhost:9081/mysimpleweb/helloWorld.</p> <p></p> <p>As you have seen, you can change the Liberty configuration without having to restart the server.  You will explore this further later in the lab when you dynamically update the logging for example. Now let's stop the server.</p> </li> <li> <p>In the terminal, press CTRL+C to stop the tail command. </p> </li> <li> <p>Stop the Liberty instance by executing in the terminal the command:</p> <pre><code>wlp/bin/server stop defaultServer\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#642-create-liberty-configuration-snippets","title":"6.4.2 Create Liberty configuration snippets","text":"<p>There are different ways to create a Liberty server configuration. And there are often different roles involved to get the final configuration for production. The application specific configuration for example is typically created by the application developer while security related configuration is typically done by operations. Operations is typically also responsible to make the configuration portable across stages, configure logging and so on. </p> <p>You could create Liberty configuration snippets by copying over the related snippets from the product documentation and adjust them in a normal text editor. In this part of the lab, you will see that the Liberty tools plugin in Visual Studio Code can help you to speed up the create of configuration snippets as it provides configuration assistance including documentation. Let\u2019s get started.</p> <p>You will now modify the file server.xml which has been provided as part of the server package to make it more portable and re-usable.</p> <ol> <li> <p>In Visual Studio Code, open the file server.xml if you closed it previously.</p> <p></p> </li> <li> <p>Take a look at the httpEndpoint element.</p> <p></p> <p>As mentioned in the comment, the httpEndpoint is by default not accessible from a remote client.  This is good from security point of view and works fine if the client is local to the server. But if you for example use a remote load balancer or a remote HTTP server, that does not work. So there will be likely situations where you want to allow access from a remote client. To allow remote access, you must add a host attribute. You will use the Liberty Tools configuration assistant to do this.</p> </li> <li> <p>Place the cursor at the end of the line &lt;httpEndpoint id=\"defaultHttpEndpoint\" and press ENTER to add another line. </p> <p>In the new line, press CTRL+SPACE to see the available attributes. </p> <p>Use the arrow-down key and navigate to the host attribute to see the description of the attribute.</p> <p></p> </li> <li> <p>Select host and your configuration should look like this:</p> <p></p> <p>As you can see, the attribute host defaults to localhost.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6421-use-variables-for-portability","title":"6.4.2.1 Use variables for portability","text":"<p>To make the configuration portable, you will replace the fixed values for ports and host with Liberty variables. Liberty variables can be defined with a default value and overridden from inside or outside Liberty. To show the concept, you will adjust the httpEndpoint settings.</p> <p>You could use the configuration snippet below to replace the existing httpEndpoint configuration with a portable configuration. </p> <pre><code>&lt;httpEndpoint id=\"defaultHttpEndpoint\"\n              host=\"${httpEndpoint_host}\"\n              httpPort=\"${httpEndpoint_port}\"\n              httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n&lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n&lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n&lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n</code></pre> <p>Instead you will use the Liberty configuration assistant to get an understanding how you could create such a configuration snippet.</p> <ol> <li> <p>Place the cursor in an empty line under the httpEndpoint section, then enter var and press CTRL+SPACE.</p> <p></p> </li> <li> <p>Select variable, then enter as name \"httpEndpoint_port\".</p> <p></p> </li> <li> <p>Place the cursor after name=\"httpEndpoint_port\", enter a SPACE and press CTRL+SPACE.</p> <p></p> </li> <li> <p>Select defaultValue and enter as value 9080.</p> <p> </p> </li> <li> <p>Use copy and paste to create two additional variables: </p> <ul> <li>one with the name \"httpEndpoint_secure_port\" and the default value \"9443\"</li> <li>the other one with the name \"httpEndpoint_host\" and the value \"*\".</li> </ul> <p>Your configuration should now look like this:</p> <p></p> </li> <li> <p>Switch to the httpEndpoint section, remove for the attribute host the value \"localhost\", enter ${ht and press CTRL+SPACE.</p> <p></p> <p>As you can see, the variable names are offered. </p> </li> <li> <p>Select \"httpEndpoint_host\", then enter \"}\". Your configuration should look like this:</p> <p></p> </li> <li> <p>Do the same kind of change for the attributes httpPort and httpsPort. </p> <p>Your final httpEndpoint configuration should now look like this:</p> <p></p> </li> <li> <p>Save your changes.</p> </li> </ol> <p>Your server.xml file should now look like this:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;server description=\"new server\"&gt;\n\n    &lt;!-- Enable features --&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;servlet-6.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n\n\n    &lt;!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" --&gt;\n    &lt;httpEndpoint id=\"defaultHttpEndpoint\"\n                  host=\"${httpEndpoint_host}\"\n                  httpPort=\"${httpEndpoint_port}\"\n                  httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n    &lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n    &lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n    &lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n\n    &lt;!-- Automatically expand WAR files and EAR files --&gt;\n    &lt;applicationManager autoExpand=\"true\"/&gt;\n\n    &lt;!-- Configures the application on a specified context root --&gt;\n    &lt;webApplication contextRoot=\"/mysimpleweb\" location=\"simpleweb.war\" /&gt;\n\n    &lt;!-- Default SSL configuration enables trust for default certificates from the Java runtime --&gt;\n    &lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n&lt;/server&gt;\n</code></pre> <p>Now let's test if the Liberty configuration is really portable.</p> <ol> <li> <p>From the Visual Studio Code terminal, start the Liberty server instance via the following command:</p> <p>wlp/bin/server run defaultServer</p> <p></p> <p>As you can see, the Liberty server gets started and listens on port 9080.</p> </li> <li> <p>Press CTRL+C to stop the server. </p> </li> <li> <p>Set the httpEnpoint_port value in the Operating System environment variable and start the Liberty server again.</p> <pre><code>export httpEndpoint_port=9081\nwlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, the Liberty server now listens on port 9081, which shows that you can now override from outside Liberty the default settings defined in the Liberty server.xml file. In a Kubernetes environment, you could for example use a config map to change configuration settings.</p> </li> <li> <p>Press CTRL+C to stop the server. Then unset the operating system variable by the following command:</p> <pre><code>unset httpEndpoint_port\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6422-use-includes-for-better-re-use-and-visibility","title":"6.4.2.2 Use includes for better re-use and visibility","text":"<p>If you configure a Liberty server with resources like datasources or JMS queues, user registry and more, your configureation file can get quite long and not easy to be read and maintained. Liberty allows to specify configuration resources to get included into the server configuration. This helps to keep control over the configuration, provides better reuse of the different configuration and allows to split the responsibility for the configuration between different teams. The developer for example could create the application specific configuration and operations the security configuration.</p> <p>You will now use includes to structure the server configuration.</p> <ol> <li> <p>In the terminal in Visual Studio Code, copy the existing server.xml file into a new file called application-config.xml.</p> <pre><code>cp wlp/usr/servers/defaultServer/server.xml wlp/usr/servers/defaultServer/application-config.xml\n</code></pre> <p></p> </li> <li> <p>Open the newly created file application-config.xml in Visual Studio Code.</p> <p></p> </li> <li> <p>Remove all configuration inside the server section other than the definition of the webApplication element.     Your application-config.xml should look like this:</p> <p></p> </li> <li> <p>Save the changes, then close the file application-config.xml.</p> </li> <li> <p>Switch to the server.xml file. Remove the webApplication definition, then enter include and press CTRL+SPACE.</p> <p>The Liberty configuration assistant shows you the available elements.</p> <p></p> </li> <li> <p>Select include and the element gets generated. As value for location, enter \"application-config.xml\".</p> <p></p> </li> <li> <p>As the owner of the server.xml file, you might want to decide what happens if the file to be included does not exist or contains conflicting configuration settings. </p> <p>Go to the end of the include statement and press CTRL+SPACE. The available attributes for the include element are displayed.</p> <p></p> <p>As you can see, you could define the include file as optional, so Liberty would not throw an error if the include file is missing. </p> </li> <li> <p>Click on onConflict to see the available attributes for that options. </p> <p></p> <p>If you want to make sure, that settings in the server.xml cannot be overridden by included files, select IGNORE, otherwise use MERGE or REPLACE. </p> </li> <li> <p>Click on MERGE and your include statement should look like this:</p> <pre><code>&lt;include location=\"application-config.xml\" onConflict=\"MERGE\"/&gt;\n</code></pre> <p></p> </li> </ol> <p>You can configure multiple include files, for example one file for security-config.xml and another one for resource specific configuration settings like for databases or JMS. Now let's test if the include works.</p> <ol> <li> <p>From the Visual Studio Code terminal, start the Liberty server instance via the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p>As you can see, the include has been found and processed, so that the application is started.</p> <p></p> </li> </ol> <p>Keep the server running as we need it in the next section.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6423-enable-transport-security","title":"6.4.2.3 Enable transport security","text":"<p>Right now, you are not able to access Liberty via HTTPS. While the HTTPS port 9443 has been defined, SSL has not been enabled in Liberty. SSL can be enabled using the transport security feature. So the next step is to enable transport security and take a look at other related topics like keystores.</p> <ol> <li> <p>In the file server.xml, navigate the to featureManager section.</p> </li> <li> <p>Add the feature transportSecurity-1.0 to the featureManager section by add the line:</p> <pre><code>&lt;feature&gt; transportSecurity-1.0 &lt;/feature&gt;\n</code></pre> <p>Alternatively, you can use the configuration assistant to enable it.</p> <p></p> </li> <li> <p>Take a look at the logs and you can see that the feature is not available yet.</p> <p></p> <p>This is due to the fact that the Liberty server package generated by the developer only includes the required features (features that have been defined in the server configuration file). You will use the Liberty featureUtility tool to install the missing feature. The feature could be downloaded from a local repository if configured, in this case you will download it from a central maven repository.</p> </li> <li> <p>In the terminal window, stop the Liberty instance by pressing CTRL+C.</p> <p>Then execute the following command to install the missing feature from the maven repository:</p> <pre><code>wlp/bin/featureUtility installFeature transportSecurity-1.0\n</code></pre> <p></p> </li> <li> <p>Then start the Liberty instance again by running the following command:</p> <pre><code>wlp/bin/server run defaultServer\n</code></pre> <p></p> <p>As you can see, Liberty created a certificate and placed it into the SSL key file \"wlp/usr/servers/defaultServer/resources/security/key.p12\". </p> </li> <li> <p>Liberty used the variable keystore_password to secure the keystore. As you did not define a value for the variable keystore_password, Liberty generated a password and stored it in the file server.env. In Visual Studio, open the file server.env to see the keystore password. Your password will likely look different as it has been generated randomly.</p> <p></p> <p>Close the file server.env.</p> </li> <li> <p>To make it more visible where the keystore password comes from, add the following definition to the server.xml file:</p> <pre><code>&lt;keyStore id=\"defaultKeyStore\" password=\"${keystore_password}\" /&gt;\n</code></pre> <p>The keyStore element also allows you to specify a different keystore location and much more.</p> <p></p> </li> <li> <p>Review your configuration in server.xml. It should look like this:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;server description=\"new server\"&gt;\n\n    &lt;!-- Enable features --&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;servlet-6.0&lt;/feature&gt;\n        &lt;feature&gt;transportSecurity-1.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n\n    &lt;!-- To access this server from a remote client add a host attribute to the following element, e.g. host=\"*\" --&gt;\n    &lt;httpEndpoint id=\"defaultHttpEndpoint\"\n                host=\"${httpEndpoint_host}\"\n                httpPort=\"${httpEndpoint_port}\"\n                httpsPort=\"${httpEndpoint_secure_port}\" /&gt;\n    &lt;variable name=\"httpEndpoint_host\" defaultValue=\"*\"/&gt;\n    &lt;variable name=\"httpEndpoint_port\" defaultValue=\"9080\"/&gt;\n    &lt;variable name=\"httpEndpoint_secure_port\" defaultValue=\"9443\"/&gt;\n\n    &lt;!-- Automatically expand WAR files and EAR files --&gt;\n    &lt;applicationManager autoExpand=\"true\"/&gt;\n\n    &lt;!-- Configures the application on a specified context root --&gt;\n    &lt;include location=\"application-config.xml\" onConflict=\"MERGE\"/&gt;\n\n    &lt;!-- Default SSL configuration enables trust for default certificates from the Java runtime --&gt;\n    &lt;ssl id=\"defaultSSLConfig\" trustDefaultCerts=\"true\" /&gt;\n    &lt;keyStore id=\"defaultKeyStore\" password=\"${keystore_password}\" /&gt;\n&lt;/server&gt;\n</code></pre> </li> <li> <p>Now let's see if the application is accessible via HTTPS. </p> <p>Switch to the browser and access Liberty via https://localhost:9443/mysimpleweb/helloWorld.</p> <p>You should get a security warning like this:</p> <p></p> </li> <li> <p>Click on Advanced, then scroll down and click on \"Accept the Risk and Continue\".</p> <p></p> </li> <li> <p>You should see the output of the web application.</p> <p></p> </li> <li> <p>Switch back to Visual Studio Code and stop the running Liberty instance by entering CTRL+C in the terminal window. </p> </li> <li> <p>Close Visual Studio Code.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6424-backup-the-generated-files","title":"6.4.2.4 Backup the generated files","text":"<p>You will re-use the generated configuration snippets and other assets in the next section of the lab. Therefore it is a good approach to create a snippet repository. Configuration snippets are typically hosted in a git repository or so, here you will use the folder ~/Student/assets. You will also use the asset directory to store the application WAR file.</p> <ol> <li> <p>Copy the generated configuration files as well as the application war file into the assets directory.</p> <pre><code>cp ~/Student/ops/test/wlp/usr/servers/defaultServer/server.* ~/Student/assets\n\ncp ~/Student/ops/test/wlp/usr/servers/defaultServer/application-config.xml ~/Student/assets\n\ncp ~/Student/ops/test/wlp/usr/servers/defaultServer/apps/simpleweb.war ~/Student/assets\n</code></pre> <p></p> </li> <li> <p>Verify that the assets directory contains the application WAR as well as the configuration files. It also contains the server package but this is no longer required.</p> <pre><code>ls ~/Student/assets\n</code></pre> <p></p> </li> <li> <p>If not already done, exit Visual Studio Code and stop any running Liberty instance.</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6425-recap","title":"6.4.2.5 Recap","text":"<p>In this section of the lab, you got an impression how to create and use configuration snippets:</p> <ul> <li>You used the Liberty Tools configuration assistant to create configuration snippets and to configure Liberty. </li> <li>You used the Liberty featureUtility tool to install missing features.</li> <li>You learned how to use variables to make the configuration more portable.</li> <li>You learned how to use includes to split the configuration into multiple re-usable files.</li> <li>You created a security configuration. </li> </ul> <p>Comments: - Instead of using the Liberty Tools configuration assistant in Visual Studio Code, you could also use the product documentation and copy &amp; paste to create Liberty configuration snippets.  - You could also use the IBM migration tools to transform an existing configuration for WebSphere Traditional and other runtimes into a Liberty configuration.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#643-install-and-configure-liberty-from-the-command-line","title":"6.4.3 Install and configure Liberty from the command line.","text":"<p>Now let\u2019s install and configure Liberty from an administrator point of view. </p> <p>A traditional administrator typically downloads the application server binaries from the IBM pages and uses a regular editor instead of an IDE like Visual Studio to configure Liberty. To download the latest version of WebSphere Liberty, the administrator can use the IBM support page https://www.ibm.com/support/pages/recommended-updates-websphere-application-server</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6431-install-liberty-from-scratch","title":"6.4.3.1 Install Liberty from scratch","text":"<p>Best practice is to create a minimal installation by using the Liberty kernel image and install only the required features on top of it. The latest WebSphere Liberty kernel image could be downloaded from the IBM support page. For simplicity, we will use the ILAN package which is available as zip file at: https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/24.0.0.1/wlp-kernel-24.0.0.1.zip</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Create a directory to store the Liberty package. </p> <pre><code>mkdir ~/Student/ops/software\n</code></pre> <p></p> </li> <li> <p>Download and store the Liberty kernel image. </p> <pre><code>wget https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/wasdev/downloads/wlp/24.0.0.1/wlp-kernel-24.0.0.1.zip -P ~/Student/ops/software\n</code></pre> <p></p> </li> <li> <p>Use ls to see that the kernel image is less than 17 MB in size. The overall disk footprint will be larger depending on the required Liberty features.</p> <p></p> </li> <li> <p>Create a directory for the integration environment. This will be used for the Liberty installation.</p> <pre><code>mkdir ~/Student/ops/int\ncd ~/Student/ops/int\n</code></pre> <p></p> </li> <li> <p>Use the unzip command to extract the image.</p> <pre><code>unzip ../software/wlp-kernel-24.0.0.1.zip\n</code></pre> <p></p> </li> </ol> <p>On the IBM support page, you can find next to the convenience packages like the Liberty kernel package also Liberty archives for Liberty Core, Liberty Base or Liberty ND. To install such an archive, you would use a command like:  \"java -jar ../wlp-base-all-24.0.0.1.jar --acceptLicense .\"</p> <ol> <li> <p>Get the Liberty version by running the following command:</p> <pre><code>wlp/bin/productInfo version\n</code></pre> <p></p> <p>As you can see, this is an ILAN package which can be used for evaluation as well as for production. </p> </li> <li> <p>Get the list of Liberty features that are part of the installation:</p> <pre><code>wlp/bin/productInfo featureInfo\n</code></pre> <p></p> <p>As you can see, no feature is included in the kernel image.</p> </li> </ol> <p>Now that Liberty has been installed, the next step is to create a Liberty server instance.</p> <p>As you have seen, the installation of Liberty is basically an unzip.      If you want to update Liberty later on, you can either apply a jar file or simply replace the binaries.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6432-introducing-liberty-environment-variable-configuration","title":"6.4.3.2 Introducing Liberty Environment Variable Configuration","text":"<p>You can customize the Liberty environment using certain specific variables to support the placement of product binaries and shared resources. The Liberty environment variables are specified using server.env file. You can use server.env file at the installation and server levels to specify environment variables such as JAVA_HOME, WLP_USER_DIR and WLP_OUTPUT_DIR. Here some of the Liberty specific variables can be used to customize the Liberty environment: (see also https://www.ibm.com/docs/en/was-liberty/nd?topic=liberty-customizing-environment) </p> <ul> <li>${wlp.install.dir}      This configuration variable has an inferred location. The installation directory is always set to the parent of the directory containing the launch script or the parent of the /lib directory containing the target jar files.</li> <li>JVM_ARGS      This environment variable can be used to specify a list of command-line options, such as system properties or -X parameters, that are passed to the JVM when the server starts. Any values that contain spaces must be enclosed in quotes.</li> <li>WLP_USER_DIR      This environment variable can be used to specify an alternative location for wlp.user.dir. This variable must be an absolute path. If this variable is specified, the runtime environment looks for shared resources and server definitions in the specified directory.   WLP_USER_DIR can be specified only in the ${wlp.install.dir}/etc/server.env file because the purpose of this variable is to specify where the remaining configuration is located. After the remaining configuration is found and merged, no further configuration in a different location is expected, or supported</li> <li>WLP_OUTPUT_DIR      This environment variable can be used to specify an alternative location for server generated output such as logs, the workarea directory, and generated files. Files in the logs directory can include console.log, messages.log, and any generated FFDC files. Generated files can include server dumps that are created with the server dump or server javadump command. This variable must be an absolute path.</li> </ul>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6433-create-a-liberty-server-instance","title":"6.4.3.3 Create a Liberty server instance","text":"<p>The Liberty server command supports actions for starting, stopping, creating, packaging, and dumping a Liberty server. The server create command creates a new Liberty server with the name specified. Additional detail on the server command can be found here: https://www.ibm.com/docs/en/was-liberty/base?topic=line-server-command-options </p> <p>The server create command creates by default the user directory in a sub-directory of the ${wlp.install.dir} directory. In production, it is recommended to store the Liberty configuration in a separate directory. This can be done by setting the WLP_USER_DIR environment variable.</p> <ol> <li> <p>The etc directory as well as the server.env file are not created as part of the installation.      Use the following commands to set the variable WLP_USER_DIR to \"/home/techzone/Student/ops/int/wlp_usr\" in the server.env on runtime level.      (Keep in mind that the path in server.env must be absolute, ~/Student for example is not supported):</p> <pre><code>mkdir ~/Student/ops/int/wlp/etc\necho \"WLP_USER_DIR=/home/techzone/Student/ops/int/wlp_usr\" &gt; ~/Student/ops/int/wlp/etc/server.env\ncat ~/Student/ops/int/wlp/etc/server.env\n</code></pre> <p></p> </li> <li> <p>Run the following commands to create a new server named \"myServer\":</p> <pre><code>wlp/bin/server create myServer\n</code></pre> <p></p> </li> <li> <p>The new server is created in the following directory: wlp_usr/servers/myServer     Run the following command to verify the name and the path of the server instance:</p> <pre><code>wlp/bin/server list\n</code></pre> <p></p> </li> <li> <p>Run the following command to list the files and directories that have been created for myServer:</p> <pre><code>ls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> <li> <p>Replace the generated Liberty configuration with the configuration that you stored in the assets directory.</p> <pre><code>cp ~/Student/assets/server.* wlp_usr/servers/myServer\nls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> </ol> <p>In the Liberty setup, you now have a server.env file on two levels:          - on runtime level at ${wlp.install.dir}/etc/server.env and          - on server level at ${server.config.dir}/server.env.          If both files are present, the contents of the two files are merged; values in the server-level file take precedence over values in the runtime-level file.     </p> <ol> <li> <p>Verify that the pre-defined HTTP settings fit to your environment:</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep http\n</code></pre> <p></p> </li> </ol> <p>If you want to change those port values, you could define them in the server.env file or bootstrap.properties file for example.  Alternatively you could define the related variable on the operating system level.      </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6434-install-required-features","title":"6.4.3.4 Install required features","text":"<p>You installed the Liberty kernel package which does not contain any features. The next step is to install the required features. Instead of looking into the Liberty configuration to determine which features are required, you can let Liberty inspect which features are missing. This can be done using the featureUtility and specifying the server you are looking for. The command by default will download the required features from the online repository. In an air-gapped environment, you could download the feature repository from the IBM support page and then specify in the featureUtility command to use a local repository. </p> <ol> <li> <p>To download and install the required features, use the following command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> <p>As you can see, the command detected that the features for servlet-6.0 and transportSecurity-1.0 were missing. It also downloads the feature ssl-1.0 as transportSecurity-1.0 depends on it.</p> </li> <li> <p>Verify that the Liberty features have been installed by using the following command:</p> <pre><code>wlp/bin/productInfo featureInfo\n</code></pre> <p></p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6435-use-your-own-keystore","title":"6.4.3.5 Use your own keystore","text":"<p>If you do not create a keystore but enable SSL, Liberty will create a keystore with a random password. Now, you will create your own keystore with a password of choice. </p> <ol> <li> <p>Run the following command to create a keystore</p> <pre><code>wlp/bin/securityUtility createSSLCertificate --server=myServer --password=mySecret\n</code></pre> <p></p> <p>As you can see, the command uses the hostname and server name as subjectDN and encodes the password using xor. The command also allows to use aes encoding or encryption, see https://www.ibm.com/docs/en/was-liberty/base?topic=applications-securityutility-command.</p> </li> <li> <p>Our server template has already configured SSL and uses a variable to specify the keystore password. Use the following commands to review what has been configured in the server.xml file:</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep trans\ncat wlp_usr/servers/myServer/server.xml | grep keystore\n</code></pre> <p></p> </li> <li> <p>The keystore password has been configured in the server.env file. Use the following command for review the settings:</p> <pre><code>cat wlp_usr/servers/myServer/server.env;echo\n</code></pre> <p></p> <p>As expected, the password used for the keystore does not match to the one in server.env and must be updated. </p> </li> <li> <p>Best practice is to store the password encoded or encrypted. In this case, you will use encoding via aes and store the password in the server.env file. To generate the encoded password, you can use the securityUtility encode command. Use the following command to update the server.env file with the encoded keystore password of \u201cmySecret\u201d, then review the result:</p> <pre><code>echo \"keystore_password=$(wlp/bin/securityUtility encode --encoding=aes mySecret)\" &gt; wlp_usr/servers/myServer/server.env\ncat wlp_usr/servers/myServer/server.env\n</code></pre> <p></p> </li> </ol> <p>The encoded keystore password is not unique, so you might have a different password as in the screenshot above.           But as long as you use the same password to be encoded, all of the different resulting strings are valid.      </p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6436-verify-that-the-server-configuration-works","title":"6.4.3.6 Verify that the server configuration works:","text":"<ol> <li> <p>Start the server via the following command:</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> <p></p> <p>As you can see, the Liberty server is running and listens on port 9080 and 9443. You can also see that it complains about the missing include file application-config.xml. You will fix this later.</p> </li> <li> <p>Verify that the server is accessible via HTTPs. Switch to the browser and access the web application via the URL https://localhost:9443.      As before, you will get a warning that your connection is not secure. Click on Advanced, scroll down and click on \"Accept the Risk and Continue\". Then you should be able to access the application.</p> <p></p> </li> <li> <p>Switch back to the terminal window and press CTRL+C in the terminal window to stop the tail command.</p> </li> <li> <p>Stop the server via the following command:</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6437-deploying-a-sample-application-to-liberty","title":"6.4.3.7 Deploying a sample application to Liberty","text":"<p>In the first part of this lab, you used the Liberty Tools to develop an application and configure Liberty. The application got deployed via maven under the cover. Then you used the Liberty server package which already included the deployed application. In this section of the lab, you will deploy an application to Liberty using two different techniques.</p> <p>First, you will simply copy the application WAR module into the Liberty \"dropins\" directory. The dropins directory is monitored by Liberty. As deployable units (WAR, EAR, JAR) are added to the directory, Liberty automatically deploys and starts the application on the Liberty server.  The dropins directory can be used for applications that do not require extra configuration like security role mapping. As the deployable units are removed from the dropins folder, the applications are stopped and removed from the running Liberty server. Now, give it a try.</p> <ol> <li> <p>In the terminal window start the server and use the tail -f command to view the messages.log file.</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> </li> <li> <p>Right-click on Terminal and select New Window to open a second terminal window.</p> <p></p> </li> <li> <p>In the new Terminal window, navigate to the int directory:</p> <pre><code>cd ~/Student/ops/int/\n</code></pre> </li> <li> <p>Copy the web application into the dropins directory.</p> <pre><code>cp ~/Student/assets/simpleweb.war wlp_usr/servers/myServer/dropins\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window where tail command is running. You can see messages that the application deployment has taken place, the application simpleweb application has been started and is available at http://rhel9-base.gym..lan:9080/simpleweb/.       Be aware that Liberty defined the context root based on the name of the WAR file as \"/simpleweb\".</p> <p></p> </li> <li> <p>Verify that the application is accessible by opening a browser at: http://localhost:9080/simpleweb/helloWorld</p> <p></p> </li> <li> <p>In the terminal window where tail is running, you can see that the application has been accessed.</p> <p></p> </li> <li> <p>Switch back to the terminal where you entered the copy command and remove the deployed application from the dropins directory using the following command:</p> <pre><code>rm wlp_usr/servers/myServer/dropins/simpleweb.war\n</code></pre> </li> <li> <p>Switch back to the terminal window where tail is running. You can see that the application has been removed.</p> <p></p> </li> </ol> <p>While the dropins directory can be used for applications that do not require extra configuration, deploying the application by adding it to the Liberty server configuration provides the freedom to configure the Liberty server based on the application configuration requirements.  Now you will deploy the simpleweb application by adding it to the Liberty server configuration.  The default place for applications is: ${server.config.dir}/apps.</p> <ol> <li> <p>Switch back to the terminal window not running tail. Copy the application WAR file into the apps directory by using the following command:</p> <pre><code>cp ~/Student/assets/simpleweb.war wlp_usr/servers/myServer/apps\nls -lrt wlp_usr/servers/myServer/apps/*.war\n</code></pre> <p></p> </li> <li> <p>To define the application in the Liberty configuration file, take a look at the application configuration that has been provided as snippet.</p> <pre><code>cat ~/Student/assets/application-config.xml\n</code></pre> <p></p> <p>As you can see, a different context root has been defined.</p> </li> <li> <p>You will add the webApplication element to the Liberty configuration by using the include concept. Review that the include element and the properties that have already been defined in the server.xml file.</p> <pre><code>cat wlp_usr/servers/myServer/server.xml | grep include\n</code></pre> <p></p> </li> <li> <p>Copy the application-config.xml into the server directory.</p> <pre><code>cp ~/Student/assets/application-config.xml wlp_usr/servers/myServer\nls -lrt wlp_usr/servers/myServer\n</code></pre> <p></p> </li> <li> <p>Switch back to the terminal window running tail. You can see that the application simpleweb gets deployed, this time with the context root mysimpleweb. </p> <p></p> </li> <li> <p>Finally test the application in the browser via URL http://localhost:9080/mysimpleweb/helloWorld. </p> <p></p> </li> </ol> <p>You have successfully deployed the web application into Liberty, first via dropins directory, then by adding it to the server.xml file via include.</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6438-change-logging-and-tracing-by-using-configdropins","title":"6.4.3.8 Change logging and tracing by using ConfigDropins","text":"<p>Right now, you used the include concept to enhance the server.xml file with additional configuration files. Alternatively, you can specify additional configuration files in the configDropins directory without specifying include elements in the server.xml file. If you want to add configuration files to override anything in the server.xml file of the server, create a configDropins/overrides directory.  In this case, you want to add/change the log level of the application server.</p> <ol> <li> <p>Create a configDropins directory in the server directory.</p> <pre><code>mkdir -p wlp_usr/servers/myServer/configDropins/overrides\n</code></pre> <p></p> </li> </ol> <p>Add INFO logging output to console</p> <p>Liberty provides the ability to set the logging level to any of the supported log levels defined in the documentation: https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace  - AUDIT logging enables logging of \u201cSignificant event affecting server state or resources\u201d - INFO logging enables of \u201cGeneral information outlining overall task progress\u201d By default, the Liberty Server has the console log level set to AUDIT. In this section, you will change the level of log messages written to the console from AUDIT to INFO, which will result in additional logging messages. You will perform this activity not directly in the server.xml file but using the configDropins concept. Purpose is that you could change the log level easily on the fly and switch back to the previous level without having to manually edit a file. </p> <p>Note:          It is also possible to set default logging options in the bootstrap.properties file.          If the logging options are set in the bootstrap.properties file, the logging options will take effect very early in server startup,          so it may be useful for debugging server initialization problems.     </p> <ol> <li> <p>Switch to the terminal currently running the tail on the file messages.log and press CTRL+C to stop it.</p> </li> <li> <p>Review the current console logging and you can see that it only contains messages from type AUDIT.</p> <pre><code>tail -f wlp_usr/servers/myServer/logs/console.log\n</code></pre> <p></p> </li> <li> <p>Switch to the second terminal window. Create a server configuration file to change the console log level to INFO via the following command:</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;logging consoleLogLevel=\"INFO\"&gt; &lt;/logging&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>You will verify that messages of log level INFO will now be logged during the configuration of tracing.</p> </li> </ol> <p>Update trace specification</p> <p>By default, the Liberty Server trace specification is set to \"*=info=enabled\". </p> <p>To update the trace specification, you will again use the configDropings concept.</p> <ol> <li> <p>Switch to the second terminal window. Update the file configDropins/overrides/loglevel-config.xml to include a trace specification via the following command:</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;logging consoleLogLevel=\"INFO\" traceSpecification=\"webcontainer=all=enabled\"&gt;\n    &lt;/logging&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> <p></p> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>As you can see, messages of log level INFO are displayed now which means that the change of the consoleLogLevel has been picked up.  The message indicates as expected, that the trace level has been set to \u201cwebcontainer=all\u201d. </p> </li> <li> <p>Switch to the second terminal window to verify that the trace has been created.</p> <pre><code>ls -lrt wlp_usr/servers/myServer/logs\n</code></pre> <p></p> </li> <li> <p>Remove the file to set the trace level back to default. </p> <pre><code>rm wlp_usr/servers/myServer/configDropins/overrides/loglevel-config.xml\n</code></pre> </li> <li> <p>Switch to the terminal window running tail to verify, that the new file has been detected.</p> <p></p> <p>As you can see, the trace specification has been changed back to \"*=info\".</p> </li> <li> <p>Press CTRL+C in the terminal window to stop the tail command.</p> </li> <li> <p>Stop the Liberty instance using the following command: </p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> <li> <p>Delete the generated trace files by using  the following command:</p> <pre><code>rm wlp_usr/servers/myServer/logs/trace*.log\n</code></pre> </li> </ol> <p>As you have seen, the logging component can be controlled through the server configuration and it is quite convenient to enable and disable tracing using configDropins.</p> <p>Configure logging in the bootstrap.properties file</p> <p>Occasionally, you might need to configure trace to diagnose a problem that occurs before the server.xml file is processed. Or you want to change the log format to something other than basic. In this case, the equivalent configuration properties can be specified in the bootstrap.properties file. </p> <p>If a configuration property is specified in both the bootstrap.properties file and the server.xml file, the value in bootstrap.properties is used until the server.xml file is processed. Then, the value in the server.xml file is used. Avoid specifying different values for the same configuration property in both the bootstrap.properties and the server.xml file.</p> <p>You will now change the log format to json. As the bootstrap.properties file does not exist, you will simpoly create it.</p> <ol> <li> <p>Create a bootstrap,properties file that defines the property com.ibm.ws.logging.console.format by executing the following command: </p> <p>echo 'com.ibm.ws.logging.console.format=json' &gt; wlp_usr/servers/myServer/bootstrap.properties cat wlp_usr/servers/myServer/bootstrap.properties</p> <p></p> </li> <li> <p>Start the server via server run and you can see that the log format has been set to JSON.</p> <pre><code>wlp/bin/server run myServer\n</code></pre> <p></p> </li> <li> <p>In the terminal window, press CTRL+C to stop the server.</p> </li> <li> <p>Change the log format back to default by deleting bootstrap.properties, then run the server again.</p> <pre><code>rm wlp_usr/servers/myServer/bootstrap.properties\nwlp/bin/server run myServer\n</code></pre> <p></p> </li> <li> <p>In the terminal, press CTRL+C to stop the server.</p> </li> </ol> <p>If you are interested into additional logging attributes, please take a look at https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-logging-trace \u2003</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#6439-review-the-liberty-configuration-via-liberty-rest-apis","title":"6.4.3.9 Review the Liberty configuration via Liberty REST APIs","text":"<p>If you use several includes or config dropins, you might run into the situation where you want to review the final setup.  This can be done by using the restConnector APIs. </p> <p>Configure the admin access to the Liberty instance. </p> <ol> <li> <p>First of all, you need a strong password as the APIs provide access to sensitive data which could help a hacker to manipulate the system. Use the securityUtility to create a secure password.</p> <pre><code>wlp/bin/securityUtility encode --encoding=aes LibertyIsGreat\n</code></pre> <p></p> <p>As before, the encoded password is not unique, so your output will likely look different that the one above. But both are valid.</p> </li> <li> <p>Use the following command to configure the restConnector. (Update the user password in the following code snippet or keep the password as is).</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;restConnector-2.0&lt;/feature&gt;\n    &lt;/featureManager&gt;\n&lt;quickStartSecurity userName=\"admin\" userPassword=\"{aes}ALCpb79MrIuO8aVUdyXKVDWNssXfX3OmL+xD2J3jWcOgLwrIq1f7/qO8tCR7JwNmcQ==\" /&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/rest-config.xml\n</code></pre> <p></p> </li> <li> <p>As the restConnector feature is not installed so far, switch to a terminal window to install the missing features via command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> </li> <li> <p>Start the Liberty instance by using the command:</p> <pre><code>wlp/bin/server start myServer\n</code></pre> </li> <li> <p>From a browser window, access the Liberty REST APIs via the URL https://localhost:9443/ibm/api/config.      Enter as Username admin and as password LibertyIsGreat.</p> <p></p> </li> <li> <p>If asked, don\u2019t save the password in the browser. Your browser should display something like this:</p> <p></p> </li> <li> <p>In the browser window, press CTRL+F and enter webapp to search for webapp.          You should find the related settings.</p> <p></p> </li> <li> <p>Search for logging and you get all attributes currently used for logging.</p> <p></p> </li> <li> <p>Finally stop the server and remove the restConnector configuration.</p> <pre><code>wlp/bin/server stop myServer\nrm wlp_usr/servers/myServer/configDropins/overrides/rest-config.xml\n</code></pre> </li> </ol> <p>For more details about the restConnector for administration, please take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=features-admin-rest-connector-20</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#64310-using-the-liberty-admincenter","title":"6.4.3.10 Using the Liberty AdminCenter","text":"<p>The Liberty AdminCenter can be used to monitor the status of the Liberty server. You will define two users, an administrative user with the role admin and the second user with the role reader. Use again the securityUtility to create two secure passwords.</p> <ol> <li> <p>Create a password for the admin user.</p> <pre><code>    wlp/bin/securityUtility encode --encoding=xor Liberty4Admins\n</code></pre> <p></p> </li> <li> <p>Create a password for the second user.</p> <pre><code>    wlp/bin/securityUtility encode --encoding=xor Liberty4Readers\n</code></pre> <p></p> </li> <li> <p>Execute the following command to Configure the AdminCenter with the two users using the generated passwords generated before.</p> <pre><code>echo '\n&lt;server&gt;\n    &lt;featureManager&gt;\n        &lt;feature&gt;adminCenter-1.0&lt;/feature&gt;\n        &lt;feature&gt;websocket-2.1&lt;/feature&gt;\n    &lt;/featureManager&gt;\n    &lt;!-- Configure administrative roles. --&gt;\n    &lt;basicRegistry realm=\"basicRealm\"&gt;\n        &lt;user name=\"admin\" password=\"{xor}EzY9Oi0rJmseOzI2MSw=\" /&gt;\n        &lt;user name=\"reader\" password=\"{xor}EzY9Oi0rJmsNOj47Oi0s\" /&gt;\n    &lt;/basicRegistry&gt; \n    &lt;!-- Assign 'admin' to Administrator --&gt;\n    &lt;administrator-role&gt;\n        &lt;user&gt;admin&lt;/user&gt;\n    &lt;/administrator-role&gt;\n    &lt;reader-role&gt;\n        &lt;user&gt;reader&lt;/user&gt;\n    &lt;/reader-role&gt;\n&lt;/server&gt;\n' &gt; wlp_usr/servers/myServer/configDropins/overrides/adminCenter-config.xml\n</code></pre> <p></p> </li> <li> <p>As the AdminCenter feature is not installed so far, switch to a terminal window to install the feature via command:</p> <pre><code>wlp/bin/featureUtility installServerFeatures myServer\n</code></pre> <p></p> </li> <li> <p>Start the server and take a look at the log:</p> <pre><code>wlp/bin/server start myServer\ntail -f wlp_usr/servers/myServer/logs/messages.log\n</code></pre> <p></p> <p>As you can see, the admin-center feature has been enabled. </p> </li> <li> <p>Access the Liberty Admin Center via URL https://localhost:9443/adminCenter, then enter the credentials for the admin user (admin/Liberty4Admins) and press Submit.</p> <p></p> </li> <li> <p>The Admin Center Toolbox is displayed. Click on Explore to explore the Liberty status, the applications as well monitoring data and configuration.</p> <p></p> </li> <li> <p>On the tab Overview take a look at the running servers and applications. </p> <p></p> <p>You would see more than one server if a collection would have been defined.</p> </li> <li> <p>On the tab Applications you can see the running applications.      As user with admin rights, you can use the menu to start, stop or restart an application.</p> <p></p> </li> <li> <p>On the tab Montor, you can see basic performance data. </p> <p></p> <p>As you can see here, the Used Heap Memory max value above 1.9 MB which indicates that max heap has not been defined. You will change that in the next section of the lab.</p> </li> <li> <p>On the tab Configure, you can see current configuration. </p> <p></p> <p>You can see a warning that remote file access is not configured. You can ignore that as you will not configure Liberty via AdminCenter.  But you could click on the link to see the configuration in design and source view.</p> </li> <li> <p>Select to log out as admin.</p> <p></p> </li> <li> <p>Log in as user reader with password Liberty4Readers.</p> <p></p> </li> <li> <p>Click on Explore, then select the tab Applications.      Try to click on the twisty next to the simpleweb application and you can see that you are not auithorized to start or stop an application.</p> <p></p> </li> <li> <p>Select to log out as reader.</p> <p></p> </li> <li> <p>In the terminal window, press CRTL+C to stop the tail command. </p> </li> <li> <p>Stop the Liberty server.</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#64311-customizing-liberty-jvm-options","title":"6.4.3.11 Customizing Liberty JVM Options","text":"<p>As you have seen in the Admin Center, the Liberty value for max heap is quite large which indicates that a limit has not been defined yet. This will be done as part of this section by defining Liberty JVM options. </p> <p>The generic JVM arguments are used to configure and adjust how the JVM executes. Liberty is pre-configured with minimal settings defined. Custom generic JVM arguments such as heap settings for a Liberty server can be defined in the jvm.options file.</p> <ol> <li> <p>Create a jvm.options file with definitions for min and max heap by executing the following command:</p> <pre><code>echo '\n-Xms25m\n-Xmx500m\n' &gt; wlp_usr/servers/myServer/jvm.options\ncat wlp_usr/servers/myServer/jvm.options\n</code></pre> <p></p> </li> <li> <p>Start the server with the updated JVM options.</p> <pre><code>wlp/bin/server start myServer\n</code></pre> </li> <li> <p>Access the Liberty Admin Center again via URL https://localhost:9443/adminCenter.      Log in as user reader with password Liberty4Readers.</p> <p></p> </li> <li> <p>Click on Explore, then select Monitor.      Take a look at the dashboard and you can see, that the Used Heap Memory Max is now 500 MB as defined in jvm.options.</p> <p></p> </li> </ol> <p> </p> <ol> <li> <p>Log out from admin center.</p> </li> <li> <p>Stop the Liberty server using the following command:</p> <pre><code>wlp/bin/server stop myServer\n</code></pre> </li> </ol> <p>For additional information around the Liberty Admin Center, take a look at: https://www.ibm.com/docs/en/was-liberty/base?topic=center-setting-up-admin</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#64312-recap","title":"6.4.3.12 Recap","text":"<ol> <li>Recap</li> </ol> <p>Let\u2019s recap what you did in this part of the lab:  - You installed a Liberty server using the Liberty kernel image. - You used Liberty environment variables to separate the Liberty configuration from the binaries. - You created a Liberty server instance and installed missing features. - You deployed a simple web application via dropins and via server.xml. - You configured logging via server.xml and server.env. - You changed the Liberty heap size via jvm.options. - You used the REST API to see the Liberty configuration. - You used Liberty Admin Center to see monitoring data and administer Liberty apps. \u2003</p>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#7-lab-cleanup","title":"7 Lab Cleanup","text":"<ol> <li> <p>Once you are done, make sure that Liberty and Visual Studio Code is not running.</p> </li> <li> <p>Delete the Student folder via command:</p> <p>rm -rf ~/Student</p> </li> <li> <p>Close the browser and all terminal windows</p> </li> </ol>"},{"location":"1024-Liberty-Getting-Started/backup/README_ori/#summary","title":"Summary","text":"<p>In this lab, you learned how to develop a simple application and how to install and configure Liberty. </p> <p>Congratulations!</p> <p>You have successfully completed the lab \"Liberty Getting Started\"</p>"},{"location":"1156-Deploy-Liberty-OCP/","title":"1156 - Rapidly deploy and configure your Java applications with WebSphere Liberty and OpenShift Container Platform","text":""},{"location":"1156-Deploy-Liberty-OCP/#lab-1156","title":"Lab 1156","text":""},{"location":"1156-Deploy-Liberty-OCP/#rapidly-deploy-and-configure-your-java-applications-with-websphere-liberty-and-openshift-container-platform","title":"Rapidly deploy and configure your Java applications with WebSphere Liberty and OpenShift Container Platform","text":""},{"location":"1156-Deploy-Liberty-OCP/#overview","title":"Overview","text":"<p>This lab provides fundamental hands-on experience with modernizing existing Java applications to WebSphere Liberty, deployed into a container platform, such as Red Hat OpenShift. </p> <p>The focus of this lab is on the practical aspects of application deployment and configurations and not the analysis of the Transformation Advisor results. Other labs cover Transformation Advisor in detail.</p> <p>Upon completion of this lab, you will have gained skills to download and use the Transformation Advisor migration bundle to deploy and configure your application in the following scenarios: </p> <ol> <li> <p>to a locally running WebSphere Liberty - useful for deploying to Liberty in a VM</p> </li> <li> <p>to a container image \u2013 useful for deploying to Kubernetes</p> </li> <li> <p>using the Liberty Operator \u2013 useful for deploying to OpenShift</p> </li> </ol> <p>IBM Cloud Transformation Advisor\u00a0(Transformation Advisor) is an application modernization tool that is entitled through IBM Cloud Pak for Applications and WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. </p> <p>The Transformation Advisor tool provides the following value:</p> <ul> <li> <p>Identifies the Java EE programming models in the app</p> </li> <li> <p>Determines the complexity of replatforming these apps by listing a high-level inventory of the content and structure of each app</p> </li> <li> <p>Highlights Java EE programming model and WebSphere API differences between the WebSphere runtime profile types </p> </li> <li> <p>Identifies Java EE specification implementation differences that might affect the app</p> </li> <li> <p>Generates accelerators for deploying the application to Liberty and containers in a target environment</p> </li> </ul> <p>Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimizes errors and risks and reduces time to market.</p>"},{"location":"1156-Deploy-Liberty-OCP/#objective","title":"Objective","text":"<p>The objectives of this lab are to:</p> <ul> <li> <p>Learn how to download the application migration bundle and use it to deploy an application to WebSphere Liberty running locally</p> </li> <li> <p>Learn how to fully populate the migration bundle placeholders and build the application into a container image</p> </li> <li> <p>Learn the role of Kustomize when deploying the migration bundle</p> </li> <li> <p>Learn how to deploy your application to OpenShift with a single command</p> </li> <li> <p>Learn how to create multiple configurations for the application and deploy them to OpenShift</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/#prerequisites","title":"Prerequisites","text":"<p>The following prerequisites must be completed prior to beginning this lab:</p> <ul> <li> <p>Familiarity with basic Linux commands</p> </li> <li> <p>Have internet access</p> </li> <li> <p>Access to the TechZone lab environment</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/#accessing-the-lab-environment","title":"Accessing the lab environment","text":"<ol> <li> <p>Access the lab environment from your web browser.</p> <p>The lab environment page is displayed, the lab environment contains  six (6) Linux VMs, including workstation, and OpenShift Container Platform (OCP) Cluster VMs. The VM worstation is the one with the Graphical User Interface (GUI) for you to access and work in this lab. </p> <p></p> <p>Note: The workstation VM is the only VM that you access directly in the lab environment.</p> </li> <li> <p>Click Red Hat icon of the workstation VM to access it.</p> <p></p> </li> <li> <p>Click techzone user to log in.</p> <p></p> </li> <li> <p>Enter the password as: IBMDm0s! and press Enter.</p> <p></p> <p>Note:\u00a0That is a numeric zero in IBMDem0s!</p> <p>The lab VM GUI is displayed.</p> <p></p> </li> </ol> <p>Tips for working in the lab environment:</p> <ol> <li> <p>You can use the VM Desktop tools to fit to window or resize the     window.</p> <p></p> </li> <li> <p>To copy the text from the lab guide into the lab     environment, you must use the VM Desktop Send Text tool.</p> <p></p> <p>a. Copy the text from the lab guide that you want to paste into the  lab environment.</p> <p>b. Open a terminal window, or a text editor or a web browser in the VM  Desktop where you want to copy the text to.</p> <p>c. Click the Send Text icon in the VM Desktop tool bar, paste the  text into its window, then again click Send Text to send the text  to an open command shell and close its window.</p> <p></p> <p>The text is now copied to the terminal window, or the text editor or  the web browser you opened in the previous step.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#lab-tasks","title":"Lab Tasks","text":"<p>In this lab, you will use the Transformation Advisor migration bundle to build a container image and deploy an application to a local container for testing.</p> <p>To simplify the lab and to allow you to focus on the migration bundle, certain software and artifacts have already been put in place for you. These are as follows:</p> <ul> <li> <p>Transformation Advisor has been installed and collected data has been loaded</p> </li> <li> <p>docker (for creating and running images) has been installed</p> </li> <li> <p>oc (OpenShift command Line tool for running OCP commands) has been installed</p> </li> <li> <p>The PlantsByWebSphere Sample Application, built as an Enterprise Archive file (EAR) is available from the lab resource provided.</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/#part-1-application-assesment","title":"Part 1: Application Assesment","text":""},{"location":"1156-Deploy-Liberty-OCP/#11-pull-down-the-lab-artifacts-and-setup-lab-environment","title":"1.1 Pull down the Lab artifacts and setup lab environment","text":"<ol> <li> <p>If you have not yet cloned the GitHub repo with the lab artifacts, in a previous lab, run the following command on your terminal:</p> <p>a.  Open a new Terminal window and clone the git repository to pull down the lab artifacts</p> <p></p> <p>b.  Run the commands to clone the git repository to the local system</p> <pre><code>cd /home/techzone\n\ngit clone https://github.com/IBMTechSales/appmod-pot-labfiles.git\n</code></pre> <p>c.  Add \u201cexecute\u201d permissions to the shell scripts</p> <pre><code>find ./appmod-pot-labfiles -name \"*.sh\" -exec chmod +x {} \\;\n</code></pre> </li> <li> <p>Start the PlantsByWebSphere application database</p> <p>The PlantsByWebShere application database runs in a local docker container. Usethe command below to start the database. </p> <pre><code>docker start db2_demo_data\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#12-launch-transformation-advisor-local","title":"1.2 Launch Transformation Advisor (local)","text":"<p>Transformation Advisor provides a migration plan for each application being assessed for modernization. The migration plan includes a migration bundle of generated artifacts that accelerate the deployment of applications to Liberty in containers and Kubernetes / OpenShift.</p> <p>The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Container image into an OpenShift container platform.</p> <p>The Transformation Advisor is installed locally on the Workstation VM. </p> <ol> <li> <p>Launch the Transformation Advisor tool using the steps below.</p> <p>a.  From Workstation VM Desktop Tool Bar, click the Terminal icon to open a Terminal window.</p> <p></p> <p>b.  Launch the Transformation Advisor with commands:</p> <pre><code>cd /home/techzone/transformation-advisor-local-3.8.1\n\n./launchTransformationAdvisor.sh\n</code></pre> <p>Wait for Transformation Advisor to initialize and display the action menu list.</p> <p>c.  Type 5 and press Enter to start the Transformation Advisor.</p> <p></p> <p>d. The Transformation Advisor application is started, right-click the application URL link and select Open Link to launch it in a web browser window.</p> <p>The URL is displayed in the output from the TA command: http://server0.gym.lan:3000</p> <p></p> <p>The Transformation Advisor Home page is displayed in the Web Browser.</p> <p></p> <p>In the next section, you will create a new \u201cWorkspace\u201d in Transformation Advisor and upload the saved results from the scan of a WebSphere Application Server that has a single application deployed, named \u201cPlantsByWebSphere\u201d.</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#13-create-new-workspace-and-upload-scan-results-from-a-websphere-application-server","title":"1.3 Create new workspace and upload scan results from a WebSphere Application Server","text":"<p>In this section, create a new workspace named proof_of_concept.</p> <p>A workspace is a designated area that will house the migration recommendations provided by Transformation Advisor based on the Data Collector scan results of your application server environment.</p> <ol> <li> <p>Create a new workspace named proof-of-concept</p> <p>a.  From the Transformation Advisor Home page, click the Create New button</p> <p>b.  Type proof_of_concept as the Workspace name. Then click the Create button</p> <p></p> </li> <li> <p>Upload an existing scan results file provided for the lab.</p> <p>The scan results file is provided for you.</p> <p>It was produced by running the Transformation Advisor Data Collector on a WebSphere Application Server that had the PlantsByWebSphere application deployed.</p> <p>a. Click the Upload button</p> <p>b. Click the Drop or add file link. Then click the Upload button</p> <p></p> <p>c.  Navigate to Home &gt; Techzone &gt; appmod-pot-labfiles &gt; labs &gt; RuntimeModernization</p> <p>d.  Select pbw-collection.zip file. Then click the Open button</p> <p></p> <p>e. Once the pbw-collection.zip has been added, click on the Upload button to upload the results into Transformation Advisor.</p> <p></p> <p>After a few moments, the application data will be uploaded to the Transformation Advisor UI.</p> <p>The \"proof_of_concept\" workspace displays the \u201cAll Java Applications\u201d page which shows the recommendations for the workspace.</p> <p>There is a single application called plantsbywebsphereee6.ear. </p> <p>By default, \"WebSphere Liberty\" is selected as a modernization target. All the information provided assumes that this application will be modernized to WebSphere Liberty.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#14-analyze-the-plantsbywebsphereee6-application","title":"1.4 Analyze the plantsbywebsphereee6 application","text":"<p>Transformation Advisor provides detailed information about each application that has been analyzed. This application has a complexity of Simple.</p> <p>Simple means:</p> <ul> <li>The application is ready to be deployed to WebSphere Liberty</li> <li>No changes to the source code are required</li> </ul> <p></p> <p>How is this application ready for deployment when it shows 4 issues?</p> <p>In this case, the application has four Informational issues.</p> <p>Informational issues do not prevent the application from executing on the new runtime (WebSphere Liberty) but there may be small changes in the application\u2019s behavior.</p> <p>If unexpected behavior is found during testing, then reviewing these Informational issues may help explain what is happening.</p> <ol> <li> <p>We are now ready to review the migration plan for this application. </p> <p>a. Click on the Migration plan link at the end of the row of the plantsbywebsphereee6.ear application.</p> <p></p> <p>b.  The Migration Plan page opens.</p> <p>This page contains a summary of the application being migrated:</p> <ul> <li> <p>a preview of the files that will help during deployment (highlighted below)</p> </li> <li> <p>a list of the application\u2019s dependencies.</p> </li> </ul> <p>All the files can be downloaded in a single convenient migration bundle.</p> <p></p> </li> <li> <p>At the bottom of the screen, there is a Application Dependencies section. </p> <p>This shows all the files, in addition to the application, that are required for a deployment. Plantsbywebspheeee6.ear has two dependencies.</p> <p>a. Expand the section it to see the details</p> <p>b. In this case, DB2 drivers called db2jcc.jar and db2cc_licence.jar are required for deployment</p> <p></p> </li> <li> <p>Download the migration bundle by clicking the Download button in the bottom right. </p> <p>A zip file named \u201cplantsbywebsphereee6.ear_migrationBundle.zip\u201d will download to your Download folder.</p> <p></p> </li> </ol> <p>We will go through a step-by-step process of using the Transformation Advisor migration bundle to deploy plantsbywebsphereee6.ear as follows:</p> <ol> <li> <p>Ensure the application can run locally on WebSphere Liberty</p> </li> <li> <p>Build an immutable container image running on WebSphere Liberty</p> </li> <li> <p>Deploy the image to OpenShift (and configure it) using a single command</p> </li> <li> <p>Redeploy and reconfigure this image for a new environment with a single command</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#part-2-deploy-plantsbywebsphere-app-to-a-locally-running-websphere-liberty","title":"Part 2: Deploy PlantsByWebSphere app to a locally running WebSphere Liberty","text":"<p>In this step, you will create a new Liberty server to run the PlantsByWebSphere application.</p> <p>Then, you will review the migration bundle to see what files you need to add, and use the provided server.xml Liberty configuration file. This file is used to configure Liberty by providing values for ports, security, context routes and by providing application-specific configuration. </p>"},{"location":"1156-Deploy-Liberty-OCP/#21-create-a-local-liberty-server","title":"2.1   Create a local Liberty Server","text":"<ol> <li> <p>From a Terminal window, create a new local WebSphere Liberty server named pbwserver.</p> <pre><code>/home/techzone/wlp/bin/server create pbwserver\n</code></pre> <p>output:</p> <pre><code>Server pbwserver created.\n</code></pre> </li> <li> <p>From the Terminal window, start the local WebSphere Liberty server.</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> <p>Output:</p> <pre><code>Starting server pbwserver.\n\nServer pbwserver started with process ID #####\n</code></pre> </li> <li> <p>Confirm the local WebSphere Liberty server is running. Open the web browser, open a new browser tab. Then go to: http://localhost:9080</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#213-review-the-placeholder-files-in-the-migration-bundle","title":"2.1.3 Review the placeholder files in the migration bundle","text":"<p>In this section, you will review the migration bundle to see what files need to be added to the WebSphere Liberty configuration to run the application. </p> <ol> <li> <p>Let\u2019s make note of the 3 placeholder files that are placed in the migration bundle.</p> <p>The placeholder files are convenient references to let you know which files you will need to copy to the Liberty server.</p> <p>Note: You will fully populate the migration bundle in later steps.</p> <p>a.  From the Terminal window, list the placeholder files in the migration bundle.</p> <pre><code>unzip -l /home/techzone/Downloads/plantsbywebsphereee6.ear\\_migrationBundle.zip | grep placeholder\n</code></pre> <p></p> <ul> <li> <p>The target directory contains the placeholder file for the PlantsByWebSphere application EAR deployment file. This is a reminder that you need to copy the PlantsByWebSphere EAR file the Liberty server.</p> </li> <li> <p>The src/main/liberty/lib directory contains the placeholder files for the DB2 database libraries required by the application. This is a reminder that you need to copy the DB2 libraries to the Liberty server.</p> </li> </ul> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#214-configure-the-liberty-server-for-plantsbywebsphere","title":"2.1.4   Configure the Liberty server for PlantsByWebSphere","text":"<p>In this section, extract the migration bundle that you downloaded. Then, copy the required dependency files and server configuration to the Liberty server.</p> <ul> <li> <p>Extract the migration bundle to a new directory</p> </li> <li> <p>Copy the DB2 libraries to the directory defined in the \"DB2 driver configuration\" in the server.xml file.</p> </li> <li> <p>Copy the PlantsByWebSphere EAR file to the \u201capps\u201d directory of the Liberty server</p> </li> <li> <p>Copy the server.xml file from the migration bundle to the Liberty server, replacing the default server.xml file</p> </li> </ul> <ol> <li> <p>Extract the migration bundle that you downloaded</p> <pre><code>mkdir /home/techzone/Student/labs/appmod/migration-bundle\n\ncd /home/techzone/Student/labs/appmod/migration-bundle\n\ncp /home/techzone/Downloads/plantsbywebsphereee6.ear_migrationBundle.zip .\n\nunzip plantsbywebsphereee6.ear_migrationBundle.zip\n</code></pre> </li> <li> <p>List the directory of the extracted migration bundle</p> <pre><code>ls -l\n</code></pre> <p>The migration bundle contains the files to build and deploy the PlantsByWebSphere application to Liberty, in containers, and on OpenShift.     </p> <p></p> </li> <li> <p>Copy the PlantsByWebSPhere application binary file into the apps location in Liberty</p> <pre><code>cp /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/plantsbywebsphereee6.ear /home/techzone/wlp/usr/servers/pbwserver/apps\n</code></pre> </li> <li> <p>Create the global shared directory in Liberty. </p> <p>This is where you will copy the DB2 libraries for Liberty</p> <pre><code>mkdir /home/techzone/wlp/usr/shared/config/lib/global\n</code></pre> </li> <li> <p>Copy the DB2 driver files into the global shared location in Liberty.</p> <p>This will make it available to any application running in Liberty.</p> <pre><code>cp /home/techzone/Student/LabFiles/db2_drivers/* /home/techzone/wlp/usr/shared/config/lib/global\n</code></pre> </li> <li> <p>Copy the server.xml file from the migration bundle into the Liberty server to replace its existing configuration. Choose to overwrite the existing file if prompted.</p> <pre><code>cp /home/techzone/Student/labs/appmod/migration-bundle/src/main/liberty/config/server.xml /home/techzone/wlp/usr/servers/pbwserver\n</code></pre> <p>Now that the PlantsByWebSphere binary and its configuration are added to the Liberty server, the application is ready to be run form the web browser.     </p> </li> <li> <p>Run the PlantsByWebSphere application from the browser.</p> <pre><code>http://localhost:9080/PlantsByWebSphere\n</code></pre> <p>Now the application is running in Liberty, and the main page is displayed.</p> <p></p> </li> <li> <p>Attempt to click on any of the tabs: \u201cFlowers\u201d, Fruits &amp; Vegetables\u201d, or \u201cTrees\u201d.</p> <p>Note the exception. This is an expected erorr. The issue is in the JPA persistence (Database access). A user is not defined, and therefore authentication to the database failed.</p> <p></p> <p>These pages should display a catalog of items in their respective category, which are rereived from the application database. </p> <p>So what happened? </p> <p>Transformation Advisor does not collect any sensitive data for the application server.  This means the application-specific configuration information in the server.xml file has not been set. In this case, the username and password to access the database are missing.</p> <p>In the next section, you will review the server.xml file and add the sensitive data required to access the application database.  </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#215-review-the-serverxml-file","title":"2.1.5   Review the server.xml file","text":"<p>Now you will review the server.xml file and set the necessary configuration information. </p> <p>The server.xml file defines a set of features that the application requires. By importing only the necessary features to support the application\u2019s API needs, the footprint of the deployed application and Liberty server is kept as small as possible.</p> <ol> <li> <p>Review the server.xml file</p> <p>Using the gedit editor in a Terminal window, open the server.xml file located in the Liberty server</p> <pre><code>gedit /home/techzone/wlp/usr/servers/pbwserver/server.xml\n</code></pre> <ul> <li>Section 1 contains the features that the application requires, and these are discovered automatically during analysis performed the Transformation Advisor Data Collector.</li> </ul> <p></p> <ul> <li> <p>Section 2: Defines the resources required to access the database</p> </li> <li> <p>The authdata defies the BD2 user and password that is used by the datasources. These refer to variables that are defined in the server.xml file.</p> </li> <li> <p>The jdbc driver defines the required libraries. These are the libraries you copied into this location via the script</p> </li> </ul> <p></p> <ul> <li>Section 3: The datasource contains all the information required to access the database: Database user, password, database name, host, and port number.</li> </ul> <p></p> <ul> <li>Section 4 contains the variables for the non-sensitive configuration data. For example, the port to run the server on. The values of these variables are collected by Transformation Advisor.</li> </ul> <p></p> <ul> <li>Section 5 contains the sensitive data variables. </li> </ul> <p>You can see that the values for these variables are all blank, as this information is never collected by Transformation Advisor.</p> <p></p> </li> <li> <p>The reason that the PlantsByWebSphere application retuned an \u201cException\u201d is because the values for the sensitive variables has not been set. </p> <p></p> <p>Next, you will update the server.xml to include the credentials required to access the application database. </p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#216-update-the-serverxml-and-retest-the-plantsbywebsphere-application","title":"2.1.6   Update the server.xml and retest the PlantsByWebSphere application","text":"<ol> <li> <p>From a Terminal window, stop the Liberty server named pbwserver with the following command:</p> <pre><code>/home/techzone/wlp/bin/server stop pbwserver\n</code></pre> </li> <li> <p>From the gedit editor that you have open, update the values in the server.xml file for the sensitive data as illustrtated below:</p> </li> </ol> <p>a. Scroll to the bottom of the server.xml file to view the sensitive-data variables. </p> <p>b.  Set the default value for rhel9_baseNode01_pbwuser_password to: db2inst1-pwd</p> <p>c. Set the default value for rhel9_baseNode01_pbwuser_user to: db2inst1</p> <pre><code> ![](./images/media/image44.png)\n</code></pre> <p>d. Save and close the server.xml in the editor</p> <ol> <li> <p>From a Terminal window, start the Liberty server named pbwserver with the following command:</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> </li> <li> <p>Reload and test PlantsByWebSphere application in the browser</p> <pre><code>http://localhost:9080/PlantsByWebSphere\n</code></pre> <p>a. Click the Flowers tab. The catalog of flowers should now be displayed.</p> <p></p> </li> <li> <p>From a Terminal window, stop the Liberty server named pbwserver with the following command:</p> <pre><code>/home/techzone/wlp/bin/server stop pbwserver\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#checkpoint","title":"Checkpoint","text":"<p>At this point in the lab, you have successfully demonstrated the PlantsByWebSphere application runs successfully in WebSPhere Lberty on a local VM. </p> <p>In the next sections, you will deploy the PlantsByWebSphere application to containers and Red Hat OpenShift. </p>"},{"location":"1156-Deploy-Liberty-OCP/#part-3-create-and-run-the-plantsbywebsphere-application-as-a-container-image","title":"Part 3: Create and run the PlantsByWebSphere application as a container image","text":""},{"location":"1156-Deploy-Liberty-OCP/#31-explore-the-containerfile-used-to-build-plantsbywebsphere-as-a-container-image","title":"3.1  Explore the Containerfile used to build PlantsByWebSphere as a container image","text":"<p>In the previous section, you used the server.xml to get the  application running on a local Liberty instance. This was to show you how the Transformation Advisor server.xml file is used. If you are moving to Liberty in VMs as your new runtime, then you are done! </p> <p>However. if containers are to be your final destination, this section explores the Transformation Advisor migration bundle artifacts that accelerate application deployment to Lberty in containers. </p> <p>In the case of Simple applications, it is not necessary to carry out a separate step of deploying to a local Liberty instance at all. Instead, by using the Transformation Advisor migration bundle, you can deploy your application to Liberty running in a container all in one go. </p> <p>This is what we will do now.</p> <ol> <li> <p>Add the PlantsByWebSphere binary file to your migration bundle, and remove the placeholder.</p> <pre><code>cp /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/plantsbywebsphereee6.ear /home/techzone/Student/labs/appmod/migration-bundle/target\n\nrm /home/techzone/Student/labs/appmod/migration-bundle/target/plantsbywebsphereee6.ear.placeholder\n</code></pre> </li> <li> <p>Add the db2 library files to your migration bundle, and remove the placeholder.</p> <pre><code>cp /home/techzone/Student/LabFiles/db2_drivers/* /home/techzone/Student/labs/appmod/migration-bundle/src/main/liberty/lib\n\nrm /home/techzone/Student/labs/appmod/migration-bundle/src/main/liberty/lib/*.placeholder\n</code></pre> </li> <li> <p>Update the server.xml file to remove the TLS configuration which is not used. </p> <pre><code>cp /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/lab_2161-1/deploy-config-updates/apps-pbw/server.xml /home/techzone/Student/labs/appmod/migration-bundle/src/main/liberty/config\n</code></pre> </li> <li> <p>The migration bundle is ready to be used to generate an image of your application running on WebSphere Liberty. To do this, we will use the Containerfile that comes with the migration bundle.</p> <p></p> <p>a. Explore the Containerfile in the migration bundle</p> <pre><code>gedit /home/techzone/Student/labs/appmod/migration-bundle/Containerfile\n</code></pre> <ul> <li> <p>The FROM statements in the Containerfile pull in the following two images. </p> </li> <li> <p>Open JDK 8</p> </li> <li>Latest WebSphere Liberty</li> </ul> <p></p> <p></p> <ul> <li>The RUN commands in the Containerfile create the necessary folder structures and copies the binary files from the migration bundle into the appropriate locations in the image.</li> </ul> <p></p> <ul> <li>There are several lines in the file that have been commented out. </li> </ul> <p>By default, the Containerfile assumes that your application is available as a binary file. However, it can also be used to build your application from source code. The full details of how to do this can be found in README.md in the migration bundle.</p> <p></p> <p>b. Close the gedit editor. DO NOT SAVE ANY CHNAGES TO THE FILE! </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#32-setup-build-and-run-plantsbywebsphere-in-a-local-container","title":"3.2 Setup, build and run PlantsByWebSphere in a local container","text":"<p>In this section, you will build and run the PlantsByWebSphere application in a local container.</p> <ol> <li> <p>Build the container image from the migration bundle using docker</p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle\n\ndocker build -f /home/techzone/Student/labs/appmod/migration-bundle/Containerfile --tag apps/pbw .\n</code></pre> <ul> <li>-f is the path to the Containerfile used to build the image</li> <li>--tag allows you to define the name and version of the image to build</li> <li>. is the current directory of the migration bunlde that includes the artifacts for building the container image. </li> </ul> <p>Note: Ignore the following warning message. This will be fixed in the next release of Transfromation Advisor </p> <pre><code>1 warning found (use --debug to expand):\n- Empty continuation line found in: RUN mkdir -p /config/apps &amp;&amp;     mkdir -p /sharedlibs &amp;&amp;     cp ./src/main/liberty/config/* /config &amp;&amp;     cp ./target/*.*ar /config/apps/ &amp;&amp;     if [ ! -z \"$(ls ./src/main/liberty/lib 2&gt;/dev/null)\" ]; then         cp -r ./src/main/liberty/lib/* /sharedlibs;     fi\n</code></pre> </li> <li> <p>Confirm the container image has been built</p> <pre><code>docker images | grep apps/pbw\n</code></pre> <p></p> </li> <li> <p>The next step is to run the image using the docker run command.</p> <pre><code>docker run -d --rm -p 9080:9080 --name pbw-app  apps/pbw\n</code></pre> <ul> <li>-d start the container in 'detached' mode so you get your command prompt back</li> <li>--rm remove the container when it is stopped</li> <li>-p expose the HTTP port</li> <li>--network connect the container to the same docker network as the DB2 container</li> <li>--name is the name we are giving the container </li> </ul> </li> <li> <p>Check that the contaier is up and running. </p> <pre><code>docker ps | grep pbw-app\n</code></pre> <p></p> </li> <li> <p>From the browser, access the PlantsByWebSphere application that is running in the local container</p> <pre><code>http://server0.gym.lan:9080/PlantsByWebSphere\n</code></pre> <p></p> <p>Attempt to click on any of the tabs: \u201cFlowers\u201d, Fruits &amp; Vegetables\u201d, or \u201cTrees\u201d.</p> <p>Note the exception. This is an expected erorr. The issue is in the JPA persistence (Database access). A user is not defined, and therefore authentication to the database failed.</p> <p></p> <p>The error is because we are using the unchanged server.xml file that came with the migration bundle. </p> <p>As outlined already, Transformation Advisor does not collect any sensitive data so the application specific configuration information has not been set. </p> </li> </ol> <p>Considerations &amp; recommendations:</p> <p>One option here is to update the server.xml file, add in the sensitive data values that Transformation Advisor did not collect and rebuild the image. </p> <p>However, a big part of container image value is that they are immutable. No matter where you take and deploy the image the operating system, runtime, security patch level, etc. will be the same. </p> <p>This gives you great reproducibility and gets away from the classic but it works for me! issue. We lose much of this value if we bake in the configuration with the image, as we will have to produce an image for each new configuration. </p> <p>Instead of using the exact same image in each of your development, staging and production environments, you would be using different images. </p> <p>It is never best practice to hard code configuration into your image. </p> <p>In the next section we will look at how the migration bundle helps you manage this configuration easily across all your environments and how it will simplify deployment to your OpenShift cluster. The migration bundle uses Kustomize to help achieve this.</p>"},{"location":"1156-Deploy-Liberty-OCP/#32-understand-how-kustomize-is-used-in-the-migration-bundle","title":"3.2 Understand how Kustomize is used in the migration bundle","text":"<p>kustomize is simple way to manage configuration across all your different deployments and environments without the need for templates.</p> <p>By using overlays, it allows you to break out your basic configuration information (ports, names, hosts, etc.) from your sensitive data (usernames, password, etc.) that are likely to change in every deployment.</p> <p>Every kustomize artifact is plain YAML and can be validated and processed in a standardized way. Plus, it makes them very human readable! It is natively built into kubectl and the OpenShift client.</p> <p>The structure of the kustomize folder is as follows.</p> <ol> <li> <p>base contains your expected standard deployment in a config map (because it is not sensitive data). It also contains the application.cr-yaml file that will execute the deployment and mount the necessary secrets that are created from the secret file.</p> </li> <li> <p>overlays contains all your different deployment configurations. In this case, only a single deployment has been created for your dev systems. The secret file will contain all your application-specific sensitive data that will be created as secrets in OpenShift.</p> </li> </ol> <p></p> <p>Note: In the next section we will use this kustomize structure to deploy your application image.</p> <p>Further information on kustomize can be found at http://kustomize.io</p>"},{"location":"1156-Deploy-Liberty-OCP/#4-deploy-to-openshift-with-config","title":"4 Deploy to OpenShift with config","text":"<p>You have now created a a container image without any application specific configuration. In this section, we will push that image to an image repository and then deploy it into OpenShift, along with its configuration, with a single command.</p>"},{"location":"1156-Deploy-Liberty-OCP/#41-update-the-kustomize-structure-to-move-the-configmap-configuration-to-the-overlays-folder","title":"4.1 Update the Kustomize structure to move the configmap configuration to the overlays folder","text":"<p>It is common to have different application configuration between deployments such as dev and staging. In this lab, we use different DB2 application databases between the two configurations. For this reason , we want the configMap to be located in the Kustomize overlays folder, rather than the base where it is placed, by default, in the Transformation Advisor migration bundle. </p> <p>For the lab, we have provided the updated file structure for you. You just need to run the commands below to update the migration bundle. </p> <ol> <li> <p>Run the following commands to update the Kustomize structure as stated above. </p> <pre><code>rm -rf /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize\n\ncp -r /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/lab_2161-1/kustomize /home/techzone/Student/labs/appmod/migration-bundle/deploy/\n</code></pre> <p>a. List the updated directory structure   </p> <pre><code>ls -Rl  /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize\n</code></pre> <p>Notice the plantsbywebspheree6-configmap.yaml file is now in the overlays/dev folder. </p> <p>The kustomize.yaml files in the base and overlays/dev folder have been updated to reflect the new location of the configmap yaml file. </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#42-update-the-yaml-files-to-add-the-application-configuraton-for-deployment","title":"4.2 Update the YAML files to add the application configuraton for deployment","text":"<p>Recall, the container image does not have the application configuration baked in. </p> <p>You will make the following updates to the configuration YAML files in the migration bundle for the PlantsByWebSphere application deployment to OpenShift. </p> <ul> <li> <p>Update the overays/dev/plantsbywebsphereee6-secret.yaml file</p> <ul> <li>Add the sensitive-data to the secret YAML file</li> </ul> </li> <li> <p>Update the overlays/dev/plantsbywebsphereee6-configmap.yaml file</p> <ul> <li>Add the database host imformation to access the dev database</li> </ul> </li> <li> <p>Update the base/application-cr.yaml file</p> <ul> <li>Add the referece to the container image</li> <li>Disable TLS, as we do not have this configured in our environment</li> <li>Accept the Liberty license</li> </ul> </li> </ul> <p>TIP: To perform the updates, you will copy updated versions of the yaml files from the lab artifacts that we provide for the lab. This way you can focus on the outcomes, rather that the tedious task of editing text files.    </p> <ol> <li> <p>Update the plantsbywebsphereee6-secret.yaml file, which contains the sensitive-data for the application. You will copy an updated version of the file that we have prepared for the lab</p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/overlays/dev/\n\ncp  /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/lab_2161-1/deploy-config-updates/apps-pbw/plantsbywebsphereee6-secret.yaml  /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/overlays/dev\n</code></pre> <p>The update to the plantsbywebsphereee6-secret.yaml in the overlays/dev directory is now complete. The sensitive data is encoded and added to the yaml file. </p> <p></p> <p>a. <code>How did we encode the values?</code> </p> <p>We updated the values in the YAML file with the sensitive data by  Base64 encoding the values as illustrated below.</p> <ul> <li>We encoded the following values:</li> </ul> <ul> <li> <p>user: db2inst1</p> <p>echo db2inst1 | base64</p> </li> </ul> <p>The encoded value is: ZGIyaW5zdDEK</p> <ul> <li> <p>password: db2inst1-pwd</p> <p>echo db2inst1-pwd | base64</p> </li> </ul> <p>The encoded value is: ZGIyaW5zdDEtcHdkCg==</p> </li> <li> <p>Update the plantsbywebsphereee6-configmap.yaml file, which contains the database name and host for the dev database</p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/overlays/dev\n\ncp  /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/lab_2161-1/deploy-config-updates/apps-pbw/plantsbywebsphereee6-configmap.yaml  /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/overlays/dev\n</code></pre> <p>The update to the plantsbywebsphereee6-configmap.yaml in the overlays/dev directory is now complete. The database host for the dev database has been added to the yaml file. </p> <p></p> </li> <li> <p>Update the application-cr.yaml file</p> <p>The application-cr.yaml is the WebSphere Liberty custom resource used to deploy the PlantsByWebSphere application.</p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/base/\n\ncp  /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/lab_2161-1/deploy-config-updates/apps-pbw/application-cr.yaml  /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/base\n</code></pre> <p>The updated application-cr.yaml in the base directory is now complete. The PlantsByWebSphere application configuration is finalized.  </p> <p></p> </li> </ol> <p>### 4.3 Deploy the application and its configuration to OpenShift</p> <p>To deploy the PlantsByWebSphere application to OpenShift, you must perform the following basic steps.</p> <ul> <li> <p>Tag the container image, appropriately tagging for the OpenShift internal registry</p> </li> <li> <p>Push the tagged container image to the OpenShift internal registry   </p> </li> <li> <p>Use a single command to deploy and configure the application to openShift</p> </li> </ul> <ol> <li> <p>Tag the container image </p> <p>a. Go to a Terminalwindow.   </p> <p>b. Tag the container image using the following docker command:</p> <pre><code>docker tag apps/pbw default-route-openshift-image-registry.apps.ocp.ibm.edu/apps-pbw/pbw-app:1.0\n</code></pre> </li> <li> <p>Verify the image was tagged:</p> <pre><code>docker images | grep pbw-app\n</code></pre> <p></p> </li> <li> <p>Login to OpenShift to run the commands to push and deploy the image </p> <pre><code>oc login -u ocadmin -p ibmrhocp\n</code></pre> </li> <li> <p>Create a new project where you will dpeloy the application </p> <pre><code>oc new-project apps-pbw\n</code></pre> </li> <li> <p>Login to the OpnShift internal registry so you can push the image </p> <pre><code>docker login -u $(oc whoami) -p $(oc whoami -t) default-route-openshift-image-registry.apps.ocp.ibm.edu\n</code></pre> </li> <li> <p>Push the container image to OpenShift internal registry</p> <pre><code>docker push default-route-openshift-image-registry.apps.ocp.ibm.edu/apps-pbw/pbw-app:1.0\n</code></pre> </li> </ol> <p>In previous steps, you configured the sensitive data that is needed, accepted the license, pointed to the image that is needed to pull,  and logged into OpenShift. Now, with a single command, you can deploy to OpenShift and configure the image. </p> <p>You must specify which overlay will provide the configuration (dev in this case).</p> <ol> <li> <p>Deploy the PlantsByWebSphere application to OpenShift    </p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize\n\noc apply -n apps-pbw -k overlays/dev\n</code></pre> </li> <li> <p>Verify the deployment</p> <pre><code>oc get deployment -n apps-pbw\n</code></pre> <p>Wait for the deployment to be ready and availabe, as illustrated below:</p> <pre><code>NAME                   READY   UP-TO-DATE   AVAILABLE  \nplantsbywebsphereee6   1/1     1            1\n</code></pre> </li> <li> <p>Verify the appliation pod is ready.</p> <p>This may take a few moments. Just keep checkig with command below</p> <pre><code>oc get pods -n apps-pbw\n</code></pre> <p>Wait for the pod to be ready and availabe, as illustrated below:</p> <pre><code>NAME                                    READY   STATUS       \nplantsbywebsphereee6-7476449666-shnx8   1/1     Running\n</code></pre> </li> <li> <p>From the browser, navigate to the PlantsByWebSphere route for the dev deployment:</p> <pre><code>http://plantsbywebsphereee6-apps-pbw.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> <p>The PlantsByWebSphere main page is displayed.</p> <p></p> </li> <li> <p>Click on the Trees category and view the trees that are loaded in the dev database.</p> <p>This catalog of trees was retrieved from the DB2 database in the dev configuration.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#44-explore-the-websphere-liberty-operator-in-openshift","title":"4.4 Explore the WebSphere Liberty Operator in OpenShift","text":"<p>In this section, you will take a look at the WebSphere Liberty Operator in the OpenShift console to see what has been deployed.</p> <ol> <li> <p>Login to OpenShift console</p> <p>a.  Open a new tab in the web browser</p> <p>b.  Click on the OpenShift Console bookmark on the bookmark toolbar</p> <p>c.  Login credentials:</p> <ul> <li> <p>Username: ocadmin</p> </li> <li> <p>Password: ibmrhocp</p> </li> </ul> </li> <li> <p>View the IBM WebSphere Liberty Operator</p> <p>a.  Click on Operators &gt; Installed Operators in the left-hand menu</p> <p>b. Select apps-pbw in the Project filter</p> <p>c. Type Liberty in the Name filter</p> <p>d.  Click on IBM WebSphere Liberty</p> <p></p> </li> <li> <p>View the WebSphereLibertyApplication Deployment</p> <p>a.  Click on the tab called WebSphereLibertyApplication</p> <p></p> <p>b. You will see the plantsbywebsphereee6 application listed in the \u2018dev\u2019 namespace</p> <p>b. Click on the link called plantsbywebsphereee6 under the Name column</p> <p></p> <p>c.  Select the Resources tab</p> <p></p> <p>d. Select the link for the Deployment</p> <p></p> <p>e. The PlantsByWebSphere deployment has one pod running</p> <p></p> </li> <li> <p>View the WebSphereLibertyApplication Route</p> <p>a.  Return to the plantsbywebsphereee6 operator page</p> <p></p> <p>b.  Click the Resources tab</p> <p></p> <p>c.  Select the link of Kind: route</p> <p></p> <p>d.  Click on the Location link for the route</p> <pre><code> http://plantsbywebsphereee6-apps-pbw.apps.ocp.ibm.edu\n</code></pre> <p></p> <p>e.  The Welcome to Liberty page is displayed in a new Browser tab. </p> <p></p> <p>f.  Append the context root \u2018PlantsByWebSphere\u2019 to access the PlantsByWebSphere application</p> <pre><code>http://plantsbywebsphereee6-apps-pbw.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#45-re-deploy-app-with-different-configuration-to-openshift","title":"4.5 Re-deploy app with different configuration to OpenShift","text":"<p>We have deployed the PlantsByWebSphere application with its configuration to dev, using a single kustomize command. </p> <p>In this section, we will deploy the same application again with a new configuration for staging, again using a single kustomize command.</p> <ol> <li> <p>Create a new overlay directory called staging that will store the new staging configuration, coping the existing dev directory.</p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/overlays\n\ncp -r dev staging\n</code></pre> </li> <li> <p>Update the plantsbywebsphereee6-configmap.yaml file, which contains the database name and host for the staging configuration.</p> <p>To update, use the command below to copy a completed version of the config map yaml file to the new configuration for the staging configuration.  </p> <pre><code>cp  /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/lab_2161-1/deploy-config-updates/apps-pbw/plantsbywebsphereee6-configmap-staging.yaml  /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize/overlays/staging/plantsbywebsphereee6-configmap.yaml\n</code></pre> <p>The update to the plantsbywebsphereee6-configmap.yaml in the overays/staging directory is now complete. The database serverName for the staging configuration has been added to the configmap yaml file, as illustrated below. </p> <p></p> </li> <li> <p>From the kustomize directory, apply the new staging overlay</p> <pre><code>cd /home/techzone/Student/labs/appmod/migration-bundle/deploy/kustomize\n\noc apply -n apps-pbw -k overlays/staging\n</code></pre> <p>Note: that the configmap and secret were configured,  but the application is unchanged, as illustrated below.  </p> <pre><code>configmap/plantsbywebsphereee6-config configured\nsecret/plantsbywebsphereee6-secret configured\nwebspherelibertyapplication.liberty.websphere.ibm.com/plantsbywebsphereee6 unchanged\n</code></pre> </li> <li> <p>Restart the PlantsByWebSphere application, to work around a bug in the PlantsByWebSphere app.</p> </li> <li> <p>Ensure the pod has restarted</p> <pre><code>oc get pods -n apps-pbw\n</code></pre> <p>The STATUS State should be Running</p> <pre><code>NAME                                    READY   STATUS    \nplantsbywebsphereee6-6d8979cc99-hj4fg   1/1     Running\n</code></pre> </li> <li> <p>From the browser, navigate to the PlantsByWebSphere route for the application:</p> <pre><code>http://plantsbywebsphereee6-apps-pbw.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> <p>The PlantsByWebSphere main page is displayed.</p> <p></p> <p>a. Click on the Home link on the application main page</p> <p></p> <p>b. Click on the Trees category and view the trees that are loaded in the staging database.</p> <p></p> <p>For reference, this catalog of trees was retrieved from the dev database. Notice the name of the trees are different. </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/#summary","title":"Summary","text":"<p>Congratulations!</p> <p>You have successfully completed the core learning objectives in the lab</p> <p>In this lab, you learned how to deploy applications to WebSphere Liberty using the WebSphere Liberty Operator and the deployment artifacts produced by Transformation Advisor in its migration bundle.</p> <p>You explored the options for deployment: </p> <ul> <li>locally running Liberty</li> <li>Liberty as an image running in local container</li> <li>Liberty as an image running in OpenShift.</li> </ul> <p>You learned how to easily configure deployments to OpenShift to allow the same immutable image to be deployed for different configurations such as \u2018dev\u2019 and \u2018staging\u2019 environment deployments.</p> <p>You learned about some of the practical ways you can secure your configuration data.</p> <p>You explored the PlantsByWebSphere assessment details and reports in Transformation Advisor.</p> <p>You may continue your learning journey with the optional sections of the lab. </p>"},{"location":"1156-Deploy-Liberty-OCP/#optional-sections","title":"Optional Sections:","text":"Click to expand: Section 5: (Optional) GitOps and configuration management     ## 5 GitOps and configuration management  At this point we have two distinct elements for deployment: the **application image** and the **configuration for that image for each potential environment**. In the GitOps model, these two elements are stored in separate Git repositories.   You can further distribute the configuration into different repositories for each environment. This approach allows you to treat configuration as if it were code and to apply standard code development techniques such as Pull Requests, code review and maintain a full audit history. This approach delivers excellent controls and oversights for configuration changes for your OpenShift clusters, especially as you promote changes through your environments.  ![A black background with white arrows and dots Description automatically generated](./images/media/image105.png)  This illustration above comes from an excellent article on real world GitOps:   We will not cover all of GitOps it in detail in this lab - however, there are two relevant areas that are worth mentioning briefly.  **Configuration Drift**  With the GitOps approach, there is the risk that the deployed configuration for the OpenShift cluster does not match what is in the Git repository. Someone could have updated the OpenShift cluster directly, for example. There are a number of tools to manage this configuration drift, with ArgoCD being a common tool to address this issue. It can be configured to sync manually or automatically, so that any changes made directly on the cluster are reverted to what is in the Git repository.   The OpenShift GitOps Operator can be used to install ArgoCD into your OpenShift cluster. Further details on how to this can be found here:   **Securing Secrets**  Even with controls and restricted access to Git repositories, it is not considered good practice to store the sensitive data in plain text (aka the values entered into the secrets files). There are generally two approaches you can take to tackle this: encrypt the values or use a reference:    - **Encrypt the values**: In this approach, the value in the secret file is encrypted when it is committed to the Git repo. During deployment to OpenShift there is an extra step where the secret values are decrypted. **SealedSecrets** is one implementation of such an approach.    - **Use a reference**: In this case, the secrets and their values are stored in a secret manager. During deployment, a reference is provided to the secret manager which will then mount the secret to the deployed container. **HashiCorp Vault** is a common implementation of this approach.  In both cases, there is additional work to be done above what has been covered in this lab. However, the kustomize files provided in the migration bundle gives you a good starting point to identify the secrets and provide a standard output that can be transformed to suit your selected approach.   Click to expand: Section 6: (Optional) Exploring the PlantsByWebSphere application in the proof_of_concept workspace     ## 6 Exploring the PlantsByWebSphere application in the proof_of_concept workspace  IBM Cloud Transformation Advisor (TA) analyzes application and configuration data collected from Java application server environments. TA delivers great insights that help organizations plan and implement a modernization journey to WebSphere Liberty and Kubernetes base container platform for existing Java applications.  TA provides recommendations for modernization which includes and considers application complexity, dependencies, potential issues, and estimated development effort.  ![A screenshot of a computer Description automatically generated](./images/media/image106.png)  1. In a browser window, return to Transformation Advisor using the following URL:           http://localhost:3000  2. Open the **proof-of-concept** workspace, if it is not already open      ![](./images/media/ta-proof-of-concept.png)   3.  Scroll down to the **Java applications** section and note the high-level summary for the **plantsbywebsphereee6.ear** application assessment.    - Complexity    - Issues    - Required code changes    - Application cost (in days for development)      ![](./images/media/image107.png)  This workspace has only a single application name **plantsbywebsphereee6.ear**. It is summarized as **simple** to  modernize to WebSphere Liberty.     ***Complexity values and their meanings:***  **Simple**: The application is ready for deployment, no access to the source code is required.     - Simple complexity value typically represents about 20% of applications.   **Moderate**: Code changes are required before deployment; however, these code changes are well known, and specific help is provided for each issue to assist in resolving it.      - Moderate complexity value typically represents about 80% of applications.   **Complex**: The application uses a technology that does not have a direct equivalent in the new runtime and a new approach will need to be adopted. In our experience, only about 1 in 6 customers have these kinds of applications.      - Complex complexity value typically represents less than 1% of applications.  4. Click on **plantsByWebSphereee6.ear** which will expand the analysis      ![A screenshot of a computer Description automatically generated](./images/media/image108.png)      a. Scroll down, noting the groups or categories of analysis available      - **Complexity rules**      - **Required code changes**      - **Issue details**        - Critical        - Warning        - Informational      - **Additional reports**        - Technology report        - Inventory report        - Analysis reports   5.  View the **Analysis Report** for more detailed application information      **Analysis Report**      The **Detailed Migration Analysis Report** does a deep dive on the preferred migration target to help you understand any migration issues, like deprecated or removed APIs, Java SE version differences, and Java EE behavioral differences.      a.  Click on the **Analysis report** link.       ![A screenshot of a computer Description automatically generated](./images/media/image109.png)      b. The **Analysis report** will open in a new browser tab      ![A screenshot of a computer Description automatically generated](./images/media/image110.png)       c.  Note the **target**      - Because the **source** was traditional WebSphere v8.5.5, which is Java EE 6, the target is also EE6.      - Because the source was running Jave SE 8, the target is also set to Java SE 8.      By default, Transformation advisor recommends the first step of modernization to Liberty that requires the minimal amount of change and effort.      You may use the binary scanner with the **--ta** option if you want to assess the modernization effort to newer versions Java, Jave EE, or Jakarta EE. Running the binary scanner with the **-ta** option produces an archive file that can be loaded into Transformation Advisor for analysis.      d.  Click on the **Information** label, to review the details of this item.      ![A screenshot of a computer Description automatically generated](./images/media/image112.png)      The **Information** rules provide migration related considerations. Be aware of these rules during testing. Many of these rules relate to connectivity to other resources that need to be considered during migration.      e.  You may review the Information rules for PlantsByWebSphere migration.      ![A screenshot of a computer Description automatically generated](./images/media/image113.png)   6.  Return to the **Cloud Transformation Advisor** browser tab that shows the **plantsbywebsphereee6.ear details** page. Then click on **Inventory Report**, which will open in a new browser tab.      ![A screenshot of a computer Description automatically generated](./images/media/image114.png)      a.  Scroll down and review the Inventory Report, which is especially useful in larger applications.      The **Inventory report** provides a high-level inventory of the content and structure of each application, plus information about potential deployment problems and performance considerations.      ![](./images/media/image115.png)      b.  Scroll down to the bottom of the **Inventory report** and locate **the Contained Archives** section.      The inventory report provides valuable insights into utility jars that are contained in the application. It also provides the \u2018package\u2019 name of the utility jar. This is extremely valuable to help determine what 3<sup>rd</sup> party utilities are used by the application.      c.  Notice the PlantsByWebSphere application contains utility jar named **\u2018pbw-lib\u2019jar**\u2019. The archive package is \u201cibm.com.websphere\u2019, indicating it is NOT a 3<sup>rd</sup> party utility jar.      ![A screenshot of a computer Description automatically generated](./images/media/image116.png)      d.  Return to the **Cloud Transformation Advisor** browser tab that shows the **plantsbywebsphereee6.ear details** page. Then click on **Technology report**, which will open in a new browser tab.      The **Technology report** provides details on which editions of Liberty support the technologies used by the applications.      ![A screenshot of a computer Description automatically generated](./images/media/image117.png)      a.  Scroll down Technology Report, which can quickly help assess which Java EE API technologies that the PlantsByWebSphere application uses, and which editions of Liberty the APIS are available.      ![A screenshot of a computer Description automatically generated](./images/media/image118.png)      b. As you see from the report above, the APIs used in the PlantsByWebSphere application are available in ALL editions of Liberty."},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/","title":"Lab 2161: Rapidly deploy and configure your Java applications with WebSphere Liberty and OpenShift Container Platform","text":""},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#lab-2161-rapidly-deploy-and-configure-your-java-applications-with-websphere-liberty-and-openshift-container-platform","title":"Lab 2161: Rapidly deploy and configure your Java applications with WebSphere Liberty and OpenShift Container Platform","text":"<p>Last updated: March 2024</p> <p>Duration: 60 minutes</p> <p>Need support? Contact Kevin Postreich, Yi Tang</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#overview","title":"Overview","text":"<p>This lab provides fundamental hands-on experience with the modernization process for Java Applications. The focus of this lab is on the practical aspects of application deployment and configurations and not the analysis of the Transformation Advisor results. Other labs cover Transformation Advisor in detail.</p> <p>Upon completion of this lab, you will have gained skills to download and use the Transformation Advisor migration bundle to deploy and configure your application in the following scenarios: </p> <ol> <li> <p>to a locally running WebSphere Liberty - useful for deploying to Liberty in a VM</p> </li> <li> <p>to a container image \u2013 useful for deploying to Kubernetes</p> </li> <li> <p>using the Liberty Operator \u2013 useful for deploying to OpenShift</p> </li> </ol> <p>IBM Cloud Transformation Advisor\u00a0(Transformation Advisor) is an application modernization tool that is entitled through IBM Cloud Pak for Applications and WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. </p> <p>The Transformation Advisor tool provides the following value:</p> <ul> <li> <p>identifies the Java EE programming models in the app</p> </li> <li> <p>determines the complexity of replatforming these apps by listing a high-level inventory of the content and structure of each app</p> </li> <li> <p>Highlights Java EE programming model and WebSphere API differences between the WebSphere runtime profile types</p> <ul> <li>Also from JBoss EAP, Tomcat, Oracle WebLogic</li> </ul> </li> <li> <p>identifies Java EE specification implementation differences that might affect the app</p> </li> <li> <p>generates accelerators for deploying the application to Liberty and containers in a target environment</p> </li> </ul> <p>Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimizes errors and risks and reduces time to market.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#runtime-modernization","title":"Runtime Modernization","text":"<p>Runtime modernization moves an application to a 'built for the cloud' runtime with the least amount of effort. WebSphere Liberty is a fast, dynamic, and easy-to-use Java application server.</p> <p>Ideal for the cloud, Liberty is open sourced, with fast start-up times, no server restarts to pick up changes, and a simple XML configuration.</p> <p>This approach gets the application on to a cloud-ready runtime container which is easy to use and portable.</p> <p>Applications deployed on the WebSphere Liberty container runtime can be built, deployed and managed with the same common technologies and methodologies that would be used by cloud-native (built for the cloud) applications.</p> <p>In this lab, the application will go through the analysis, build, and deploy phases. It is modernized to run on the Liberty runtime and deployed to Red Hat OpenShift Container Platform (OCP), leveraging the deployment artifacts produced by IBM Cloud Transformation Advisor\u2019s migration plan and the webSphere Liberty Operator. </p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#objective","title":"Objective","text":"<p>The objectives of this lab are to:</p> <ul> <li> <p>Learn how to download the application migration bundle and use it to deploy an application to WebSphere Liberty running locally</p> </li> <li> <p>Learn how to fully populate the migration bundle placeholders and build the application into a container image</p> </li> <li> <p>Learn the role of Kustomize when deploying the migration bundle</p> </li> <li> <p>Learn how to deploy your application to OpenShift with a single command</p> </li> <li> <p>Learn how to create multiple configurations for the application and deploy them to OpenShift</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#prerequisites","title":"Prerequisites","text":"<p>The following prerequisites must be completed prior to beginning this lab:</p> <ul> <li> <p>Familiarity with basic Linux commands</p> </li> <li> <p>Have internet access</p> </li> <li> <p>Access to the TechZone lab environment</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#accessing-the-lab-environment","title":"Accessing the lab environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://TBD-to-the-reservation-link</p> <p>The lab environment contains six (6) Linux VMs.</p> <p></p> <ol> <li> <p>Access the lab environment from your web browser.</p> <p>A <code>Published Service</code> is configured to provide access to the <code>Workstation</code> VM through the noVNC interface for the lab environment.</p> <p>a. When the demo environment is provisioned, click on the <code>environment tile</code> to open its details view.</p> <p>b. Click on the <code>Published Service</code> link which will display a <code>Directory listing</code></p> <p>c. Click on the <code>vnc.html</code> link to open the lab environment through the <code>noVNC</code> interface.</p> <p></p> <p>d. Click the <code>Connect</code> button</p> <p></p> <p>e. Enter the password as: <code>passw0rd</code>. Then click the <code>Send Credentials</code> button to access the lab environment.</p> <p>Note: That is a numeric zero in passw0rd</p> <p></p> </li> <li> <p>If prompted to Login to the \"workstation\" VM, use the credentials below:</p> </li> </ol> <p>The login credentials for the workstation\u201d VM is:</p> <ul> <li> <p>User ID: techzone</p> </li> <li> <p>Password: IBMDem0s!</p> </li> </ul> <p>Note: That is a numeric zero in the password</p> <p></p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#tips-for-working-in-the-lab-environment","title":"Tips for working in the lab environment","text":"<ol> <li> <p>You can resize the viewable area using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a. From the environment VM, click on the <code>twisty</code> on the noNC control pane to open the menu.</p> <p></p> <p>b. To increase the visible area, click on <code>Settings &gt; Scaling Mode</code> and set the value to <code>Remote Resizing</code></p> <p></p> </li> <li> <p>You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer.</p> <p>a. Copy the text from the lab guide that you want to paste into the lab environment</p> <p>b. Click the <code>Clipboard</code> icon and <code>paste</code> the text into the noVNC clipboard</p> <p></p> <p>c. Paste the text into the VM, such as to a terminal window, browser window, etc.</p> <p>d. Click on the <code>clipboard</code> icon again to close the clipboard</p> <p>An alternative to using the noVNC Copy / Paste option, you may consider opening the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide without having to use the noVNC clipboard.</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#lab-tasks","title":"Lab Tasks","text":"<p>In this lab, you will use the Transformation Advisor migration bundle to build a container image and deploy an application to a local container for testing.</p> <p>Then you will deploy the application to \u201cdev\u201d and \u201cstaging\u201d environments in OpenShift. </p> <p>You will leverage the WebSphere Liberty Operator, Kustomize (a Kubernetes native configuration management framework), and deployment artifacts generated by IBM Cloud Transformation Advisor\u2019s migration plan via the migration bundle.</p> <p>To simplify the lab and to allow you to focus on the migration bundle, certain software and artifacts have already been put in place for you. These are as follows:</p> <ul> <li> <p>Transformation Advisor has been installed and collected data has been loaded</p> </li> <li> <p>docker (for creating and running images) has been installed</p> </li> <li> <p>oc (OpenShift command Line tool for running OCP commands) has been installed</p> </li> <li> <p>The PlantsByWebSphere Sample Application, built as an Enterprise Archive file (EAR) is available from the lab resource provided.</p> </li> <li> <p>Convenience scripts to streamline tasks will be used to save time and allow you to focus on the value and outcomes, which would ideally be scripted in your environment too.</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#1-execute-lab-tasks","title":"1. Execute Lab Tasks","text":""},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#11-pull-down-the-lab-artifacts-and-setup-lab-environment","title":"1.1 Pull down the Lab artifacts and setup lab environment","text":"<ol> <li> <p>If you have not yet cloned the GitHub repo with the lab artifacts, in a previous lab, run the following command on your terminal:</p> <p>a.  Open a new Terminal window and clone the git repository to pull down the lab artifacts</p> <p></p> <p>b.  Run the commands to clone the git repository to the local system</p> <pre><code>cd /home/techzone\n\ngit clone https://github.com/IBMTechSales/appmod-pot-labfiles.git\n</code></pre> <p>c.  Add \u201cexecute\u201d permissions to the shell scripts</p> <pre><code>find ./appmod-pot-labfiles -name \"\\*.sh\" -exec chmod +x {} \\\\;\n</code></pre> </li> <li> <p>Run the provided shell script to setup the lab environment.</p> <p>The lab-setup.sh script moves files from the cloned git repo to a student directory used in the lab.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./lab-setup.sh\n</code></pre> <p>When complete, you will see the following output</p> <p>==========================</p> <p>lab-setup script completed</p> <p>==========================</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#12-launch-transformation-advisor-local","title":"1.2 Launch Transformation Advisor (local)","text":"<p>Transformation Advisor provides a <code>migration plan</code> for each application being assessed for modernization. The migration plan includes a <code>migration bundle</code> of generated artifacts that accelerate the deployment of applications to Liberty in containers and Kubernetes / OpenShift.</p> <p>The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Container image into an OpenShift container platform.</p> <p>The Transformation Advisor is installed locally on the Workstation VM. </p> <ol> <li> <p>Launch the Transformation Advisor tool using the steps below.</p> <p>a.  From Workstation VM Desktop Tool Bar, click the <code>Terminal</code> icon to open a Terminal window.</p> <p></p> <p>b.  Launch the Transformation Advisor with commands:</p> <pre><code>cd /home/techzone/transformation-advisor-local-3.8.1\n\n./launchTransformationAdvisor.sh\n</code></pre> <p>Wait for Transformation Advisor to initialize and display the action menu list.</p> <p>c.  Type <code>5</code> and press <code>Enter</code> to \u201cStart\u201d the Transformation Advisor.</p> <p></p> <p>The Transformation Advisor application is started, <code>right-click</code> the application URL link and select <code>Open Link</code> to launch it in a web browser window.</p> <p>The URL is displayed in the output from the TA command: http://server0.gym.lan:3000</p> <p></p> <p>The Transformation Advisor Home page is displayed in the Web Browser.</p> <p></p> <p>In the next section, you will create a new \u201cWorkspace\u201d in Transformation Advisor and upload the saved results from the scan of a WebSphere Application Server that has a single application deployed, named \u201cPlantsByWebSphere\u201d.</p> <p>The Transformation Advisor workspace is where the detailed analysis of application modernization is provided.</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#13-create-new-workspace-and-upload-scan-results-from-a-websphere-application-server","title":"1.3 Create new workspace and upload scan results from a WebSphere Application Server","text":"<p>In this section, create a new workspace named 'proof_of_concept'.</p> <p>A workspace is a designated area that will house the migration recommendations provided by Transformation Advisor based on the Data Collector scan results of your application server environment.</p> <ol> <li> <p>Create a new workspace named proof-of-concept</p> <p>a.  From the Transformation Advisor Home page, click the <code>Create New</code> button</p> <p>b.  Type <code>proof_of_concept</code> as the Workspace name. Then click the <code>Create</code> button</p> <p></p> </li> <li> <p>Upload an existing 'scan results' file provided for the lab.</p> <p>The scan results file is provided for you.</p> <p>It was produced by running the Transformation Advisor Data Collector on a WebSphere Application Server that had the PlantsByWebSphere application deployed.</p> <p>a. Click the <code>Upload</code> button</p> <p>b. Click the <code>Drop or add file</code> link. Then click the <code>Upload</code> button</p> <p></p> <p>c.  Navigate to Home &gt; Techzone &gt; appmod-pot-labfiles &gt; labs &gt; RuntimeModernization</p> <p>d.  Select <code>pbw-collection.zip</code> file. Then click the <code>Open</code> button</p> <p></p> <p>e. Once the pbw-collection.zip has been added, click on the <code>Upload</code> button to upload the results into Transformation Advisor.</p> <p></p> <p>After a few moments, the application data will be uploaded to the Transformation Advisor UI.</p> <p>The proof-of-concept workspace contains data for a single app that is being used as a test case. We will now review this application in Transformation Advisor.</p> <p>The PoC workspace displays the \u201cAll Java Applications\u201d page which shows the recommendations for the workspace.</p> <p>There is a single application called plantsbywebsphereee6.ear. </p> <p>By default, WebSphere Liberty is selected as a modernization target. All the information provided assumes that this application will be modernized to WebSphere Liberty.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#14-analyze-the-plantsbywebsphereee6-application","title":"1.4 Analyze the plantsbywebsphereee6 application","text":"<p>Transformation Advisor provides detailed information about each application that has been analyzed. This application has a complexity of <code>Simple</code>.</p> <p>Simple means:</p> <ul> <li>The application is ready to be deployed to WebSphere Liberty</li> <li>No changes to the source code are required</li> </ul> <p>Note: We will describe some of the other information displayed in Transformation Advisor later in the lab.</p> <p></p> <p>How is this application ready for deployment when it shows 4 issues?</p> <p>In this case, the application has four <code>Informational</code> issues.</p> <p>Informational issues do not prevent the application from executing on the new runtime (WebSphere Liberty) but there may be small changes in the application\u2019s behavior.</p> <p>If unexpected behavior is found during testing, then reviewing these Informational issues may help explain what is happening.</p> <ol> <li> <p>We are now ready to review the 'migration plan' for this application. </p> <p>a. Click on the <code>Migration plan</code> link at the end of the row of the plantsbywebsphereee6.ear application.</p> <p></p> <p>b.  The Migration Plan page opens.</p> <p>This page contains a summary of the application being migrated:</p> <ul> <li> <p>a preview of the files that will help during deployment (highlighted below)</p> </li> <li> <p>a list of the application\u2019s dependencies.</p> </li> </ul> <p>All the files can be downloaded in a single convenient migration bundle.</p> <p></p> </li> <li> <p>At the bottom of the screen, there is a <code>Appliction Dependencies</code> section. </p> <p>This shows all the files, in addition to the application, that are required for a deployment. Plantsbywebspheeee6.ear has two dependencies.</p> <p>a. Expand the section it to see the details</p> <p>b. In this case, DB2 drivers called db2jcc.jar and db2cc_licence.jar are required for deployment</p> <p></p> </li> <li> <p>Download the migration bundle by clicking the <code>Download</code> button in the bottom right. Then click <code>Save</code> in the \"Linux Save File\" window.</p> <p>A zip file named \u201cplantsbywebsphereee6.ear_migrationBundle.zip\u201d will download to your Download folder.</p> <p></p> </li> </ol> <p>We will go through a step-by-step process of using the Transformation Advisor migration bundle to deploy plantsbywebsphereee6.ear as follows:</p> <ul> <li> <p>Ensure the application can run locally on WebSphere Liberty</p> </li> <li> <p>Build an immutable container image running on WebSphere Liberty</p> </li> <li> <p>Ensure the application can run locally on WebSphere Liberty in a container</p> </li> <li> <p>Deploy the image to OpenShift \u201cdev\u201d environment (and configure it) using a single command</p> </li> <li> <p>Redeploy and reconfigure the image for a \u201cstaging\u201d environment with a single command</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#15-deploy-plantsbywebsphere-app-to-a-locally-running-websphere-liberty","title":"1.5 Deploy PlantsByWebSphere app to a locally running WebSphere Liberty","text":"<p>In this lab environment, WebSphere Liberty is installed locally on the Workstation VM.</p> <p>In this step, you will create a new Liberty server to run the PlantsByWebSphere application.</p> <p>Then you will review the <code>placeholder files</code> in the Transformation Advisor bundle to see the dependency files that need to be copied into the Liberty Server.</p> <p>Then you will use the <code>server.xml</code> file generated by Transformation Advisor, and included in the migration bundle, to configures the Liberty erver for the application.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#151-create-a-local-liberty-server","title":"1.5.1   Create a local Liberty Server","text":"<ol> <li> <p>From <code>Terminal</code> window, create a new local WebSphere Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server create pbwserver\n</code></pre> <p>output:</p> <pre><code>Server pbwserver created.\n\n[techzone@server0 wlp]$ bin/server start pbwserver\n</code></pre> </li> <li> <p>From the Terminal window, start the local WebSphere Liberty server.</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> <p>Output:</p> <pre><code>Starting server pbwserver.\n\nServer pbwserver started with process ID #####\n</code></pre> </li> <li> <p>Confirm the local WebSphere Liberty server is running. Open your web browser, open a new browser tab. Then go to: http://localhost:9080</p> <p></p> </li> <li> <p>Currently, the PlantsByWebSphere application is NOT deployed to the Liberty server. Furthermore, the Liberty server is NOT configured to run the application. </p> <p>a. From the web browser, attempt to reach the application:</p> <p>http://localhost:9080/PlantsByWebSphere</p> <p>You will receive the message that the \u201cContext Root Not Found\u201d. This is expected as the application is not yet deployed to the Liberty server.</p> <p> </p> </li> <li> <p>From the Terminal window, <code>stop</code> the WebSphere Liberty server named \u2018pbwserver\u201d, so that we may configure Liberty for the PlantsByWebSphere application.</p> <pre><code>/home/techzone/wlp/bin/server stop pbwserver\n</code></pre> <p>output:</p> <pre><code>Server pbwserver stopped.\n</code></pre> </li> </ol> <p> </p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#152-review-the-placeholder-files-in-the-migration-bundle","title":"1.5.2  Review the placeholder files in the migration bundle","text":"<p>In this section, you will review the migration bundle to see what files need to be added to the configuration. </p> <p>Then you will use the provided Liberty configuration file,  <code>server.xml</code>, to configure the Liberty server.</p> <p>The <code>server.xml</code> file is used to configure Liberty by providing values for ports, security, context routes and by providing application-specific configuration such as access to application data sources.</p> <ol> <li> <p>Explode the migration bundle zip file that you downloaded.</p> <pre><code>mkdir /home/techzone/Downloads/pbw-bundle\n\ncd /home/techzone/Downloads/pbw-bundle\n\nunzip -d /home/techzone/Downloads/pbw-bundle /home/techzone/Downloads/plantsbywebsphereee6.ear\\_migrationBundle.zip\n</code></pre> </li> <li> <p>Let\u2019s make note of the 3 <code>placeholder files</code> that are placed in the <code>migration bundle</code>.</p> <p>These are convenient references to let you know which files you will need to copy to the Liberty server.</p> <p>Note: You will fully populate the migration bundle in later steps.</p> <p>a.  From the Terminal window, list the files in the \u201ctarget\u201d directory in the migration bundle.</p> <pre><code>ls  ./target\n</code></pre> <p></p> <p>The target directory contains the placeholder file for the PlantsByWebSphere application EAR deployment file. This is a reminder that you need to copy the PlantsByWebSphere EAR file the Liberty server.</p> <p>b.  List the files in the Navigate to the \u201csrc/main/liberty/lib\u201d directory in the migration bundle</p> <pre><code>ls  ./src/main/liberty/lib\n</code></pre> <p></p> <p>The src/main/liberty/lib directory contains the placeholder files for the DB2 database libraries required by the application. This is a reminder that you need to copy the DB2 libraries to the Liberty server.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#153-configure-the-libery-server-for-plantsbywebsphere","title":"1.5.3   Configure the Libery server for PlantsByWebSphere","text":"<p>In this section, you will copy the required dependency files and server configuration to the Liberty server.</p> <ul> <li> <p>Copy the DB2 libraries to the directory defined in the DB2 driver configuration in the server.xml file.</p> </li> <li> <p>Copy the PlantsByWebSphere EAR file to the \u201capps\u201d directory of the Liberty server</p> </li> <li> <p>Copy the server.xml file from the migration bundle to the Liberty server, replacing the default server.xml file</p> </li> </ul> <p>To facilitate executing the steps above, we have provided a <code>convenience shell script</code> that creates the required directories and copies the files to the Liberty server.</p> <p>You will run the script, which will prompt you to press \u201cEnter\u201d key before executing each of the commands in the script. This allows you to examine the command, while avoiding having to perform mundane copy/paste activities in the lab.</p> <ol> <li> <p>Run the following command to configure the Liberty server as noted above.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scipts\n\n./local-liberty-config.sh -i\n</code></pre> <p>Note: The \u201c<code>-i</code>\u201d parameter tells the script to run in interactive mode, prompting you to press the <code>Enter</code> key to run the command shown.</p> <p>Note: The script also ensures the Liberty server is stopped, and performs any necessary cleanup of the Liberty server, in the event you need to rerun the script for some unknown reason.</p> <p>a.  Step 1: Create a new directory where the migration bundle will be extracted</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p></p> <p>b.  Step 2: Unzip the migration bundle, replacing the one you had previously extracted in the lab</p> <p></p> <p>c.  Step 3: create the \"lib/global\" directory in Liberty server, where the DB2 libraries will be copied. This directory matches the location defined in the server.xml</p> <p></p> <p>d.  Step 4: Copy the DB2 driver libraries to Liberty server's \"lib/global\" directory</p> <p></p> <p>e.  Step 5: Copy the PlantsByWebSphere application EAR file to Liberty server. The EAR is copied to the \u201capps\u201d directory of the server.</p> <p></p> <p>f.  Step 6: Copy the server.xml file from the migration bundle to the Liberty server. This replaces the existing default server.xml that was created when you created the server.</p> <p></p> <p>g.  The script is complete.</p> <p></p> </li> <li> <p>From a Terminal window, <code>start</code> the Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> </li> <li> <p>Rerun the PlantsByWebSphere application from the browser.</p> <pre><code>http://localhost:9080/PlantsByWebSphere\n</code></pre> <p>Now the application is running in Liberty, and the main page is displayed.</p> <p></p> </li> <li> <p>Attempt to click on any of the tabs: \u201cFlowers\u201d, Fruits &amp; Vegetables\u201d, or \u201cTrees\u201d.</p> <p>These pages display a catalog of items in their respective category, which are rereived from the application database. </p> <p>Note the exception. This is an expected erorr. The issue is in the JPA persistence (Database access). A user is not defined, and therefore authentication to the database failed.</p> <p></p> <p>So what happened? </p> <p>Transformation Advisor does not collect any <code>sensitive data</code> for the application server.  This means the application-specific configuration information in the server.xml file has not been set. In this case, the <code>username</code> and <code>password</code> to access the database are missing.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#154-review-the-serverxml-file","title":"1.5.4   Review the server.xml file","text":"<p>Now we will review the <code>server.xml</code> file and set the necessary configuration information. </p> <p>The server.xml file defines a set of <code>features</code> that the application requires. By importing only the necessary features to support the application\u2019s API needs, the footprint of the deployed application and Liberty server is kept as small as possible.</p> <ol> <li> <p>Review the server.xml file</p> <p>Using the \u201c<code>gedit</code>\u201d editor in a <code>Terminal</code> window, open the server.xml file located in the Liberty server</p> <pre><code>gedit /home/techzone/wlp/usr/servers/pbwserver/server.xml\n</code></pre> <p>a. Section 1 contains the <code>features</code> that the application requires, and these are discovered automatically during analysis performed during data collection.</p> <p></p> <p>b Section 2: Defines the <code>resources</code> required to access the database</p> <ul> <li> <p>The <code>authdata</code> defies the BD2 user and password that is used by the datasources. These refer to variables that are defined in the server.xml file.</p> </li> <li> <p>The <code>jdbc</code> driver defines the required libraries. These are the libraries you copied into this location via the script</p> </li> </ul> <p></p> <p>c. Section 3: The <code>datasource</code> contains all the information required to access the database: Database user, password, database name, host, and port number.</p> <p></p> <p><code>Variables</code> in the server. The variables in the server.xml file is divided into two parts:</p> <p>d. Section 4 contains the variables for the <code>non-sensitive configuration data</code>. For example, the port to run the server on. The values of these variables are collected by Transformation Advisor.</p> <p></p> <p>e. Section 5 contains the <code>sensitive data variables</code>. </p> <p>You can see that the values for these variables are all blank, as this information is never collected by Transformation Advisor.</p> <p></p> </li> <li> <p>The reason that the PlantsByWebSphere application retuned an \u201cException\u201d is because the values for the sensitive variables has not been set. </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#155-update-the-serverxml-and-retest-the-plantsbywebsphere-application","title":"1.5.5   Update the server.xml and retest the PlantsByWebSphere application","text":"<ol> <li>From the <code>gedit</code> editor, update the values in the server.xml file for the sensitive data as illustrtated below:</li> </ol> <p>a  Set the default value for rhel9_baseNode01_pbwuser_password to: <code>db2inst1-pwd</code></p> <p>b. Set the default value for rhel9_baseNode01_pbwuser_user to: <code>db2inst1</code></p> <pre><code>c. **`Save`** and **`close`** the server.xml in the editor\n\n![](./images/media/image44.png)\n</code></pre> <ol> <li> <p>Reload and test PlantsByWebSphere application in the browser</p> <pre><code>http://localhost:9080/PlantsByWebSphere\n</code></pre> <p>a.  Click the <code>HOME</code> link on the PlantsByWebSphere application. This will cause the application to clear its cache.</p> <p>Note: Liberty automatically updates when the server.xml file is changed. You do not need to restart the server.</p> <p>Note: The PlantsByWebSphere application caches data, including the data access credentials. Clicking, the \u201cHOME\u201d link in the application causes the application to clear its cache. Otherwise, you will continue to see the database access exceptions when attempting to access the catalog of items from the database.</p> <p>b. Click the \u201cFlowers\u201d tab. The catalog of flowers should now be displayed.</p> <p></p> </li> <li> <p>From a Terminal window, <code>Stop</code> the Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server stop pbwserver\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#16-create-and-run-plantsbywebsphere-as-a-container-image","title":"1.6 Create and run PlantsByWebSphere as a container image","text":"<p>In the previous section, you used server.xml to get your application running on a local Liberty instance. This was to show you how the Transformation Advisor server.xml file is used. If you are moving to Liberty in VMs as your new runtime, then you are done! </p> <p>If containers are to be your final destination, this section explores the Transformation Advisor migration bundle artifacts that accelerate application deployennt to Lberty in containers. </p> <p>In the case of <code>Simple</code> applications, it is not necessary to carry out a separate step of deploying to a local Liberty instance at all. Instead, by using the Transformation Advisor migration bundle, you can deploy your application to Liberty running in a container all in one go. This is what we will do now.</p> <p>For this section of the lab, the migration bundle has already been updated as follows:</p> <ul> <li> <p>The PlantsByWebSphere EAR file has been added to the migration bundle. And its placeholder has been removed</p> </li> <li> <p>The DB2 libraries have been added to the migration bundle, and the placeholders have been removed</p> </li> <li> <p>The server.xml file is configured with default values for the database access</p> </li> </ul> <p> </p> <ol> <li> <p>Explore the migration bundle files that we added in place of the <code>placeholder</code> files</p> <p>a.  List the <code>target</code> directory of the migration bundle, where the PlantsByWebSphere EAR file was added</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/target\n</code></pre> <p></p> <p>b. List the <code>src/main/liberty/lib</code> directory of the migration bundle, where the DB2 libraries were added</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/src/main/liberty/lib\n</code></pre> <p></p> <p>c. List the <code>src/main/liberty/config</code> directory of the migration bundle, where the server.xml file is located</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/src/main/liberty/config\n</code></pre> <p></p> </li> <li> <p>The <code>migration bundle</code> is now ready to be used to generate an image of your application running on WebSphere Liberty. To do this, we will use the <code>Containerfile</code> that comes with the migration bundle.</p> <p></p> <p>a. Explore the COntainerfile in the migration bundle</p> <pre><code>gedit /home/techzone/Student/labs/appmod/pbw-bundle-complete/Containerfile\n</code></pre> <ul> <li>The FROM statements in the Containerfile pull in existing images that are already available. </li> </ul> <p>In this case the Containerfile pulls in <code>Open JDK 8</code> and the 23.0.0.12 version of <code>WebSphere Liberty</code>.</p> <p>Note: The Containerfile has been modified for this lab to pull <code>23.0.0.12</code> of <code>WebSphere Liberty</code>. By default, it pulls the latest WebSphere Liberty.</p> <p></p> <p></p> <ul> <li>The RUN commands in the Containerfile create the necessary folder structures and copies the <code>binary files</code> from the migration bundle into the appropriate locations in the image.</li> </ul> <p></p> <ul> <li>There are several lines in the file that have been commented out. </li> </ul> <p>By default, the Containerfile assumes that your application is available as a binary file. However, it can also be used to build your application from source code. The full details of how to do this can be found in README.md in the migration bundle.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#161-setup-build-and-run-plantsbywebsphere-in-a-local-container","title":"1.6.1 Setup, build and run PlantsByWebSphere in a local container","text":"<p>For the PlantsByWebSphere application to run in a local container, it requires access to the application database. The database runs in its own container. For the application to connect to the database, the database container and the application must be connected to the same local Docker network.</p> <p>In this lab, the steps to build, setup, and run the PlantsByWebSphere application in a local container are:</p> <ol> <li> <p>Ensure the DB2 application database is running</p> </li> <li> <p>Create a local Docker network</p> </li> <li> <p>Ensure the Docker network is created</p> </li> <li> <p>Connect the DB2 database container to the Docker network</p> </li> <li> <p>Build and tag the application container image</p> </li> <li> <p>Start the application in the container</p> </li> </ol> <p>To facilitate executing the steps above, we have provided a <code>convenience shell script</code> that performs these steps.</p> <p>You will run the script, which will prompt you to press \u201cEnter\u201d key before executing each of the commands in the script. This allows you to examine the command before they are executed, while avoiding having to perform mundane copy/paste activities in the lab.</p> <ol> <li> <p>Run the following command to setup, ,build, and run the PlantsByWebSphere application in a local container.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scipts\n\n./build-container -i\n</code></pre> <p>Note: The <code>-i</code> parameter tells the script to run in interactive mode, prompting you to press <code>Enter</code> key to run the command shown.</p> <p>Note: The script also performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.</p> <p>a.  Step 1: Start the DB2 application database</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p></p> <p>b.  Step 2: Create a Docker network named \u2018pbw-network\u2019</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p></p> <p>c.  Step 3: Ensure the Docker network named \u2018pbw-network\u2019 is created</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p></p> <p>d.  Step 4: Connect the DB2 container to the \u2018pbw-network\u2019 network</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p></p> <p>e.  Step 5: Build the container image and tag it as \u2018/apps/pbw\u2019</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p></p> <p>f.  Step 6: Start a container using the newly build image</p> <p>Examine the command. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p>Note: The <code>docker run</code> command contains a few parameters that are defined below: :</p> <p>-d : start the container in detached mode. This is just for convenience</p> <p>-p : expose the applications HTTP and HTTPS ports</p> <p>--network : connect the container to the Docker network that the DB2 database is connected</p> <p>--rm : remove the container when the container is stopped. This is just for convenience</p> <p></p> </li> <li> <p>Check that the container is up and running.</p> <pre><code>docker ps | grep pbw\n</code></pre> <p></p> </li> <li> <p>From the browser, access the PlantsByWebSphere application that is running in the local container</p> <pre><code>http://server0.gym.lan:9080/PlantsByWebSphere\n</code></pre> <p></p> <p>And view the catalog of <code>Flowers</code>, which are retrieved from the database.</p> <p></p> </li> <li> <p><code>Stop</code> the PlantsByWebSphere container</p> <pre><code>docker stop pbw\n</code></pre> </li> </ol> <p>Considerations and recommendations:</p> <p>In the section of the lab you just completed, running the application in a local container, we updated the server.xml by adding the sensitive data values for the database access, that Transformation Advisor did not collect, and we bult it into the image.</p> <p>However, a big part of container image value is that they are <code>immutable</code>. No matter where you take and deploy the image, the operating system, runtime, security patch level, etc. will be the same. This gives you great reproducibility and gets away from the classic \"but it works for me!\" issue.</p> <p>We lose much of this value if we bake in the configuration with the image, as we will have to produce an image for each new configuration.</p> <p>Instead of using the exact same image in each of your development, staging and production environments, you would be using different images. </p> <p>It is never best practice to hard code configuration into your image.</p> <p>Recommendation:</p> <p>In the next section, we will look at how the migration bundle helps you manage this configuration easily across all your environments and how it will simplify deployment to your OpenShift cluster. The migration bundle uses <code>Kustomize</code> to help achieve this.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#17-explore-how-kustomize-is-used-in-the-migration-bundle","title":"1.7 Explore how Kustomize is used in the migration bundle","text":"<p><code>kustomize</code> is simple way to manage configuration across all your different deployments and environments without the need for templates.</p> <p>By using <code>overlays</code>, it allows you to break out your basic configuration information (ports, names, hosts, etc.) from your sensitive data (usernames, password, etc.) that are likely to change in every deployment.</p> <p>Every kustomize artifact is plain <code>YAML</code> and can be validated and processed in a standardized way. Plus, it makes them very human readable! It is natively built into kubectl and the OpenShift client.</p> <ol> <li> <p>From a <code>Terminal</code> window, list the contents of the <code>deploy</code> folder of the migration bundle</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy\n</code></pre> <p></p> <p>a.  There are two folders.</p> <ul> <li> <p>k8s : contains files to accelerate deployment into Kubernetes. These help to create routes, services, and deployments. We will focus on deployment to OpenShift with kustomize in this lab.</p> </li> <li> <p>kustomize :contains the files for deployment using kustomize.</p> </li> </ul> </li> <li> <p>Go to the <code>Kustomize</code> folder located under the <code>deploy</code> directory </p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n</code></pre> </li> <li> <p>Examine the structure of the kustomize folder:</p> <p>a.   Base:</p> <ul> <li> <p>contains the <code>Kustomization.yaml</code> that describes the resources managed by Kustomize</p> </li> <li> <p>contains the <code>application.cr-yaml</code> This is the WebSphere Liberty operator custom resource file that will execute the deployment and mount the necessary secrets and configuration that are created from the secret file and config map file. </p> </li> </ul> <p>b.  Overlays:</p> <ul> <li> <p>contains all your different deployment configurations.</p> </li> <li> <p>In this case, only a single deployment has been created for your <code>dev</code> systems.</p> </li> </ul> <p>c. Obverlays/dev</p> <ul> <li> <p>The <code>config map yaml file</code> will contain all your application-specific non-sensitive data that will be created as configMaps in OpenShift.</p> </li> <li> <p>The <code>secret yaml file</code> will contain all your application-specific sensitive data that will be created as secrets in OpenShift.</p> </li> <li> <p>Optionally contain additional yaml files that override configuration in the <code>base</code> configuration.</p> </li> </ul> <p></p> </li> </ol> <p>Note: In the next section we will use this kustomize structure to deploy your application image.</p> <p>Further information on kustomize can be found at http://kustomize.io</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#18-deploy-to-openshift-with-config","title":"1.8 Deploy to OpenShift with config","text":"<p>From the previous sections in the lab, you have an <code>immutable container image</code> built. </p> <p>In this section, you will push that image to an image registry and then deploy it into OpenShift \u201cdev\u201d project, along with its configuration, with a single command, using the <code>WebSphere Liberty Operator</code> and <code>Kustomize</code>.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#181-deploy-the-application-to-the-openshift-dev-environment","title":"1.8.1 Deploy the application to the OpenShift \u201cdev\u201d environment","text":"<p>In this section, you will deploy the PlantsByWebSphere application to OpenShift \u201cdev\u201d project using the generated deployment artifacts in the migration bundle.</p> <p>The application uses a DB2 database that contains a catalog of items used for the \u201ddev\u201d environment.</p> <p>Note: After you deploy the application to the dev environment in OpenShift, you will explore and examine the Liberty Operator and Kustomize yaml artifacts in the migration bundle, which are used to deploy the application.</p> <p>Deploying the PlantsByWebSphere application and its configuration to OpenShift is easily accomplished using a single command.</p> <p>However, in this labd, before you can deploy the application to OpenShift, the container image must be propery tagged and pushed to an image registry. In this lab, we use the OpenShift Internal registry.</p> <p>The following steps need to be performed, and will be done using a <code>convemience script</code> that is provided for this lab. </p> <ul> <li> <p>Tag the container image for pushing to the OpenShift Internal Registry</p> </li> <li> <p>Login to OpenShift</p> </li> <li> <p>Create the \u201cdev\u201d project where the application will be deployed</p> </li> <li> <p>Login to the OpenShift internal registry</p> </li> <li> <p>Push the container image to the registry</p> </li> <li> <p>Deploy the application and it configuration to OpenShift \u201cdev\u201d project</p> </li> </ul> <p>To streamline executing the steps above, we have provided a <code>convenience shell script</code> that performs the steps.</p> <p>You will run the script, which will prompt you to press <code>Enter</code> key before executing each of the commands in the script. This allows you to examine the command before they are executed, while avoiding having to perform mundane copy/paste activities in the lab.</p> <ol> <li> <p>Run the following command to tag and push the PlantsByWebSphere container image to the OpenShift internal registry and deploy the application to the dev\u201d project.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./dev-deploy-pbw-ocp.sh -i\n</code></pre> <p>Note: The <code>-i</code> parameter tells the script to run in interactive mode, prompting you to press <code>Enter</code> key to run the command shown.</p> <p>Note: The script also performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.</p> <p>a.  Step 1: Tag the PlantsByWebSphere container image for pushing to the OpenShift internal registry</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>b.  Step 2: Login to OpenShift</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>c.  Step 3: Create the \u2018dev\u2019 project in OpenShift, where the application will be deployed</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>d.  Step 4: Switch to the \u2018dev\u2019 project, where subsequent OCP commands in the script will be executed.</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>e. Step 5: Login to the OpenShift internal registry, so we can push the PlantsByWebSphere image. Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>f. Step 6: Push the PlantsByWebSphere container image to the OpenShift interna image registry.</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>g. Step 7: List the Image Stream and see that it is available.</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>h. Step 8: Deploy the PlantsByWebSphere application and its configuration to the \u2018dev\u2019 project.</p> <p>Examine the command. Then press the <code>Enter</code> key** when you are ready for the script to execute the command for you.</p> <p></p> <p>i. Step 9: List the new \u2018deployment\u2019 and see that it is available.</p> <p></p> <p>j. Step 10: List the PlantsByWebSphere \u2018pod\u2019 and see that it is ready.</p> <p></p> <p>k. Step 11: Show the \u2018route\u2019 to the PlantsByWebSphere application running in the \u2018dev\u2019 project.</p> <p></p> <p>When the script completes, you will see the PlantsByWebSphere Route shown.</p> <p></p> </li> <li> <p>From the browser, navigate to the PlantsByWebSphere route:</p> <pre><code>http://plantsbywebsphereee6-dev.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> <p>Optionally, you can use <code>Right-mouse click</code> on the <code>PlantsByWebSphere URL</code> in the Terminal window and select <code>open Link</code>. This will launch the application in the web browser.</p> <p></p> </li> <li> <p>The PlantsByWebSphere main page is displayed.</p> <p></p> </li> <li> <p>Click on the <code>Trees</code> category and view the trees that are loaded in the \u2018dev\u2019 environment database.</p> <p>This catalog of trees was retrieved from the DB2 database in the <code>dev</code> environment.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#182-review-the-dev-overlay-configuration-that-was-used-to-deploy-the-application-and-configuration","title":"1.8.2 Review the \u201cdev\u201d overlay configuration that was used to deploy the application and configuration","text":"<p>The <code>overlays/dev</code> directory contains configuration that is specific and unique for the <code>dev</code> deployment.</p> <ol> <li> <p>Examine and understand how to configure the sensitive data as Kubernetes secrets</p> <p>a. From a <code>Terminal</code> window, navigate to the 'secrets' yaml file in the 'dev'overlay folder in the migration bundle</p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n\ncat overlays/dev/plantsbywebsphereee6-secret.yaml\n</code></pre> <p></p> <p>Notice that we already inserted the DB2 database <code>user</code> and <code>password</code> in the yaml file that configures the sensitive data in a Kubernetes secret.</p> <p>Note: Data in this file is REQUIRED to be bese64 encoded.</p> <p>b. <code>How did we encode the values?</code> </p> <p>To update the migration bundle with the sensitive data, we Base64 encoded the values as illustrated below.</p> <ul> <li>We encoded the following values:</li> </ul> <ul> <li> <p>user: db2inst1</p> <p>echo db2inst1 | base64</p> </li> </ul> <p>The encoded value is: ZGIyaW5zdDEK</p> <ul> <li> <p>password: db2inst1-pwd</p> <p>echo db2inst1-pwd | base64</p> </li> </ul> <p>The encoded value is: ZGIyaW5zdDEtcHdkCg==</p> </li> <li> <p>From a Terminal window, examine the <code>application-cr.yaml</code></p> <p>The <code>application-cr.yaml</code> is the WebSphere Liberty custom resource used to deploy the PlantsByWebSphere application.</p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n\ncat base/application-cr.yaml\n</code></pre> <p>a.  In this lab, we chose to override the application image, as we will push the same immutable image to different namespaces in OpenShift. </p> <p>Therefore, following the rules of Kustomize, the applicationImage definition in the application-cr.yaml is \u201cblank\u201d. It is overridden in overlays/dev.</p> <p></p> <p>b.  The <code>secret</code> and <code>configmap</code> references pull in the server configuration as <code>environment variables</code>.</p> <p></p> <p>c.  For this lab, we do not have transport level security enabled.</p> <p></p> <p>d.  We must accept the license.</p> <p></p> <p>e.  <code>Close</code> the <code>gedit</code> editor. DO NOT SAVE ANY CHANGES TO THE FILE!</p> </li> <li> <p>From a Terminal window, examine the <code>config map</code> for the <code>dev</code> deployment</p> <p>The <code>plantsbywebsphereee6-configmap.yaml</code> contains the variables defined in the <code>server.xml</code>.</p> <p>All values defined in the configMap are created as environment variable in the container. These environment variables override any default values that may have been set in the server.xml.</p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n\ngedit overlays/dev/plantsbywebsphereee6-configmap.yaml\n</code></pre> <p>a. This configuration overrides the database server name. It references the application database server for the \u201cdev\u201d environment.</p> <p></p> <p>b.  <code>Close</code> the \u201cgedit\u201d editor. DO NOT SAVE AY CHANGES TO THE FILE!</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#183-explore-the-websphere-liberty-operator-in-openshift","title":"1.8.3 Explore the WebSphere Liberty Operator in OpenShift","text":"<p>In this section, you will take a look at the WebSphere Liberty Operator in the OpenShift console to see what has been deployed.</p> <ol> <li>Login to OpenShift console</li> </ol> <p>a.  Open a new tab in the web browser</p> <p>b.  Click on the <code>OpenShift Console</code> bookmark on the bookmark toolbar</p> <p>c.  Login credentials:</p> <ul> <li> <p>Username: <code>ocadmin</code></p> </li> <li> <p>Password: <code>ibmrhocp</code></p> </li> </ul> <ol> <li> <p>View the IBM WebSphere Liberty <code>Operator</code></p> <p>a.  Click on <code>Operators &gt; Installed Operators</code> in the left-hand menu</p> <p>b.  Type <code>Liberty</code> in the filter</p> <p>c.  Click on <code>IBM WebSphere Liberty</code></p> <p></p> </li> <li> <p>View the WebSphereLibertyApplication <code>Deployment</code></p> <p>a.  Click on the tab called <code>WebSphereLibertyApplication</code></p> <p></p> <p>b. You will see the plantsbywebsphereee6 application listed in the \u2018dev\u2019 namespace</p> <p>b. Click on the link called <code>plantsbywebsphereee6</code> under the Name column</p> <p></p> <p>c.  Select the <code>Resources</code> tab</p> <p></p> <p>d. Select the link for the <code>Deployment</code></p> <p></p> <p>e. The PlantsByWebSphere deployment has one <code>pod</code> running</p> <p></p> </li> <li> <p>View the WebSphereLibertyApplication <code>Route</code></p> <p>a.  Return to the plantsbywebsphereee6 operator page</p> <p></p> <p>b.  Click the <code>Resources</code> tab</p> <p></p> <p>c.  Select the link of Kind: <code>route</code></p> <p></p> <p>d.  Click on the <code>Location</code> link for the route</p> <p></p> <p>e.  The Welcome to Liberty page is displayed.</p> <p></p> <p>f.  Append the context root \u2018PlantsByWebSphere\u2019 to access the PlantsByWebSphere application</p> <pre><code>http://plantsbywebsphereee6-dev.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#19-re-deploy-plantsbywebsphere-to-the-staging-environment-in-openshift","title":"1.9 Re-deploy PlantsByWebSphere to the \u2018staging\u2019 environment in OpenShift","text":"<p>You have deployed the PlantsByWebSphere application with its configuration, to a \u2018dev\u2019 environment, using a single kustomize command.</p> <p>In this section, you will deploy the same application again, with a different configuration, to a \u2018staging\u2019 environment, using a single kustomize command with a different overlay configuration called 'staging'. </p> <p>To do this, we need to do the following:</p> <ul> <li> <p>Copy the \u2018dev\u2019 overlays yaml files to a new overlays folder. We will name it \u2018staging\u2019.</p> </li> <li> <p>Update the environment specific configuration in the new \u2019staging\u2019 overlays folder.</p> </li> </ul> <p>Note: </p> <p>For this section of the lab, the PlantsByWebSphere application that you deploy to the \u2018staging\u2019 environment will access a different DB2 database than was used in the \u2018dev\u2019 environment.</p> <p>It is typical to use different databases as the application is promoted to higher environments that support different phases of testing to production.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#191-setup-and-exaamine-the-staging-deployment-configuration","title":"1.9.1 Setup and exaamine the 'staging' deployment configuration","text":"<p>In this lab, the \u2018staging\u2019 database has a different set of \u2018Trees\u2019 loaded in the catalog, compared to the \u2018dev\u2019 database.</p> <p>While in a real environment, the different databases might use different database access credentials, in this lab environment, the credential remain the same as the \u2018dev\u2019 database.</p> <p>What are the configuration changes between the \u2018dev\u2019 and \u2018staging\u2019 environments in this lab scenario?</p> <ul> <li>The database server hostname is different between \u2018dev\u2019 and \u2018staging\u2019.</li> </ul> <p>What is staying the same between the \u2018dev\u2019 and \u2018staging\u2019 deployment?</p> <ul> <li> <p>The same immutable container image for PlantsByWebSphere application is used in \u2018dev\u2019 and \u2018staging\u2019</p> </li> <li> <p>We continue to use the same database name: PBW</p> </li> <li> <p>We continue to use the same database port: 50000</p> </li> <li> <p>We continue to use the same database access credentials</p> </li> </ul> <p>The values for the database name, port, and host are all stored in a config map yaml file. Therefore, the config map yaml file in the \u2018staging\u2019 overlay folder will be different than the config map file used in thee \u2018dev\u2019 overlay folder.</p> <p>This means that to deploy the PlantsByWebSphere application to the \u2018staging\u2019 environment, all that needs to be done is to update the <code>DB2 hostname</code> in the <code>config map</code> yaml file located in the \u2018staging\u2019 overlays folder. Then run the single command to deploy the PlantsByWebSphere application to the staging environment.</p> <p>Now we are ready to start:</p> <ul> <li> <p>Copy the \u2018dev\u2019 overlays yaml files to a new overlays folder. We will name it \u2018staging\u2019.</p> </li> <li> <p>Update the environment specific configuration in the new \u2019staging\u2019 overlays folder.</p> </li> </ul> <p>To streamline executing the steps above, we have provided a `convenience shell script' that performs these steps.</p> <p>You will <code>run the script</code> to setup the staging overlay, while avoiding having to perform mundane copy/paste activities in the lab.</p> <p>After running the script, we will review the changes that were made to the config map yaml file.</p> <ol> <li> <p>Run the following commands to setup the <code>overlays/staging</code> folder with the updated config map. </p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./kustomize-staging.sh\n</code></pre> <p>Note: The script also performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.</p> <p></p> </li> <li> <p>Examine the staging overlay</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize/overlays\n</code></pre> <p>The contents were copied \u2018as-is\u2019 from the \u2018dev\u2019 overlay directory</p> <p></p> </li> <li> <p>The \u2018staging\u2019 overlay directory contains the same 4 yaml files as the \u2018dev\u2019 overlay</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize/overlays/staging\n</code></pre> <p></p> </li> <li> <p>The plantsbywebspheree6-configmap.yaml file contains the \u2018staging\u2019 environment specific configuration.</p> <p>Specifically, the \u201cDataSource serverName\u201d for the DB2 database has been updated to the \u2018staging\u2019 environment database host</p> <pre><code>gedit /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize/overlays/staging/plantsbywebsphereee6-configmap.yaml\n</code></pre> <p></p> </li> <li> <p>Close the \"gedit\" editor. DO NOT SAVE ANY CHNAGES TO THE FILE!</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#192-dploy-plantsbywebsphere-to-staging-evironment","title":"1.9.2 Dploy PlantsByWebSPhere to staging evironment","text":"<p>In this section, you will run the same steps to deploy and configure the application to the staging environment, which were used in dev. </p> <p>The differecne is the configuration deltas you examined in the overlays/staging folders in the migration bundle. </p> <ol> <li> <p>Run the following <code>convenience shell script</code> to deploy the PlantsByWebSphere application to the \u2018staging\u2019 environment.</p> <p>Note: The script performs the same steps as the deployment to the \u2018dev\u2019 environment.</p> <p>The script performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./staging-deploy-pbw-ocp.sh\n</code></pre> <p>Notice in <code>step 8</code> of the script, the command to deploy the application uses the configuration from the <code>staging</code> overlay, as illustrated below.</p> <p></p> </li> </ol> <p>When the script completes, the URL (Route) to the PlantsByWebSphere application running in the staging environment is displayed.</p> <p></p> <ol> <li> <p>Open a new browser tab and go to that URL:</p> <pre><code>http://plantsbywebsphereee6-staging.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> <p></p> </li> <li> <p>In the application, click on the \u201cTrees\u201d category. This the list of trees in the \u201cstaging\u201d database.</p> <p></p> </li> <li> <p>You may refer to the catalog of trees in the \u2018dev\u2019 environment, and notice the trees are named differently in the staging environment.</p> <p>a. Open a new browser tab and go to the application running in the <code>dev</code> environment.</p> <pre><code>http://plantsbywebsphereee6-dev.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#79-gitops-and-configuration-management","title":"7.9 GitOps and configuration management","text":"<p>At this point we have two distinct elements for deployment: the application image and the configuration for that image for each potential environment. In the GitOps model, these two elements are stored in separate Git repositories. </p> <p>You can further distribute the configuration into different repositories for each environment. This approach allows you to treat configuration as if it were code and to apply standard code development techniques such as Pull Requests, code review and maintain a full audit history. This approach delivers excellent controls and oversights for configuration changes for your OpenShift clusters, especially as you promote changes through your environments.</p> <p></p> <p>This image comes from an excellent article on real world GitOps: https://developer.ibm.com/blogs/gitops-best-practices-for-the-real-world/</p> <p>We will not cover all of GitOps it in detail in this lab - however, there are two relevant areas that are worth mentioning briefly.</p> <p>Configuration Drift</p> <p>With the GitOps approach, there is the risk that the deployed configuration for the OpenShift cluster does not match what is in the Git repository. Someone could have updated the OpenShift cluster directly, for example. There are a number of tools to manage this configuration drift, with ArgoCD being a common tool to address this issue. It can be configured to sync manually or automatically, so that any changes made directly on the cluster are reverted to what is in the Git repository. </p> <p>The OpenShift GitOps Operator can be used to install ArgoCD into your OpenShift cluster. Further details on how to this can be found here: https://developer.ibm.com/tutorials/deploy-open-liberty-applications-with-gitops/</p> <p>Securing Secrets</p> <p>Even with controls and restricted access to Git repositories, it is not considered good practice to store the sensitive data in plain text (aka the values entered into the secrets files). There are generally two approaches you can take to tackle this: encrypt the values or use a reference:</p> <ul> <li> <p>Encrypt the values: In this approach, the value in the secret file is encrypted when it is committed to the Git repo. During deployment to OpenShift there is an extra step where the secret values are decrypted. <code>SealedSecrets</code> is one implementation of such an approach.</p> </li> <li> <p>Use a reference: In this case, the secrets and their values are stored in a secret manager. During deployment, a reference is provided to the secret manager which will then mount the secret to the deployed container. <code>HashiCorp Vault</code> is a common implementation of this approach.</p> </li> </ul> <p>In both cases, there is additional work to be done above what has been covered in this lab. However, the kustomize files provided in the migration bundle gives you a good starting point to identify the secrets and provide a standard output that can be transformed to suit your selected approach.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#110-optional-exploring-the-plantsbywebsphere-application-in-the-proof_of_concept-workspace","title":"1.10 OPTIONAL: Exploring the PlantsByWebSphere application in the proof_of_concept workspace","text":"<p>IBM Cloud Transformation Advisor (TA) analyzes application and configuration data collected from Java application server environments. TA delivers great insights that help organizations plan and implement a modernization journey to WebSphere Liberty and Kubernetes base container platform for existing Java applications.</p> <p>TA provides recommendations for modernization which includes and considers application complexity, dependencies, potential issues, and estimated development effort.</p> <p></p> <ol> <li> <p>In a browser widow, return to Transfromation Advisor using the follwoing URL: </p> <pre><code>http://localhost:3000\n</code></pre> </li> <li> <p>Open the <code>proof-of-concept</code> workspsce, if it is not alreasy open</p> <p></p> </li> <li> <p>Scroll down to the <code>Java applications</code> section and note the high-level summary for the \u2018plantsbywebsphereee6.ear\u2019application assessment.</p> </li> </ol> <ul> <li> <p>Complexity</p> </li> <li> <p>Issues</p> </li> <li> <p>Required code changes</p> </li> <li> <p>Application cost (in days for development)</p> <p></p> </li> </ul> <p>This workspace has only a single application name <code>plantsbywebsphereee6.ear</code>. It is summarized as <code>simple</code> to  modernize to WebSphere Liberty.  </p> <p>Complexity values and their meanings:</p> <p><code>Simple</code>: The application is ready for deployment, no access to the source code is required. </p> <ul> <li>Simple complexity value typically represents about 20% of applications.</li> </ul> <p><code>Moderate</code>: Code changes are required before deployment; however, these code changes are well known, and specific help is provided for each issue to assist in resolving it. </p> <ul> <li>Moderate complexity value typically represents about 80% of applications.</li> </ul> <p><code>Complex</code>: The application uses a technology that does not have a direct equivalent in the new runtime and a new approach will need to be adopted. In our experience, only about 1 in 6 customers have these kinds of applications. </p> <ul> <li>Complex complexity value typically represents less than 1% of applications.</li> </ul> <ol> <li> <p>Click on PlantsByWebSphereEE6.ear which will expand the analysis</p> <p></p> <p>a. Scroll down, noting the groups or categories of analysis available</p> <ul> <li> <p>Complexity rules</p> </li> <li> <p>Required code changes</p> </li> <li> <p>Issue details</p> </li> <li> <p>Critical</p> </li> <li> <p>Warning</p> </li> <li> <p>Informational</p> </li> <li> <p>Additional reports</p> </li> <li> <p>Technology report</p> </li> <li> <p>Inventory report</p> </li> <li> <p>Analysis reports</p> </li> </ul> </li> <li> <p>View the <code>Analysis Report</code> for more detailed application information</p> <p>Analysis Report</p> <p>The Detailed Migration Analysis Report does a deep dive on the preferred migration target to help you understand any migration issues, like deprecated or removed APIs, Java SE version differences, and Java EE behavioral differences.</p> <p>a.  Click on the <code>Analysis report</code> link. </p> <p></p> <p>b. The Analysis report will open in a new browser tab</p> <p></p> <p>c.  Note the target</p> <ul> <li> <p>Because the source was traditional WebSphere v8.5.5, which is Java EE 6, the target is also EE6.</p> </li> <li> <p>Because the source was running Jave SE 8, the target is also set to Java SE 8.</p> </li> </ul> <p>By default, Transformation advisor recommends the first step of modernization to Liberty that requires the minimal amount of change and effort.</p> <p>You may use the binary scanner with the <code>--ta</code> option if you want to assess the modernization effort to newer versions Java, Jave EE, or Jakarta EE. Running the binary scanner with the <code>-ta</code> option produces an archive file that can be loaded into Transformation Advisor for analysis.</p> <p>d.  Click on the <code>Information</code> label, to review the details of this item.</p> <p></p> <p>The Information rules provide migration related considerations. Be aware of these rules during testing. Many of these rules relate to connectivity to other resources that need to be considered during migration.</p> <p>e.  You may review the Information rules for PlantsByWebSphere migration.</p> <p></p> </li> <li> <p>Return to the Cloud Transformation Advisor browser tab that shows the plantsbywebsphereee6.ear details page. Then click on <code>Inventory Report</code>, which will open in a new browser tab.</p> <p></p> <p>a.  Scroll down and review the Inventory Report, which is especially useful in larger applications.</p> <p>The Inventory report provides a high-level inventory of the content and structure of each application, plus information about potential deployment problems and performance considerations.</p> <p></p> <p>b.  Scroll down to the bottom of the Inventory report and locate <code>the Contained Archives</code> section.</p> <p>The inventory report provides valuable insights into utility jars that are contained in the application. It also provides the \u2018package\u2019 name of the utility jar. This is extremely valuable to help determine what 3<sup>rd</sup> party utilities are used by the application.</p> <p>c.  Notice the PlantsByWebSphere application contains utility jar named \u2018pbw-lib\u2019jar\u2019. The archive package is \u201cibm.com.websphere\u2019, indicating it is NOT a 3<sup>rd</sup> party utility jar.</p> <p></p> <p>d.  Return to the Cloud Transformation Advisor browser tab that shows the plantsbywebsphereee6.ear details page. Then click on <code>Technology report</code>, which will open in a new browser tab.</p> <p>The Technology report provides details on which editions of Liberty support the technologies used by the applications.</p> <p></p> <p>a.  Scroll down Technology Report, which can quickly help assess which Java EE API technologies that the PlantsByWebSphere application uses, and which editions of Liberty the APIS are available.</p> <p></p> <p>b. As you see from the report above, the APIs used in the PlantsByWebSphere application are available in ALL editions of Liberty.</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/2161-appmod-lab-v01/#summary","title":"Summary","text":"<p>In this lab, you learned how to deploy applications to WebSphere Liberty using the WebSphere Liberty Operator and the deployment artifacts produced by Transformation Advisor in its migration bundle.</p> <p>You explored the options for deployment: </p> <ul> <li>locally running Liberty</li> <li>Liberty as an image running in local container</li> <li>Liberty as an image running in OpenShift.</li> </ul> <p>You learned how to easily configure deployments to OpenShift to allow the same immutable image to be deployed for different configurations such as \u2018dev\u2019 and \u2018staging\u2019 environment deployments.</p> <p>You learned about some of the practical ways you can secure your configuration data.</p> <p>You explored the PlantsByWebSphere assessment details and reports in Transformation Advisor.</p> <p>Congratulations!</p> <p>You have successfully completed the lab</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/","title":"Lab 2161: Rapidly deploy and configure your Java applications with WebSphere Liberty and OpenShift Container Platform","text":""},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#lab-2161-rapidly-deploy-and-configure-your-java-applications-with-websphere-liberty-and-openshift-container-platform","title":"Lab 2161: Rapidly deploy and configure your Java applications with WebSphere Liberty and OpenShift Container Platform","text":"<p>Last updated: March 2024</p> <p>Duration: 90 minutes</p> <p>Need support? Contact Kevin Postreich, Yi Tang</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#overview","title":"Overview","text":"<p>This lab provides fundamental hands-on experience with modernizing existing Java applications to WebSphere Liberty, deployed into a container platform, such as Red Hat OpenShift. </p> <p>The focus of this lab is on the practical aspects of application deployment and configurations and not the analysis of the Transformation Advisor results. Other labs cover Transformation Advisor in detail.</p> <p>Upon completion of this lab, you will have gained skills to download and use the <code>Transformation Advisor migration bundle</code> to deploy and configure your application in the following scenarios: </p> <ol> <li> <p>to a locally running WebSphere Liberty - useful for deploying to Liberty in a VM</p> </li> <li> <p>to a container image \u2013 useful for deploying to Kubernetes</p> </li> <li> <p>using the Liberty Operator \u2013 useful for deploying to OpenShift</p> </li> </ol> <p>IBM Cloud Transformation Advisor\u00a0(Transformation Advisor) is an application modernization tool that is entitled through IBM Cloud Pak for Applications and WebSphere Hybrid Edition. Transformation Advisor helps you quickly evaluate on-premises Java EE applications for deployment to the cloud. </p> <p>The Transformation Advisor tool provides the following value:</p> <ul> <li> <p>Identifies the Java EE programming models in the app</p> </li> <li> <p>Determines the complexity of replatforming these apps by listing a high-level inventory of the content and structure of each app</p> </li> <li> <p>Highlights Java EE programming model and WebSphere API differences between the WebSphere runtime profile types </p> </li> <li> <p>Identifies Java EE specification implementation differences that might affect the app</p> </li> <li> <p>Generates accelerators for deploying the application to Liberty and containers in a target environment</p> </li> </ul> <p>Additionally, the tool provides a recommendation for the right-fit IBM WebSphere Application Server edition and offers advice, best practices, and potential solutions to assess the ease of moving apps to Liberty or newer versions of WebSphere traditional. It accelerates application migrating to cloud process, minimizes errors and risks and reduces time to market.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#objective","title":"Objective","text":"<p>The objectives of this lab are to:</p> <ul> <li> <p>Learn how to download the application migration bundle and use it to deploy an application to WebSphere Liberty running locally</p> </li> <li> <p>Learn how to fully populate the migration bundle placeholders and build the application into a container image</p> </li> <li> <p>Learn the role of Kustomize when deploying the migration bundle</p> </li> <li> <p>Learn how to deploy your application to OpenShift with a single command</p> </li> <li> <p>Learn how to create multiple configurations for the application and deploy them to OpenShift</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#prerequisites","title":"Prerequisites","text":"<p>The following prerequisites must be completed prior to beginning this lab:</p> <ul> <li> <p>Familiarity with basic Linux commands</p> </li> <li> <p>Have internet access</p> </li> <li> <p>Access to the TechZone lab environment</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#accessing-the-lab-environment","title":"Accessing the lab environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://TBD-to-the-reservation-link</p> <p>The lab environment contains six (6) Linux VMs.</p> <p></p> <ol> <li> <p>Access the lab environment from your web browser.</p> <p>A <code>Published Service</code> is configured to provide access to the <code>Workstation</code> VM through the noVNC interface for the lab environment.</p> <p>a. When the demo environment is provisioned, click on the <code>environment tile</code> to open its details view.</p> <p>b. Click on the <code>Published Service</code> link which will display a <code>Directory listing</code></p> <p>c. Click on the <code>vnc.html</code> link to open the lab environment through the <code>noVNC</code> interface.</p> <p></p> <p>d. Click the <code>Connect</code> button</p> <p></p> <p>e. Enter the password as: <code>passw0rd</code>. Then click the <code>Send Credentials</code> button to access the lab environment.</p> <p>Note: That is a numeric zero in passw0rd</p> <p></p> </li> <li> <p>If prompted to Login to the \"workstation\" VM, use the credentials below:</p> </li> </ol> <p>The login credentials for the workstation\u201d VM is:</p> <ul> <li> <p>User ID: techzone</p> </li> <li> <p>Password: IBMDem0s!</p> </li> </ul> <p>Note: That is a numeric zero in the password</p> <p></p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#tips-for-working-in-the-lab-environment","title":"Tips for working in the lab environment","text":"<ol> <li> <p>You can resize the viewable area using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a. From the environment VM, click on the <code>twisty</code> on the noNC control pane to open the menu.</p> <p></p> <p>b. To increase the visible area, click on <code>Settings &gt; Scaling Mode</code> and set the value to <code>Remote Resizing</code></p> <p></p> </li> <li> <p>You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer.</p> <p>a. Copy the text from the lab guide that you want to paste into the lab environment</p> <p>b. Click the <code>Clipboard</code> icon and <code>paste</code> the text into the noVNC clipboard</p> <p></p> <p>c. Paste the text into the VM, such as to a terminal window, browser window, etc.</p> <p>d. Click on the <code>clipboard</code> icon again to close the clipboard</p> <p>An alternative to using the noVNC Copy / Paste option, you may consider opening the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide without having to use the noVNC clipboard.</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#lab-tasks","title":"Lab Tasks","text":"<p>In this lab, you will use the Transformation Advisor <code>migration bundle</code> to build a container image and deploy an application to a local container for testing.</p> <p>Then you will deploy the application to \u201cdev\u201d and \u201cstaging\u201d environments in OpenShift. </p> <p>You will leverage the <code>WebSphere Liberty Operator</code>, Kustomize (a Kubernetes native configuration management framework), and deployment artifacts generated by IBM Cloud Transformation Advisor\u2019s migration bundle.</p> <p>To simplify the lab and to allow you to focus on the migration bundle, certain software and artifacts have already been put in place for you. These are as follows:</p> <ul> <li> <p>Transformation Advisor has been installed and collected data has been loaded</p> </li> <li> <p>docker (for creating and running images) has been installed</p> </li> <li> <p>oc (OpenShift command Line tool for running OCP commands) has been installed</p> </li> <li> <p>The PlantsByWebSphere Sample Application, built as an Enterprise Archive file (EAR) is available from the lab resource provided.</p> </li> <li> <p>Convenience scripts to streamline tasks will be used to save time and allow you to focus on the value and outcomes, which would ideally be scripted in your environment too.</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#part-1-application-assesment","title":"Part 1: Application Assesment","text":""},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#11-pull-down-the-lab-artifacts-and-setup-lab-environment","title":"1.1 Pull down the Lab artifacts and setup lab environment","text":"<ol> <li> <p>If you have not yet cloned the GitHub repo with the lab artifacts, in a previous lab, run the following command on your terminal:</p> <p>a.  Open a new Terminal window and clone the git repository to pull down the lab artifacts</p> <p></p> <p>b.  Run the commands to clone the git repository to the local system</p> <pre><code>cd /home/techzone\n\ngit clone https://github.com/IBMTechSales/appmod-pot-labfiles.git\n</code></pre> <p>c.  Add \u201cexecute\u201d permissions to the shell scripts</p> <pre><code>find ./appmod-pot-labfiles -name \"\\*.sh\" -exec chmod +x {} \\\\;\n</code></pre> </li> <li> <p>Run the provided shell script to setup the lab environment.</p> <p>The lab-setup.sh script moves files from the cloned git repo to a student directory used in the lab.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./lab-setup.sh\n</code></pre> <p>When complete, you will see the following output</p> <p>==========================</p> <p>lab-setup script completed</p> <p>==========================</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#12-launch-transformation-advisor-local","title":"1.2 Launch Transformation Advisor (local)","text":"<p>Transformation Advisor provides a <code>migration plan</code> for each application being assessed for modernization. The migration plan includes a <code>migration bundle</code> of generated artifacts that accelerate the deployment of applications to Liberty in containers and Kubernetes / OpenShift.</p> <p>The migration bundle includes diverse artifacts, depending on the needs of the application to accelerate the build and deployment of an application Container image into an OpenShift container platform.</p> <p>The Transformation Advisor is installed locally on the Workstation VM. </p> <ol> <li> <p>Launch the Transformation Advisor tool using the steps below.</p> <p>a.  From Workstation VM Desktop Tool Bar, click the <code>Terminal</code> icon to open a Terminal window.</p> <p></p> <p>b.  Launch the Transformation Advisor with commands:</p> <pre><code>cd /home/techzone/transformation-advisor-local-3.8.1\n\n./launchTransformationAdvisor.sh\n</code></pre> <p>Wait for Transformation Advisor to initialize and display the action menu list.</p> <p>c.  Type <code>5</code> and press <code>Enter</code> to \u201cStart\u201d the Transformation Advisor.</p> <p></p> <p>d. The Transformation Advisor application is started, <code>right-click</code> the application URL link and select <code>Open Link</code> to launch it in a web browser window.</p> <p>The URL is displayed in the output from the TA command: http://server0.gym.lan:3000</p> <p></p> <p>The Transformation Advisor Home page is displayed in the Web Browser.</p> <p></p> <p>In the next section, you will create a new \u201cWorkspace\u201d in Transformation Advisor and upload the saved results from the scan of a WebSphere Application Server that has a single application deployed, named \u201cPlantsByWebSphere\u201d.</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#13-create-new-workspace-and-upload-scan-results-from-a-websphere-application-server","title":"1.3 Create new workspace and upload scan results from a WebSphere Application Server","text":"<p>In this section, create a new workspace named 'proof_of_concept'.</p> <p>A <code>workspace</code> is a designated area that will house the migration recommendations provided by Transformation Advisor based on the Data Collector scan results of your application server environment.</p> <ol> <li> <p>Create a new workspace named proof-of-concept</p> <p>a.  From the Transformation Advisor Home page, click the <code>Create New</code> button</p> <p>b.  Type <code>proof_of_concept</code> as the Workspace name. Then click the <code>Create</code> button</p> <p></p> </li> <li> <p>Upload an existing 'scan results' file provided for the lab.</p> <p>The scan results file is provided for you.</p> <p>It was produced by running the Transformation Advisor Data Collector on a WebSphere Application Server that had the PlantsByWebSphere application deployed.</p> <p>a. Click the <code>Upload</code> button</p> <p>b. Click the <code>Drop or add file</code> link. Then click the <code>Upload</code> button</p> <p></p> <p>c.  Navigate to Home &gt; Techzone &gt; appmod-pot-labfiles &gt; labs &gt; RuntimeModernization</p> <p>d.  Select <code>pbw-collection.zip</code> file. Then click the <code>Open</code> button</p> <p></p> <p>e. Once the pbw-collection.zip has been added, click on the <code>Upload</code> button to upload the results into Transformation Advisor.</p> <p></p> <p>After a few moments, the application data will be uploaded to the Transformation Advisor UI.</p> <p>The proof-of-concept workspace contains data for a single app that is being used as a test case. We will now review this application in Transformation Advisor.</p> <p>The \"proof_of_concept\" workspace displays the \u201cAll Java Applications\u201d page which shows the recommendations for the workspace.</p> <p>There is a single application called plantsbywebsphereee6.ear. </p> <p>By default, \"WebSphere Liberty\" is selected as a modernization target. All the information provided assumes that this application will be modernized to WebSphere Liberty.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#14-analyze-the-plantsbywebsphereee6-application","title":"1.4 Analyze the plantsbywebsphereee6 application","text":"<p>Transformation Advisor provides detailed information about each application that has been analyzed. This application has a complexity of <code>Simple</code>.</p> <p>Simple means:</p> <ul> <li>The application is ready to be deployed to WebSphere Liberty</li> <li>No changes to the source code are required</li> </ul> <p>Note: We will describe some of the other information displayed in Transformation Advisor later in the lab.</p> <p></p> <p>How is this application ready for deployment when it shows 4 issues?</p> <p>In this case, the application has four <code>Informational</code> issues.</p> <p>Informational issues do not prevent the application from executing on the new runtime (WebSphere Liberty) but there may be small changes in the application\u2019s behavior.</p> <p>If unexpected behavior is found during testing, then reviewing these Informational issues may help explain what is happening.</p> <ol> <li> <p>We are now ready to review the 'migration plan' for this application. </p> <p>a. Click on the <code>Migration plan</code> link at the end of the row of the plantsbywebsphereee6.ear application.</p> <p></p> <p>b.  The Migration Plan page opens.</p> <p>This page contains a summary of the application being migrated:</p> <ul> <li> <p>a preview of the files that will help during deployment (highlighted below)</p> </li> <li> <p>a list of the application\u2019s dependencies.</p> </li> </ul> <p>All the files can be downloaded in a single convenient migration bundle.</p> <p></p> </li> <li> <p>At the bottom of the screen, there is a <code>Appliction Dependencies</code> section. </p> <p>This shows all the files, in addition to the application, that are required for a deployment. Plantsbywebspheeee6.ear has two dependencies.</p> <p>a. Expand the section it to see the details</p> <p>b. In this case, DB2 drivers called db2jcc.jar and db2cc_licence.jar are required for deployment</p> <p></p> </li> <li> <p>Download the migration bundle by clicking the <code>Download</code> button in the bottom right. </p> <p>A zip file named \u201cplantsbywebsphereee6.ear_migrationBundle.zip\u201d will download to your Download folder.</p> <p></p> </li> </ol> <p>We will go through a step-by-step process of using the Transformation Advisor migration bundle to deploy plantsbywebsphereee6.ear as follows:</p> <ul> <li> <p>Ensure the application can run locally on WebSphere Liberty</p> </li> <li> <p>Build an immutable container image running on WebSphere Liberty</p> </li> <li> <p>Ensure the application can run locally on WebSphere Liberty in a container</p> </li> <li> <p>Deploy the image to OpenShift \u201cdev\u201d environment (and configure it) using a single command</p> </li> <li> <p>Redeploy and reconfigure the image for a \u201cstaging\u201d environment with a single command</p> </li> </ul>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#part-2-runtime-modernization","title":"Part 2: Runtime Modernization","text":""},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#21-runtime-modernization","title":"2.1 Runtime Modernization","text":"<p>Runtime modernization moves an application to a 'built for the cloud' runtime with the least amount of effort. WebSphere Liberty is a fast, dynamic, and easy-to-use Java application server.</p> <p>Ideal for the cloud and containers, Liberty is open sourced, with fast start-up times, no server restarts to pick up changes, and a simple XML configuration.</p> <p>Applications deployed on the WebSphere Liberty container runtime can be built, deployed and managed with the same common technologies and methodologies that would be used by cloud-native (built for the cloud) applications.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#211-deploy-plantsbywebsphere-app-to-a-locally-running-websphere-liberty","title":"2.1.1  Deploy PlantsByWebSphere app to a locally running WebSphere Liberty","text":"<p>In this lab environment, WebSphere Liberty is installed locally on the Workstation VM.</p> <p>In this step, you will create a new Liberty server to run the PlantsByWebSphere application.</p> <p>Then you will review the <code>placeholder files</code> in the Transformation Advisor bundle to see the dependency files that need to be copied into the Liberty Server.</p> <p>Then you will use the <code>server.xml</code> file generated by Transformation Advisor, and included in the migration bundle, to configures the Liberty erver for the application.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#212-create-a-local-liberty-server","title":"2.1.2   Create a local Liberty Server","text":"<ol> <li> <p>From a <code>Terminal</code> window, create a new local WebSphere Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server create pbwserver\n</code></pre> <p>output:</p> <pre><code>Server pbwserver created.\n</code></pre> </li> <li> <p>From the Terminal window, start the local WebSphere Liberty server.</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> <p>Output:</p> <pre><code>Starting server pbwserver.\n\nServer pbwserver started with process ID #####\n</code></pre> </li> <li> <p>Confirm the local WebSphere Liberty server is running. Open the <code>Firefox</code> web browser, open a new browser tab. Then go to: http://localhost:9080</p> <p></p> </li> <li> <p>Currently, the PlantsByWebSphere application is NOT deployed to the Liberty server. Furthermore, the Liberty server is NOT configured to run the application. </p> <p>a. From the web browser, attempt to reach the application:</p> <p>http://localhost:9080/PlantsByWebSphere</p> <p>You will receive the message that the \u201cContext Root Not Found\u201d. This is expected as the application is not yet deployed to the Liberty server.</p> <p> </p> </li> </ol> <p> </p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#213-review-the-placeholder-files-in-the-migration-bundle","title":"2.1.3 Review the placeholder files in the migration bundle","text":"<p>In this section, you will review the migration bundle to see what files need to be added to the WebSphere Liberty configuration to run the application. </p> <p>Then you will use the provided Liberty configuration file,  <code>server.xml</code>, to configure the Liberty server.</p> <p>The <code>server.xml</code> file is used to configure Liberty by providing values for ports, security, context routes and by providing application-specific configuration such as access to application data sources.</p> <ol> <li> <p>Let\u2019s make note of the 3 <code>placeholder files</code> that are placed in the <code>migration bundle</code>.</p> <p>The placeholder files are convenient references to let you know which files you will need to copy to the Liberty server.</p> <p>Note: You will fully populate the migration bundle in later steps.</p> <p>a.  From the Terminal window, list the placeholder files in the migration bundle.</p> <pre><code>unzip -l /home/techzone/Downloads/plantsbywebsphereee6.ear\\_migrationBundle.zip | grep placeholder\n</code></pre> <p></p> <ul> <li> <p>The <code>target</code> directory contains the placeholder file for the PlantsByWebSphere application EAR deployment file. This is a reminder that you need to copy the PlantsByWebSphere EAR file the Liberty server.</p> </li> <li> <p>The <code>src/main/liberty/lib</code> directory contains the placeholder files for the DB2 database libraries required by the application. This is a reminder that you need to copy the DB2 libraries to the Liberty server.</p> </li> </ul> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#214-configure-the-liberty-server-for-plantsbywebsphere","title":"2.1.4   Configure the Liberty server for PlantsByWebSphere","text":"<p>In this section, you will copy the required dependency files and server configuration to the Liberty server.</p> <ul> <li> <p>Copy the DB2 libraries to the directory defined in the \"DB2 driver configuration\" in the server.xml file.</p> </li> <li> <p>Copy the PlantsByWebSphere EAR file to the \u201capps\u201d directory of the Liberty server</p> </li> <li> <p>Copy the server.xml file from the migration bundle to the Liberty server, replacing the default server.xml file</p> </li> </ul> <p>To facilitate executing the <code>copy</code> steps above, we have provided a <code>convenience shell script</code> that creates the required directories and copies the files to the Liberty server.</p> <p>You will run the script, which will prompt you to press the  \u201cEnter\u201d key before executing each of the commands in the script. This allows you to examine the command, while avoiding having to perform mundane copy/paste activities in the lab.</p> <p></p> <p>The script performs the following steps for you. </p> <ul> <li> <p>Step 1: Create a new directory where the migration bundle will be extracted</p> </li> <li> <p>Step 2: Unzip the migration bundle, replacing the one you had previously extracted in the lab</p> </li> <li> <p>Step 3: create the \"lib/global\" directory in Liberty server, where the DB2 libraries will be copied. This directory matches the location defined in the server.xml</p> </li> <li> <p>Step 4: Copy the DB2 driver libraries to Liberty server's \"lib/global\" directory</p> </li> <li> <p>Step 5: Copy the PlantsByWebSphere application EAR file to Liberty server. The EAR is copied to the \u201capps\u201d directory of the server.</p> </li> <li> <p>Step 6: Copy the server.xml file from the migration bundle to the Liberty server. This replaces the existing default server.xml that was created when you created the server.</p> </li> </ul> <p></p> <ol> <li> <p>Run the <code>local-liberty-config.sh</code> shell script to configure the Liberty server as noted above.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./local-liberty-config.sh -i\n</code></pre> <p>Examine the command to be executed. Then press the <code>Enter</code> key when you are ready for the script to execute the command for you.</p> <p>Note: The \u201c<code>-i</code>\u201d parameter tells the script to run in interactive mode, prompting you to press the <code>Enter</code> key to run the command shown.</p> <p></p> <p> Click to expand: For reference: The screenshots of each step of the \"local-liberty-config\" script  </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>The following message is displayed when all of the steps in the script are complete. </p> <p></p> </li> <li> <p>From a Terminal window, <code>start</code> the Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> </li> <li> <p>Rerun the PlantsByWebSphere application from the browser.</p> <pre><code>http://localhost:9080/PlantsByWebSphere\n</code></pre> <p>Now the application is running in Liberty, and the main page is displayed.</p> <p></p> </li> <li> <p>Attempt to click on any of the tabs: \u201cFlowers\u201d, Fruits &amp; Vegetables\u201d, or \u201cTrees\u201d.</p> <p>Note the exception. This is an expected erorr. The issue is in the JPA persistence (Database access). A user is not defined, and therefore authentication to the database failed.</p> <p></p> <p>These pages should display a catalog of items in their respective category, which are rereived from the application database. </p> <p>So what happened? </p> <p>Transformation Advisor does not collect any <code>sensitive data</code> for the application server.  This means the application-specific configuration information in the server.xml file has not been set. In this case, the <code>username</code> and <code>password</code> to access the database are missing.</p> <p>In the next section, you will review the server.xml file and add the sensitive data required to access the application database.  </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#215-review-the-serverxml-file","title":"2.1.5   Review the server.xml file","text":"<p>Now you will review the <code>server.xml</code> file and set the necessary configuration information. </p> <p>The server.xml file defines a set of <code>features</code> that the application requires. By importing only the necessary features to support the application\u2019s API needs, the footprint of the deployed application and Liberty server is kept as small as possible.</p> <ol> <li> <p>Review the server.xml file</p> <p>Using the \u201c<code>gedit</code>\u201d editor in a <code>Terminal</code> window, open the server.xml file located in the Liberty server</p> <pre><code>gedit /home/techzone/wlp/usr/servers/pbwserver/server.xml\n</code></pre> <ul> <li>Section 1 contains the <code>features</code> that the application requires, and these are discovered automatically during analysis performed the Transformation Advisor Data Collector.</li> </ul> <p></p> <ul> <li> <p>Section 2: Defines the <code>resources</code> required to access the database</p> </li> <li> <p>The <code>authdata</code> defies the BD2 user and password that is used by the datasources. These refer to variables that are defined in the server.xml file.</p> </li> <li> <p>The <code>jdbc</code> driver defines the required libraries. These are the libraries you copied into this location via the script</p> </li> </ul> <p></p> <ul> <li>Section 3: The <code>datasource</code> contains all the information required to access the database: Database user, password, database name, host, and port number.</li> </ul> <p></p> <ul> <li>Section 4 contains the variables for the <code>non-sensitive configuration data</code>. For example, the port to run the server on. The values of these variables are collected by Transformation Advisor.</li> </ul> <p></p> <ul> <li>Section 5 contains the <code>sensitive data variables</code>. </li> </ul> <p>You can see that the values for these variables are all blank, as this information is never collected by Transformation Advisor.</p> <p></p> </li> <li> <p>The reason that the PlantsByWebSphere application retuned an \u201cException\u201d is because the values for the sensitive variables has not been set. </p> <p></p> <p>Next, you will update the server.xml to include the credentials required to access the application database. </p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#216-update-the-serverxml-and-retest-the-plantsbywebsphere-application","title":"2.1.6   Update the server.xml and retest the PlantsByWebSphere application","text":"<ol> <li> <p>From a Terminal window, <code>stop</code> the Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server stop pbwserver\n</code></pre> </li> <li> <p>From the <code>gedit</code> editor that you have open, update the values in the server.xml file for the sensitive data as illustrtated below:</p> </li> </ol> <p>a. Scroll to the bottom of the server.xml file to view the sensitive-data variables. </p> <p>b.  Set the default value for rhel9_baseNode01_pbwuser_password to: <code>db2inst1-pwd</code></p> <p>c. Set the default value for rhel9_baseNode01_pbwuser_user to: <code>db2inst1</code></p> <pre><code> ![](./images/media/image44.png)\n</code></pre> <p>d. <code>Save</code> and <code>close</code> the server.xml in the editor</p> <ol> <li> <p>From a Terminal window, <code>start</code> the Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server start pbwserver\n</code></pre> </li> <li> <p>Reload and test PlantsByWebSphere application in the browser</p> <pre><code>http://localhost:9080/PlantsByWebSphere\n</code></pre> <p>a. Click the \u201cFlowers\u201d tab. The catalog of flowers should now be displayed.</p> <p></p> </li> <li> <p>From a Terminal window, <code>Stop</code> the Liberty server named \u2018pbwserver\u201d</p> <pre><code>/home/techzone/wlp/bin/server stop pbwserver\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#checkpoint","title":"Checkpoint","text":"<p>At this point in the lab, you have successfully demonstrated \"Runtime Modernization\" of the PlantsByWebSphere application to WebSPhere Lberty on a local VM. </p> <p>In the next sections, you will perform \"Operational Moderniztion\" whereby deploying the PlantsByWebSphere application to containers and Red Hat OpenShift. </p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#part-3-operational-modernization","title":"Part 3: Operational Modernization","text":""},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#31-operational-modernization","title":"3.1 Operational Modernization","text":"<p>Operational modernization gives an operations team the opportunity to embrace modern operations best practices without putting change requirements on the development team. </p> <p>The scaling, routing, clustering, high availability, and continuous availability functionality that were previously provided by the application server middleware, can be provided by the container platform. </p> <p>This allows the operations team to run cloud-native and modernized applications in the same environment with the same standardized logging, monitoring, and security frameworks.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#311-explore-the-containerfile-used-to-build-plantsbywebsphere-as-a-container-image","title":"3.1.1  Explore the Containerfile used to build PlantsByWebSphere as a container image","text":"<p>In the previous section, you used the server.xml to get the  application running on a local Liberty instance. This was to show you how the Transformation Advisor server.xml file is used. If you are moving to Liberty in VMs as your new runtime, then you are done! </p> <p>However. if containers are to be your final destination, this section explores the Transformation Advisor migration bundle artifacts that accelerate application deployment to Lberty in containers. </p> <p>In the case of <code>Simple</code> applications, it is not necessary to carry out a separate step of deploying to a local Liberty instance at all. Instead, by using the Transformation Advisor migration bundle, you can deploy your application to Liberty running in a container all in one go. This is what we will do now.</p> <p>For this section of the lab, the migration bundle has already been updated as follows:</p> <ul> <li> <p>The PlantsByWebSphere EAR file has been added to the migration bundle. And its placeholder has been removed</p> </li> <li> <p>The DB2 libraries have been added to the migration bundle, and the placeholders have been removed</p> </li> <li> <p>The server.xml file is configured with default values for the database access</p> </li> </ul> <ol> <li> <p>The <code>migration bundle</code> is ready to be used to generate an image of your application running on WebSphere Liberty. To do this, we will use the <code>Containerfile</code> that comes with the migration bundle.</p> <p></p> <p>a. Explore the Containerfile in the migration bundle</p> <pre><code>gedit /home/techzone/Student/labs/appmod/pbw-bundle-complete/Containerfile\n</code></pre> <ul> <li> <p>The FROM statements in the Containerfile pull in the following two images. </p> </li> <li> <p><code>Open JDK 8</code></p> </li> <li>23.0.0.12 version of <code>WebSphere Liberty</code>.</li> </ul> <p></p> <p></p> <p>Note: The Containerfile has been modified for this lab to pull <code>23.0.0.12</code> of <code>WebSphere Liberty</code>. By default, it pulls the latest WebSphere Liberty.</p> <ul> <li>The RUN commands in the Containerfile create the necessary folder structures and copies the <code>binary files</code> from the migration bundle into the appropriate locations in the image.</li> </ul> <p></p> <ul> <li>There are several lines in the file that have been commented out. </li> </ul> <p>By default, the Containerfile assumes that your application is available as a binary file. However, it can also be used to build your application from source code. The full details of how to do this can be found in README.md in the migration bundle.</p> <p></p> <p>b. <code>Close</code> the \"gedit\" editor. DO NOT SAVE ANY CHNAGES TO THE FILE! </p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#312-setup-build-and-run-plantsbywebsphere-in-a-local-container","title":"3.1.2 Setup, build and run PlantsByWebSphere in a local container","text":"<p>For the PlantsByWebSphere application to propery run in a local container, it requires access to the application database, which runs in a separate container. </p> <p>The application container and the database container must be connected to the same local Docker network.</p> <p>In this lab, the steps to build, setup, and run the PlantsByWebSphere application in a local container are:</p> <ul> <li> <p>Step 1: Ensure the DB2 application database is running</p> </li> <li> <p>Step 2: Create a local Docker network</p> </li> <li> <p>Step 3: Ensure the Docker network is created</p> </li> <li> <p>Step 4: Connect the DB2 database container to the Docker network</p> </li> <li> <p>Step 5:  Build and tag the application container image</p> </li> <li> <p>Step 6:  Start the application in the container</p> </li> </ul> <p>To facilitate executing the steps above, we have provided a <code>convenience shell script</code> that performs these steps.</p> <p>You will run the script, which will prompt you to press \u201cEnter\u201d key before executing each of the commands in the script. This allows you to examine the command before they are executed, while avoiding having to perform mundane copy/paste activities in the lab.</p> <ol> <li> <p>Run the following command to setup, ,build, and run the PlantsByWebSphere application in a local container.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scipts\n\n./build-container -i\n</code></pre> <p>Note: The <code>-i</code> parameter tells the script to run in interactive mode, prompting you to press <code>Enter</code> key to run the command shown.</p> <p>Note: The script also performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.</p> <p> Click to expand: For reference: The screenshots of each step of the \"build-container\" script  </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Note: The <code>docker run</code> command contains a few parameters that are defined below: :</p> <p>-d : start the container in detached mode. This is just for convenience</p> <p>-p : expose the applications HTTP and HTTPS ports</p> <p>--network : connect the container to the Docker network that the DB2 database is connected</p> <p>--rm : remove the container when the container is stopped. This is just for convenience</p> <p>The following message is displayed when all of the steps in the script are complete. </p> <p></p> </li> <li> <p>Check that the container is up and running.</p> <pre><code>docker ps | grep pbw\n</code></pre> <p></p> </li> <li> <p>From the browser, access the PlantsByWebSphere application that is running in the local container</p> <pre><code>http://server0.gym.lan:9080/PlantsByWebSphere\n</code></pre> <p></p> <p>And view the catalog of <code>Flowers</code>, which are retrieved from the database.</p> <p></p> </li> <li> <p><code>Stop</code> the PlantsByWebSphere container</p> <pre><code>docker stop pbw\n</code></pre> </li> </ol> <p>Considerations and recommendations:</p> <p>In the section of the lab you just completed, running the application in a local container, we updated the server.xml by adding the sensitive data values for the database access. Then we baked that configuration into the container image.</p> <p>However, a big part of container image value is that they are <code>immutable</code>. No matter where you take and deploy the image, the operating system, runtime, security patch level, etc. will be the same. This gives you great reproducibility and gets away from the classic \"but it works for me!\" issue.</p> <p>We lose much of this value if we bake in the configuration with the image, as we will have to produce an image for each new configuration.</p> <p>Instead of using the exact same image in each of your development, staging and production environments, you would need to use different images. </p> <p>It is never best practice to hard code configuration into your image.</p> <p>Recommendation:</p> <p>In the next section, we will look at how the migration bundle helps you manage this configuration easily across all your environments and how it will simplify deployment to your OpenShift cluster. The migration bundle uses <code>Kustomize</code> to help achieve this.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#32-explore-how-kustomize-is-used-in-the-migration-bundle","title":"3.2 Explore how Kustomize is used in the migration bundle","text":"<p><code>kustomize</code> is simple way to manage configuration across all your different deployments and environments without the need for templates.</p> <p>By using <code>overlays</code>, it allows you to break out your basic configuration information (ports, names, hosts, etc.) from your sensitive data (usernames, password, etc.) that are likely to change in every deployment.</p> <p>Every kustomize artifact is plain <code>YAML</code> and can be validated and processed in a standardized way. Plus, it makes them very human readable! It is natively built into kubectl and the OpenShift client.</p> <ol> <li> <p>From a <code>Terminal</code> window, list the contents of the <code>deploy</code> folder of the migration bundle</p> <pre><code>ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy\n</code></pre> <p></p> <p>a.  There are two folders.</p> <ul> <li> <p><code>k8s:</code> Contains files to accelerate deployment into Kubernetes. These help to create routes, services, and deployments. We will focus on deployment to OpenShift with kustomize in this lab.</p> </li> <li> <p><code>kustomize:</code> Contains the files for deployment using kustomize.</p> </li> </ul> </li> <li> <p>Go to the <code>Kustomize</code> folder located under the <code>deploy</code> directory </p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n</code></pre> </li> <li> <p>Examine the structure of the kustomize folder:</p> <pre><code>ls -R\n</code></pre> <p></p> <p>Base:</p> <ul> <li> <p>contains the <code>Kustomization.yaml</code> that describes the resources managed by Kustomize</p> </li> <li> <p>contains the <code>application.cr-yaml</code> This is the WebSphere Liberty operator custom resource file that will execute the deployment and mount the necessary secrets and configuration that are created from the secret file and config map file. </p> </li> </ul> <p>Overlays:</p> <ul> <li> <p>contains all your different deployment configurations.</p> </li> <li> <p>In this case, only a single deployment has been created for your <code>dev</code> systems.</p> </li> </ul> <p>Obverlays/dev</p> <ul> <li> <p>The <code>config map yaml file</code> will contain all your application-specific non-sensitive data that will be created as configMaps in OpenShift.</p> </li> <li> <p>The <code>secret yaml file</code> will contain all your application-specific sensitive data that will be created as secrets in OpenShift.</p> </li> <li> <p>Optionally contain additional yaml files that override configuration in the <code>base</code> configuration.</p> </li> </ul> <p>Note: In the next section we will use this kustomize structure to deploy your application image.</p> <p>Further information on kustomize can be found at http://kustomize.io</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#33-deploy-to-openshift-with-config","title":"3.3 Deploy to OpenShift with config","text":"<p>From the previous sections in the lab, you have an <code>immutable container image</code> built. </p> <p>In this section, you will push that image to an image registry and then deploy it into OpenShift \u201cdev\u201d project, along with its configuration, with a single command, using the <code>WebSphere Liberty Operator</code> and the generated deployment artifacts in the <code>migration bundle</code>.</p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#331-deploy-the-application-to-the-openshift-dev-environment","title":"3.3.1 Deploy the application to the OpenShift \u201cdev\u201d environment","text":"<p>The application uses a DB2 database that contains a catalog of items used for the \u201ddev\u201d environment.</p> <p>Note: After you deploy the application to the dev environment in OpenShift, you will explore and examine the Liberty Operator and Kustomize yaml artifacts in the migration bundle, which are used to deploy the application.</p> <p>Deploying the PlantsByWebSphere application and its configuration to OpenShift is easily accomplished using a single command.</p> <p>However, in this lab, before you can deploy the application to OpenShift, the container image must be propery tagged and pushed to an image registry. In this lab, we use the OpenShift Internal registry.</p> <p>The following steps need to be performed, and will be done using a <code>convemience script</code> that is provided for this lab. </p> <ul> <li> <p>Tag the container image for pushing to the OpenShift Internal Registry</p> </li> <li> <p>Login to OpenShift</p> </li> <li> <p>Create the \u201cdev\u201d project where the application will be deployed</p> </li> <li> <p>Login to the OpenShift internal registry</p> </li> <li> <p>Push the container image to the registry</p> </li> <li> <p>Deploy the application and it configuration to OpenShift \u201cdev\u201d project</p> </li> </ul> <p>To streamline executing the steps above, we have provided a <code>convenience shell script</code> that performs the steps.</p> <p>You will run the script, which will prompt you to press <code>Enter</code> key before executing each of the commands in the script. This allows you to examine the command before they are executed, while avoiding having to perform mundane copy/paste activities in the lab.</p> <ol> <li> <p>Run the following command to tag and push the PlantsByWebSphere container image to the OpenShift internal registry and deploy the application to the dev\u201d project.</p> <pre><code>cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts\n\n./dev-deploy-pbw-ocp.sh -i\n</code></pre> <p>Note: The <code>-i</code> parameter tells the script to run in interactive mode, prompting you to press <code>Enter</code> key to run the command shown.</p> <p>Note: The script also performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.</p> <p> Click to expand: For reference: The screenshots of each step of the \"dev-deploy-pbw-ocp\" script  </p> </li> </ol> <p> </p> <pre><code>**Step 1:** Tag the PlantsByWebSphere container image for pushing to the OpenShift internal registry\n\n![A white paper with black text Description automatically generated](./images/media/image65.png)\n\n\n**Step 2:** Login to OpenShift\n\n![A white paper with black text Description automatically generated](./images/media/image66.png)\n\n**Step 3:** Create the \u2018dev\u2019 project in OpenShift, where the application will be deployed\n\n![A screenshot of a computer Description automatically generated](./images/media/image67.png)\n\n**Step 4:** Switch to the \u2018dev\u2019 project, where subsequent OCP commands in the script will be executed.\n\n![A screen shot of a computer Description automatically generated](./images/media/image68.png)\n\n**Step 5:** Login to the OpenShift internal registry, so we can push the PlantsByWebSphere image.\n\n![A close-up of a computer screen Description automatically generated](./images/media/image69.png)\n\n**Step 6:** Push the PlantsByWebSphere container image to the OpenShift interna image registry.\n\n![A screenshot of a computer program Description automatically generated](./images/media/image70.png)\n\n**Step 7:** List the Image Stream and see that it is available.\n\n![A close-up of a computer screen Description automatically generated](./images/media/image71.png)\n\n**Step 8:** Deploy the PlantsByWebSphere application and its  configuration to the \u2018dev\u2019 project.\n\n![A screen shot of a computer program Description automatically generated](./images/media/image72.png)\n\n**Step 9:** List the new \u2018deployment\u2019 and see that it is available.\n\n![A screenshot of a computer program Description automatically generated](./images/media/image73.png)\n\n\n**Step 10:** List the PlantsByWebSphere \u2018pod\u2019 and see that it is ready.\n\n![A screenshot of a computer Description automatically generated](./images/media/image74.png)\n\n**Step 11:** Show the \u2018route\u2019 to the PlantsByWebSphere application running in the \u2018dev\u2019 project.\n\n![A screenshot of a computer Description automatically generated](./images/media/image75.png)\n\n&lt;/details&gt;\n\n___\n\nWhen the script completes, you will see the **PlantsByWebSphere Route** shown.\n\n![A close-up of a computer code Description automatically generated](./images/media/image76.png)\n\n___\n</code></pre> <ol> <li> <p>From the browser, navigate to the PlantsByWebSphere route for the <code>dev</code> deployment:</p> <pre><code>http://plantsbywebsphereee6-dev.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> <p>Optionally, you can use <code>Right-mouse click</code> on the <code>PlantsByWebSphere URL</code> in the Terminal window and select <code>open Link</code>. This will launch the application in the web browser.</p> <p></p> </li> <li> <p>The PlantsByWebSphere main page is displayed.</p> <p></p> </li> <li> <p>Click on the <code>Trees</code> category and view the trees that are loaded in the \u2018dev\u2019 environment database.</p> <p>This catalog of trees was retrieved from the DB2 database in the <code>dev</code> environment.</p> <p></p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#332-review-the-dev-overlay-configuration-that-was-used-to-deploy-the-application-and-configuration","title":"3.3.2 Review the \u201cdev\u201d overlay configuration that was used to deploy the application and configuration","text":"<p>The <code>overlays/dev</code> directory contains configuration that is specific and unique for the <code>dev</code> deployment.</p> <ol> <li> <p>Examine and understand how to configure the sensitive data as Kubernetes secrets</p> <p>a. From a <code>Terminal</code> window, navigate to the 'secrets' yaml file in the 'dev'overlay folder in the migration bundle</p> <pre><code>clear\n\ncd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n\ncat overlays/dev/plantsbywebsphereee6-secret.yaml\n</code></pre> <p></p> <p>Notice that we already inserted the DB2 database <code>user</code> and <code>password</code> in the yaml file that configures the sensitive data in a Kubernetes secret.</p> <p>Note: Data in this file is REQUIRED to be bese64 encoded.</p> <p>b. <code>How did we encode the values?</code> </p> <p>To update the migration bundle with the sensitive data, we Base64 encoded the values as illustrated below.</p> <ul> <li>We encoded the following values:</li> </ul> <ul> <li> <p>user: db2inst1</p> <p>echo db2inst1 | base64</p> </li> </ul> <p>The encoded value is: ZGIyaW5zdDEK</p> <ul> <li> <p>password: db2inst1-pwd</p> <p>echo db2inst1-pwd | base64</p> </li> </ul> <p>The encoded value is: ZGIyaW5zdDEtcHdkCg==</p> </li> <li> <p>From a Terminal window, examine the <code>application-cr.yaml</code></p> <p>The <code>application-cr.yaml</code> is the WebSphere Liberty custom resource used to deploy the PlantsByWebSphere application.</p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n\ngedit base/application-cr.yaml\n</code></pre> <p>a.  In this lab, we chose to override the application image, as we will push the same immutable image to different namespaces in OpenShift. </p> <p>Therefore, following the rules of Kustomize, the applicationImage definition in the application-cr.yaml is \u201cblank\u201d. It is overridden in overlays/dev.</p> <p></p> <p>b.  The <code>secret</code> and <code>configmap</code> references pull in the server configuration as <code>environment variables</code>.</p> <p></p> <p>c.  For this lab, we do not have transport level security enabled.</p> <p></p> <p>d.  We must accept the license.</p> <p></p> <p>e.  <code>Close</code> the <code>gedit</code> editor. DO NOT SAVE ANY CHANGES TO THE FILE!</p> </li> <li> <p>From a Terminal window, examine the <code>config map</code> for the <code>dev</code> deployment</p> <p>The <code>plantsbywebsphereee6-configmap.yaml</code> contains the variables defined in the <code>server.xml</code>.</p> <p>All values defined in the configMap are created as environment variable in the container. These environment variables override any default values that may have been set in the server.xml.</p> <pre><code>cd /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize\n\ngedit overlays/dev/plantsbywebsphereee6-configmap.yaml\n</code></pre> <p>a. This configuration overrides the database server name. It references the application database server for the \u201cdev\u201d environment.</p> <p></p> <p>b.  <code>Close</code> the \u201cgedit\u201d editor. DO NOT SAVE AY CHANGES TO THE FILE!</p> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#333-explore-the-websphere-liberty-operator-in-openshift","title":"3.3.3 Explore the WebSphere Liberty Operator in OpenShift","text":"<p>In this section, you will take a look at the WebSphere Liberty Operator in the OpenShift console to see what has been deployed.</p> <ol> <li> <p>Login to OpenShift console</p> <p>a.  Open a new tab in the web browser</p> <p>b.  Click on the <code>OpenShift Console</code> bookmark on the bookmark toolbar</p> <p>c.  Login credentials:</p> <ul> <li> <p>Username: <code>ocadmin</code></p> </li> <li> <p>Password: <code>ibmrhocp</code></p> </li> </ul> </li> <li> <p>View the IBM WebSphere Liberty <code>Operator</code></p> <p>a.  Click on <code>Operators &gt; Installed Operators</code> in the left-hand menu</p> <p>b.  Type <code>Liberty</code> in the filter</p> <p>c.  Click on <code>IBM WebSphere Liberty</code></p> <p></p> </li> <li> <p>View the WebSphereLibertyApplication <code>Deployment</code></p> <p>a.  Click on the tab called <code>WebSphereLibertyApplication</code></p> <p></p> <p>b. You will see the plantsbywebsphereee6 application listed in the \u2018dev\u2019 namespace</p> <p>b. Click on the link called <code>plantsbywebsphereee6</code> under the Name column</p> <p></p> <p>c.  Select the <code>Resources</code> tab</p> <p></p> <p>d. Select the link for the <code>Deployment</code></p> <p></p> <p>e. The PlantsByWebSphere deployment has one <code>pod</code> running</p> <p></p> </li> <li> <p>View the WebSphereLibertyApplication <code>Route</code></p> <p>a.  Return to the plantsbywebsphereee6 operator page</p> <p></p> <p>b.  Click the <code>Resources</code> tab</p> <p></p> <p>c.  Select the link of Kind: <code>route</code></p> <p></p> <p>d.  Click on the <code>Location</code> link for the route</p> <p></p> <p>e.  The Welcome to Liberty page is displayed in a new Browser tab. </p> <p></p> <p>f.  Append the context root \u2018PlantsByWebSphere\u2019 to access the PlantsByWebSphere application</p> <pre><code>http://plantsbywebsphereee6-dev.apps.ocp.ibm.edu/PlantsByWebSphere\n</code></pre> </li> </ol>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#summary","title":"Summary","text":"<p>Congratulations!</p> <p>You have successfully completed the core learning objectives in the lab</p> <p>In this lab, you learned how to deploy applications to WebSphere Liberty using the WebSphere Liberty Operator and the deployment artifacts produced by Transformation Advisor in its migration bundle.</p> <p>You explored the options for deployment: </p> <ul> <li>locally running Liberty</li> <li>Liberty as an image running in local container</li> <li>Liberty as an image running in OpenShift.</li> </ul> <p>You learned how to easily configure deployments to OpenShift to allow the same immutable image to be deployed for different configurations such as \u2018dev\u2019 and \u2018staging\u2019 environment deployments.</p> <p>You learned about some of the practical ways you can secure your configuration data.</p> <p>You explored the PlantsByWebSphere assessment details and reports in Transformation Advisor.</p> <p>You may continue your learning journey with the optional sections of the lab. </p>"},{"location":"1156-Deploy-Liberty-OCP/archived/README%20-%20Copy/#optional-sections","title":"Optional Sections:","text":"Click to expand: Section 3.4 GitOps and configuration management     ## 3.4 GitOps and configuration management  At this point we have two distinct elements for deployment: the **application image** and the **configuration for that image for each potential environment**. In the GitOps model, these two elements are stored in separate Git repositories.   You can further distribute the configuration into different repositories for each environment. This approach allows you to treat configuration as if it were code and to apply standard code development techniques such as Pull Requests, code review and maintain a full audit history. This approach delivers excellent controls and oversights for configuration changes for your OpenShift clusters, especially as you promote changes through your environments.  ![A black background with white arrows and dots Description automatically generated](./images/media/image105.png)  This illustration above comes from an excellent article on real world GitOps:   We will not cover all of GitOps it in detail in this lab - however, there are two relevant areas that are worth mentioning briefly.  **Configuration Drift**  With the GitOps approach, there is the risk that the deployed configuration for the OpenShift cluster does not match what is in the Git repository. Someone could have updated the OpenShift cluster directly, for example. There are a number of tools to manage this configuration drift, with ArgoCD being a common tool to address this issue. It can be configured to sync manually or automatically, so that any changes made directly on the cluster are reverted to what is in the Git repository.   The OpenShift GitOps Operator can be used to install ArgoCD into your OpenShift cluster. Further details on how to this can be found here:   **Securing Secrets**  Even with controls and restricted access to Git repositories, it is not considered good practice to store the sensitive data in plain text (aka the values entered into the secrets files). There are generally two approaches you can take to tackle this: encrypt the values or use a reference:    - **Encrypt the values**: In this approach, the value in the secret file is encrypted when it is committed to the Git repo. During deployment to OpenShift there is an extra step where the secret values are decrypted. `SealedSecrets` is one implementation of such an approach.    - **Use a reference**: In this case, the secrets and their values are stored in a secret manager. During deployment, a reference is provided to the secret manager which will then mount the secret to the deployed container. `HashiCorp Vault` is a common implementation of this approach.  In both cases, there is additional work to be done above what has been covered in this lab. However, the kustomize files provided in the migration bundle gives you a good starting point to identify the secrets and provide a standard output that can be transformed to suit your selected approach.   Click to expand: Section 4: (Optional)   Promote PlantsByWebSphere to the \u2018staging\u2019 environment in OpenShift     ## 4.1 Re-Deploy PlantsByWebSphere to the \u2018staging\u2019 environment in OpenShift  You have deployed the PlantsByWebSphere application with its configuration, to a \u2018dev\u2019 environment, using a single kustomize command.  In this section, you will deploy the same application again, with a different configuration, to a \u2018staging\u2019 environment, using a single kustomize command with a different overlay configuration called 'staging'.   **To do this, we need to do the following:**    - Copy the \u2018dev\u2019 overlays yaml files to a new overlays folder. We will name it \u2018staging\u2019.    - Update the environment specific configuration in the new \u2019staging\u2019 overlays folder.  ___  **Note:**   For this section of the lab, the PlantsByWebSphere application that you deploy to the \u2018staging\u2019 environment will access a different DB2 database than was used in the \u2018dev\u2019 environment.  It is typical to use different databases as the application is promoted to higher environments that support different phases of testing to production.  ___   ### 4.1.1 Setup and exaamine the 'staging' deployment configuration  In this lab, the \u2018staging\u2019 database has a different set of \u2018Trees\u2019 loaded in the catalog, compared to the \u2018dev\u2019 database.  While in a real environment, the different databases might use different database access credentials, in this lab environment, the credentials remain the same as the \u2018dev\u2019 database.  **What are the configuration changes between the \u2018dev\u2019 and \u2018staging\u2019 environments in this lab scenario?**    - The database **server** **hostname** is different between \u2018dev\u2019 and \u2018staging\u2019.  **What is staying the same between the \u2018dev\u2019 and \u2018staging\u2019 deployment?**    - The same immutable container image for PlantsByWebSphere application is used in \u2018dev\u2019 and \u2018staging\u2019    - We continue to use the same database name: PBW    - We continue to use the same database port: 50000    - We continue to use the same database access credentials  The values for the **database name, port, and host** are all stored in a **config map** yaml file. Therefore, the config map yaml file in the \u2018staging\u2019 overlay folder will be different than the config map file used in thee \u2018dev\u2019 overlay folder.  This means that to deploy the PlantsByWebSphere application to the \u2018staging\u2019 environment, all that needs to be done is to update the `DB2 hostname` in the `config map` yaml file located in the \u2018staging\u2019 overlays folder. Then run the single command to deploy the PlantsByWebSphere application to the staging environment.  **Now we are ready to start:**    - Copy the \u2018dev\u2019 overlays yaml files to a new overlays folder. We will name it \u2018staging\u2019.    - Update the environment specific configuration in the new \u2019staging\u2019 overlays folder.  To streamline executing the steps above, we have provided a `convenience shell script` that performs these steps.  You will `run the script` to setup the staging overlay, while avoiding having to perform mundane copy/paste activities in the lab.  After running the script, we will review the changes that were made to the config map yaml file.  1.  Run the following commands to setup the `overlays/staging` folder with the updated config map.           cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts          ./kustomize-staging.sh      **Note:** The script also performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.      ![A close-up of a logo Description automatically generated](./images/media/image96.png)  2.  Examine the **staging** overlay          ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize/overlays      The contents were copied \u2018as-is\u2019 from the \u2018dev\u2019 overlay directory      ![A computer screen shot of a computer Description automatically generated](./images/media/image97.png)  3.  The \u2018**staging\u2019** overlay directory contains the same 4 yaml files as the \u2018dev\u2019 overlay          ls /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize/overlays/staging      ![](./images/media/image98.png)  4.  The **plantsbywebspheree6-configmap.yaml** file contains the \u2018**staging\u2019** environment specific configuration.      Specifically, the \u201c**DataSource serverName**\u201d for the DB2 database has been updated to the \u2018staging\u2019 environment database host          gedit /home/techzone/Student/labs/appmod/pbw-bundle-complete/deploy/kustomize/overlays/staging/plantsbywebsphereee6-configmap.yaml      ![](./images/media/image99.png)   5. **`Close`** the \"gedit\" editor. **DO NOT SAVE ANY CHNAGES TO THE FILE!**   ### 4.1.2 Deploy PlantsByWebSphere to staging evironment  In this section, you will run the same steps to deploy and configure the application to the staging environment, which were used in dev.   The differecne is the configuration deltas you examined in the overlays/staging folders in the migration bundle.    1.  Run the following `convenience shell script` to deploy the PlantsByWebSphere application to the \u2018**staging\u2019** environment.      **Note:** The script performs the same steps as the deployment to the \u2018dev\u2019 environment.      ___      The script performs any necessary cleanup tasks, in the event you need to rerun the script for some unknown reason.      ___          cd /home/techzone/appmod-pot-labfiles/labs/RuntimeModernization/scripts          ./staging-deploy-pbw-ocp.sh      Notice in **`step 8`** of the script, the command to deploy the application uses the configuration from the `staging` overlay, as illustrated below.      ![A close-up of a computer code Description automatically generated](./images/media/image100.png)     When the script completes, the URL (Route) to the PlantsByWebSphere application running in the staging environment is displayed.     ![A screenshot of a computer Description automatically generated](./images/media/image101.png)   2.  Open a new browser tab and go to that URL:          http://plantsbywebsphereee6-staging.apps.ocp.ibm.edu/PlantsByWebSphere      ![A green screen with a pergola Description automatically generated](./images/media/image102.png)  3.  In the application, click on the \u201c**Trees**\u201d category. This the list of trees in the \u201c**staging**\u201d database.      ![A screenshot of a computer Description automatically generated](./images/media/image103.png)  4.  You may refer to the catalog of trees in the \u2018**dev\u2019** environment, and notice the trees are named differently in the staging environment.      a. Open a new browser tab and go to the application running in the `dev` environment.          http://plantsbywebsphereee6-dev.apps.ocp.ibm.edu/PlantsByWebSphere      ![A screenshot of a computer Description automatically generated](./images/media/image104.png)    Click to expand: Section 5: (Optional) Exploring the PlantsByWebSphere application in the proof_of_concept workspace     ## 5.1 Exploring the PlantsByWebSphere application in the proof_of_concept workspace  IBM Cloud Transformation Advisor (TA) analyzes application and configuration data collected from Java application server environments. TA delivers great insights that help organizations plan and implement a modernization journey to WebSphere Liberty and Kubernetes base container platform for existing Java applications.  TA provides recommendations for modernization which includes and considers application complexity, dependencies, potential issues, and estimated development effort.  ![A screenshot of a computer Description automatically generated](./images/media/image106.png)  1. In a browser window, return to Transformation Advisor using the following URL:           http://localhost:3000  2. Open the `proof-of-concept` workspace, if it is not already open      ![](./images/media/ta-proof-of-concept.png)   3.  Scroll down to the `Java applications` section and note the high-level summary for the \u2018**plantsbywebsphereee6.ear**\u2019application assessment.    - Complexity    - Issues    - Required code changes    - Application cost (in days for development)      ![](./images/media/image107.png)  This workspace has only a single application name `plantsbywebsphereee6.ear`. It is summarized as `simple` to  modernize to WebSphere Liberty.     ***Complexity values and their meanings:***  **`Simple`**: The application is ready for deployment, no access to the source code is required.     - Simple complexity value typically represents about 20% of applications.   **`Moderate`**: Code changes are required before deployment; however, these code changes are well known, and specific help is provided for each issue to assist in resolving it.      - Moderate complexity value typically represents about 80% of applications.   **`Complex`**: The application uses a technology that does not have a direct equivalent in the new runtime and a new approach will need to be adopted. In our experience, only about 1 in 6 customers have these kinds of applications.      - Complex complexity value typically represents less than 1% of applications.  4. Click on **plantsByWebSphereee6.ear** which will expand the analysis      ![A screenshot of a computer Description automatically generated](./images/media/image108.png)      a. Scroll down, noting the groups or categories of analysis available      - **Complexity rules**      - **Required code changes**      - **Issue details**        - Critical        - Warning        - Informational      - **Additional reports**        - Technology report        - Inventory report        - Analysis reports   5.  View the **`Analysis Report`** for more detailed application information      **Analysis Report**      The **Detailed Migration Analysis Report** does a deep dive on the preferred migration target to help you understand any migration issues, like deprecated or removed APIs, Java SE version differences, and Java EE behavioral differences.      a.  Click on the **`Analysis report`** link.       ![A screenshot of a computer Description automatically generated](./images/media/image109.png)      b. The **Analysis report** will open in a new browser tab      ![A screenshot of a computer Description automatically generated](./images/media/image110.png)       c.  Note the **target**      - Because the **source** was traditional WebSphere v8.5.5, which is Java EE 6, the target is also EE6.      - Because the source was running Jave SE 8, the target is also set to Java SE 8.      By default, Transformation advisor recommends the first step of modernization to Liberty that requires the minimal amount of change and effort.      You may use the binary scanner with the `--ta` option if you want to assess the modernization effort to newer versions Java, Jave EE, or Jakarta EE. Running the binary scanner with the `-ta` option produces an archive file that can be loaded into Transformation Advisor for analysis.      d.  Click on the **`Information`** label, to review the details of this item.      ![A screenshot of a computer Description automatically generated](./images/media/image112.png)      The **Information** rules provide migration related considerations. Be aware of these rules during testing. Many of these rules relate to connectivity to other resources that need to be considered during migration.      e.  You may review the Information rules for PlantsByWebSphere migration.      ![A screenshot of a computer Description automatically generated](./images/media/image113.png)   6.  Return to the **Cloud Transformation Advisor** browser tab that shows the **plantsbywebsphereee6.ear details** page. Then click on **`Inventory Report`**, which will open in a new browser tab.      ![A screenshot of a computer Description automatically generated](./images/media/image114.png)      a.  Scroll down and review the Inventory Report, which is especially useful in larger applications.      The **Inventory report** provides a high-level inventory of the content and structure of each application, plus information about potential deployment problems and performance considerations.      ![](./images/media/image115.png)      b.  Scroll down to the bottom of the **Inventory report** and locate **`the Contained Archives`** section.      The inventory report provides valuable insights into utility jars that are contained in the application. It also provides the \u2018package\u2019 name of the utility jar. This is extremely valuable to help determine what 3<sup>rd</sup> party utilities are used by the application.      c.  Notice the PlantsByWebSphere application contains utility jar named **\u2018pbw-lib\u2019jar**\u2019. The archive package is \u201cibm.com.websphere\u2019, indicating it is NOT a 3<sup>rd</sup> party utility jar.      ![A screenshot of a computer Description automatically generated](./images/media/image116.png)      d.  Return to the **Cloud Transformation Advisor** browser tab that shows the **plantsbywebsphereee6.ear details** page. Then click on **`Technology report`**, which will open in a new browser tab.      The **Technology report** provides details on which editions of Liberty support the technologies used by the applications.      ![A screenshot of a computer Description automatically generated](./images/media/image117.png)      a.  Scroll down Technology Report, which can quickly help assess which Java EE API technologies that the PlantsByWebSphere application uses, and which editions of Liberty the APIS are available.      ![A screenshot of a computer Description automatically generated](./images/media/image118.png)      b. As you see from the report above, the APIs used in the PlantsByWebSphere application are available in ALL editions of Liberty."},{"location":"1157-Liberty-Enterprise-Deployment-VMs/","title":"1157 - Recommended practices for WebSphere Liberty deployments and zero-migration upgrades on VMs","text":""},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#lab-1157","title":"Lab 1157:","text":""},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#recommended-practices-for-websphere-liberty-deployments-and-zero-migration-upgrades-on-vms","title":"Recommended practices for WebSphere Liberty deployments and zero-migration upgrades on VMs","text":"<p>The goal of this lab is to provide hands-on experience using recommended practices for deploying Java applications to Liberty in collectives on VMs, using automation and flexible deployment methodologies.</p> <p>You will learn how Liberty dynamic routing feature enables routing of HTTP requests to all members of Liberty collectives without regenerating the WebSphere plug-in configuration file when servers, collective members, applications, or virtual hosts are added, removed, started, stopped, or modified.</p> <p>You will also learn that Liberty follows a single stream continuous delivery model. There is only one stream of Liberty, no version upgrades necessary. Simply install new version (or fixpacks if you prefer) to get the latest performance enhancements, features, and bug fixes. Then use your existing build process to produce a new Liberty Server package that contains the updated Liberty binaries, your existing application and configuration, and then deploy to a dual installation location. This removes one of the largest headaches for managing technical debt for your applications: keeping current on software updates.</p> <p>Following these methodologies, you will gain an understanding of how you might apply your own DevOps processes or automation to achieve significant agility and flexibility managing Liberty deployments with repeatable automated processes that significantly reduces risk to your business.</p> <p>After completing the lab, you should have an appreciation for how simple Liberty is to manage though automation, which equally applies to integration with your own DevOps tools.</p> <p>This lab contains the following hands-on activities:</p> <ul> <li> <p>Build Liberty server packages using Liberty's flexible deployment model</p> </li> <li> <p>Create a Liberty-ND Collective </p> </li> <li> <p>Deploy Liberty Server packages to the Liberty-ND collective</p> </li> <li> <p>Configure Liberty-ND Dynamic Routing in the Collective Controller</p> </li> <li> <p>Upgrade Liberty using Liberty's zero-migration architecture</p> </li> </ul>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#the-lab-environment","title":"The lab environment","text":"<p>The lab environemnt consists of two Host VMs:</p> <ul> <li> <p>server0.gym.lan</p> </li> <li> <p>server1.gym.lan</p> </li> </ul> <p>You will use Linux shell scripts provided for the lab, to build Liberty server packages, construct a Liberty- ND Collective that spans two host VMs, and deploy the server package to both host VMs.</p> <p>The Liberty-ND Collective that you will create is illustrated below:</p> <p></p> <p>The \u201cserver0.gym.lan\u201d host VM, which is the primary VM, contains the following components:</p> <ul> <li> <p>Liberty Builds and Server packages:\u00a0Think of this as a \u201cbuild     machine\u201d where a build process builds the applications, runs tests,     and produces a server package that is ready to be deployed. A server     package contains the Liberty binaries, application, default server     configurations, which get deployed as a unit to host VMs.</p> </li> <li> <p>Collective Controller:\u00a0The collective controller is a Liberty     server that is configured with the \u201ccollectiveController-1.0\u201d     feature, which enables the Server to act as the management server     for the collective.</p> <p>Note:\u00a0In most cases the Collective Controller would likely be placed on a dedicated host, but to minimize the size of this demonstration environment, it\u2019s collocated with the host used for builds</p> </li> <li> <p>Collective Member:\u00a0Collective members are Liberty Servers that     run your application and are joined to the collective with the     \u201ccollectiveMember-1.0\u201d feature. Collective members can be     centrally managed and take advantage of features such as \u201cdynamic     Routing\u201d without requiring Liberty ND licenses for the collective     members.</p> <p>Note:\u00a0In most cases Liberty collective members are not located on the same host as collective controllers, but to minimize the size of this demonstration environment a collective member is collocated with a collective controller.</p> </li> <li> <p>Http Server:\u00a0The IBM HTTP server is used in some labs to     showcase Liberty capabilities such as Dynamic Routing, Session     Persistence, and fail-over scenarios.</p> <p>Note:\u00a0In most cases the HTTP server is placed on a dedicated host located in the DMZ, but to minimize the size of this demonstration environment, it\u2019s collocated with Liberty processes.</p> </li> </ul> <p>The \u201cserver1.gym.lan\u201d VM contains the following components:</p> <ul> <li>Collective Member:\u00a0Collective members are Liberty Servers that     run your application and are joined to the collective with the     \u201ccollectiveMember-1.0\u201d feature.</li> </ul>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#accessing-the-environment","title":"Accessing the environment","text":"<ol> <li> <p>Access the lab environment from your web browser.</p> <p>The lab environment page is displayed, the lab environment contains  three (3) Linux VMs, server0, server1 and instanaserver. The VM server0 is  the one with the Graphical User Interface (GUI) for you to access and work in this lab.</p> <p></p> </li> <li> <p>Click Red Hat icon to access it.</p> <p></p> </li> <li> <p>Click techzone user to log in.</p> <p></p> </li> <li> <p>Enter the password as: IBMDm0s! and press Enter.</p> <p></p> <p>Note:\u00a0That is a numeric zero in IBMDem0s!</p> <p>The lab VM GUI is displayed.</p> <p> </p> </li> </ol> <p>Tips for working in the lab environment:</p> <ol> <li> <p>You can use the VM Desktop tools to fit to window or resize the     window.</p> <p></p> </li> <li> <p>You can copy text from the lab guide into the lab     environment using the VM Desktop Send Text tool.</p> <p></p> <p>a. Copy the text from the lab guide that you want to paste into the  lab environment.</p> <p>b. Open a terminal window, or a text editor or a web browser in the VM  Desktop where you want to copy the text to.</p> <p>c. Click the Send Text icon in the VM Desktop tool bar, paste the  text into its window, then again click Send Text to send the text  to an open command shell and close its window.</p> <p></p> <p>The text is now copied to the terminal window, or the text editor or  the web browser you opened in the previous step.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#review-liberty-deployment-common-practices","title":"Review Liberty deployment common practices","text":"<p>A Liberty server is lightweight due to its modular architecture, so you can easily package a server installation and applications in a compressed zip or jar package. You can then store this package and use it to deploy the installation to different nodes or machines in your Liberty Collective.</p> <p>In this lab, you will deploy Liberty and sample applications to a Liberty-ND Collective, while following several common practices as illustrated below.</p> <p></p> <ul> <li> <p>Recommended practice:\u00a0Produce server packages as build     output</p> <p>It is recommended to create an immutable build using server packages  that include the Liberty binaries, server configuration, application,  and shared configuration as build output.</p> <p>The build output, \u201cserver package\u201d, is the deployable unit to  Liberty collective members. Using this practice is very similar to  recommended practices for container image deployments in Kubernetes  platforms.</p> </li> <li> <p>Recommended practice: Automate the build and deployment of     server packages to the collective</p> <p>Automating installation, deployment, and configuration is always  recommended to achieve greater agility, repeatability, and  productivity.</p> </li> <li> <p>Recommended practice:\u00a0Add configuration overrides to the     server after the server package is uncompressed.</p> <p>The automation scripts used in the lab follows this practice. The  server package is built as a template that contains the application,  libraries, and default configuration.</p> <p>Then, when the server package is deployed and uncompressed on the  target machine, the configuration overrides are added. These overrides  can override any default configuration from the server package.</p> </li> </ul> <p>Note:\u00a0there are several alternatives to applying the overrides to the server after expanding the archive.</p> <p>Some clients choose to override using OS environment variables that override default Values in the server.xml, other clients apply the overrides in the Liberty configuration by building the archive using the overrides in either the configDropins directory or via an include(d) external xml file in the server.xml for a specific environment.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-1-clone-the-github-repo-for-this-workshop","title":"Part 1: Clone the GitHub repo for this workshop","text":"<p>This lab requires artifacts that are stored in a GitHub repository. Run the command below to clone the repository to the local VM used for the lab.</p> <ol> <li> <p>Open a new terminal window by clicking the termical icon on the desktop.</p> <p></p> </li> <li> <p>Copy the commands below to the terminal window to clone the GitHub     repository required for the lab.</p> <pre><code>git clone https://github.com/IBMTechSales/liberty_admin_pot.git\n\ncd /home/techzone/liberty_admin_pot/lab-scripts\n\nchmod -R 755 ./\n</code></pre> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-2-produce-liberty-server-packages-as-build-output","title":"Part 2: Produce Liberty \u201cserver packages\u201d as build output","text":"<p>Following recommended practices for flexible deployment of Liberty applications, you will produce a server package as build output, which includes the Liberty runtime, server configuration, and the application, as a zip archive file.</p> <p>Producing the build output in the form of a Liberty server package zip file provides the flexibility of deploying and upgrading your version of Liberty and applications as an immutable package, like how container images are deployed to Kubernetes container platforms.</p> <p>In the lab, the <code>mavenBuid.sh</code> script provides the following capabilities for producing server packages for deployment to a Liberty collective.</p> <ul> <li> <p>Pull the application source code from the source code repository     (GitHub)</p> </li> <li> <p>Build the application and produce a Liberty Server package</p> </li> <li> <p>Store the Liberty server package in a \u201cworking directory\u201d for the     lab.</p> </li> </ul> <p>mavenBuild.sh script is NOT an official IBM tool.</p> <p>It is a simple script that we provide for this PoT to demonstrate ease of automation of common Liberty tasks. Other tools such as Gradle, Jeknins, UCD, etc can be employed based on enterprise preferences and practices</p> <p>In this section of the lab, you will use the provided shell script that automates the tasks for producing a server package for deployment to the collective.</p> <p>Use the Maven Build script to produce a Server package</p> <ol> <li> <p>Run the\u00a0Maven Build\u00a0shell script to build the applications and     produce a Liberty Server package, which will use WebSphere Liberty     kernel, version 22.0.0.8</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/mavenBuild.sh -v 22.0.0.8\n</code></pre> <p>Note:\u00a0there are additional steps performed aside from what is  depicted in the output above which only shows the completion.</p> <p></p> </li> <li> <p>Using the File viewer on the VM desktop, see that the server package     was produced.</p> <p>a. Double mouse-click on the \u201cHome\u201d\u00a0folder on the Desktop VM.</p> <p></p> <p>b. From the file explorer, navigate  to\u00a0<code>Home &gt; lab-work &gt; packagedServers</code>\u00a0directory.</p> <p>TIP:\u00a0the server package is named based on the version of Liberty  in the package, and the placeholder server name;  \u201c22.0.0.8-pbwServerX.zip\".</p> <p></p> </li> </ol> <p>What did the Maven Build do?</p> <p>The core activity performed by the script is to run Maven to build the applications and produce a Liberty Server package. The server package is somewhat customized to include additional artifacts and configuration overrides that are required to run the applications in Liberty.</p> <p>The Maven build process leverages the \u201cLiberty Maven Plugin\u201d, which provides for the capabilities to retrieve Liberty binaries from the maven repo, build the application, and create a Liberty server package.</p> <p>As illustrated below, Maven configures Liberty using the artifacts provided in the projects and produced by the build.</p> <ul> <li> <p>Maven adds the server.xml file and the application binaries (WAR,     EAR)</p> </li> <li> <p>Maven adds the configDropins/overrides as required for the     environment:</p> </li> </ul> <p></p> <p>Below is a hi-level list of tasks the maven build process performs in this lab:</p> <ul> <li> <p>Download the Liberty Kernel based on the version specified on the     command; for example, version 22.0.0.8</p> </li> <li> <p>Build the application deployable artifacts for PlantsByWebSphere     and WhereAmI applications: EAR, WAR, JAR</p> </li> <li> <p>Create a Liberty Server named \u201cpbwServerX\u201d as a template server     that is used for multiple deployments to the collective.</p> </li> <li> <p>Add the two example applications to the server configuration</p> </li> <li> <p>Add the required DB2 libraries to the server</p> </li> <li> <p>Replace the server.xml server configuration file with the server.xml     generated by Transformation Advisor</p> </li> <li> <p>Add the \u201cmemberOverrides.xml\u201d config/overrides file</p> </li> <li> <p>Install all the Liberty features as required by     the\u00a0server.xml\u00a0file</p> </li> <li> <p>Install the Collective Member feature so servers can be included as     members in a Liberty Collective</p> </li> <li> <p>Install the Session Database feature so the application will     function with session persistence with fail-over</p> </li> <li> <p>Produce the Liberty Server package as a zip file, containing the     Liberty binaries, applications, and the default configurations</p> </li> </ul> <p>The output from the \u201cmavenBuild\u201d script is a Liberty Server package. The server package is in the following working directory.</p> <p>/home/techzone/lab-work/packagedServers</p> <p></p> <p>Congratulations!\u00a0You have used Maven and successfully produced a Liberty server package, which adheres to the flexible deployment recommended practices.</p> <p></p> <p>Now that you have a server package, it can be deployed to local or remote hosts (VMs / machines) where the Liberty collective members will host the sample applications.</p> <p>In the next sections of the lab, you will continue the recommended practice of using automation to create a <code>Liberty Collective</code> and deploy the server package to two hosts (VMs), and add the deployed servers to the Liberty Collective, where the servers can be centrally managed by the collective.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-3-create-a-liberty-collective-controller","title":"Part 3: Create a Liberty Collective Controller","text":"<p>A\u00a0<code>Liberty-ND Collective</code>\u00a0is a set of Liberty servers in a single management domain.</p> <p>A collective consists of at least one server with the\u00a0collectiveController-1.0\u00a0feature enabled that is called a\u00a0collective controller.</p> <p>TIP:\u00a0Liberty Servers that function as Collective Controllers MUST have Liberty ND licenses, as these servers use the\u00a0collectiveController-1.0\u00a0feature that is only available with Liberty-ND.</p> <p>The collective controller provides for a centralized administrative control point to perform operations such as MBean routing, file transfer, operational control, and monitoring</p> <p>A core role of collective controllers is to receive information, such as MBean attributes and operational state, from the members within the collective so that the data can be retrieved readily without having to invoke an operation on each individual member.</p> <p>A collective can have many servers with the\u00a0<code>collectiveMember-1.0</code>\u00a0feature enabled in application servers that are called\u00a0collective members.</p> <p></p> <p>In this section of the lab, you will create the\u00a0<code>Collective</code>\u00a0and the\u00a0<code>Collective Controller</code>\u00a0using automation, via the\u00a0<code>createController.sh</code> shell script.</p> <p>The \u201ccreateController.sh\u201d script provides the following capabilities</p> <ul> <li> <p>Create the Collective and Collective Controller</p> </li> <li> <p>Install the\u00a0Liberty Admin Center\u00a0application into the Controller     server</p> </li> <li> <p>Start the Collective Controller server</p> </li> </ul> <ol> <li> <p>Run commands below in the same command shell as you used to build     the serverPackage, to create a Liberty collective controller:</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/createController.sh\n</code></pre> <p>The createController.sh script creates a Liberty server  named\u00a0CollectiveController.</p> <p>The CollectiveController server is in the following directory:</p> <p>/home/techzone/lab-work/liberty-controller/wlp/usr/servers</p> <ul> <li> <p>The CollectiveController server is configured with the\u00a0<code>collectiveController-1.0</code>\u00a0feature which enables the server to act as the managing server for a collective</p> </li> <li> <p>The CollectiveController server is also configured with the\u00a0<code>adminCenter-1.0</code>\u00a0feature, which installs the \u201cLiberty Admin Center\u201d UI application.</p> </li> <li> <p>The CollectiveController server runs on HTTPS port\u00a09491\u00a0in this lab</p> </li> </ul> <p></p> </li> <li> <p>Once the collective controller is started, click its\u00a0Admin Center     URL\u00a0to launch it in a browser window, then enter the login     credentials as:\u00a0admin\u00a0/\u00a0admin.</p> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d, &gt;  click\u00a0Advanced..-&gt;scroll down and _&gt;Accept Risk and Continue\u00a0to  continue.</p> <p></p> </li> <li> <p>Login to the\u00a0Admin Center\u00a0using     credentials:\u00a0admin\u00a0/\u00a0admin.</p> <p></p> <p>The Liberty Collective \u201cAdmin Center\u201d\u00a0UI is displayed.</p> <p></p> </li> <li> <p>Click the\u00a0<code>Explore</code>\u00a0icon to display the servers, applications, and     hosts in the Collective.</p> <p></p> <p>The collective resource list is displayed, and you can see that you  have:</p> <ul> <li> <p>one server \u2013 The collective controller server</p> </li> <li> <p>one host \u2013 the local host that the controller is running on</p> </li> <li> <p>one runtime \u2013 Liberty runtime</p> </li> </ul> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-4-create-liberty-collective-members","title":"Part 4: Create Liberty Collective Members","text":"<p>The collective members are the Liberty servers that run your applications. For Liberty servers to join a collective, the servers must have the\u00a0<code>collectiveMember-1.0</code>\u00a0feature enabled.</p> <p>Membership in a Liberty collective is optional. Liberty servers join a collective by registering with a collective controller to become members. Members share information about themselves with the controller through the controller operational repository.</p> <p></p> <p>In this section of the lab, you will join Liberty servers as collective members to the collective, using the server package that you produced previously in the lab.</p> <p>That server package you created, includes the Liberty binaries, the sample applications, and default server configuration overrides.</p> <p>The\u00a0collectiveMember-1.0\u00a0feature was installed and enabled for the Liberty server that is in the server package.</p> <p>In this lab, you use the \u201c<code>addMember.sh</code>\u201d script to deploy the server packages to the nodes, create the collective members, and join the members to the collective.</p> <p>The addMember.sh script performs the following tasks:</p> <ul> <li> <p>Register the Host machine if it is remote VM from the Controller</p> </li> <li> <p>Copy or send the server package to the host machine where Liberty     will be deployed</p> </li> <li> <p>Unzip the server package, which is an archive installation of     Liberty on the hosts machines (VMs)</p> </li> <li> <p>Apply server configuration overrides for the specific collective     member</p> </li> <li> <p>Join the collective member to the collective</p> </li> <li> <p>Open application port and Collective Controller port for remote     hosts</p> </li> </ul> <p>This script adds collective members, one to the local host VM, server0.gym.lan, another to the remote host VM, server1.gym.lan.</p> <p>Use the automation script to deploy the Liberty servers from the server package you created earlier and join them as a member to the collective.</p> <ol> <li>In the same command shell as before, run the addMember.sh script     twice with different input parameters as shown to create two Liberty     servers.<pre><code>/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n  appServer1 -v 22.0.0.8 -p 9081:9441 -h server0.gym.lan\n\n/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n  appServer2 -v 22.0.0.8 -p 9082:9442 -h server1.gym.lan\n</code></pre> </li> </ol> <p>When the script completes, the server\u00a0appServer1\u00a0and  server\u00a0appServer2\u00a0are created and added to the collective.</p> <ol> <li> <p>Go back to the Liberty collective\u00a0Admin Center\u00a0page and you can     see the total number of servers is now 3 with the appServer1     and\u00a0appServer2 added.</p> <p></p> </li> <li> <p>Click the\u00a0SERVERS\u00a0icon to go to its details page.</p> <p></p> <p>You see the appServer1 and\u00a0appServer2 have been added to the  server list and they are in the\u00a0Stopped\u00a0state.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-5-verify-the-application-deployment-in-the-collective","title":"Part 5: Verify the application deployment in the collective","text":"<p>You have deployed two Liberty servers as the collective members. In this section, you will start these two servers from the Liberty Admin Center and run the example applications on the individual Liberty servers to ensure the applications run properly.</p> <ol> <li> <p>Start the DB2 application database for PlantsByWebSphere</p> <p>The PlantsByWebSphere application requires an application database, which you need to ensure is up and running.</p> <p>a.  Before starting the Liberty servers, you need to start the db2 database used by the\u00a0PlantsByWebSphere\u00a0application with the command below.</p> <pre><code>docker start db2_demo_data\n</code></pre> </li> <li> <p>Start the Liberty servers from the Admin Center</p> <p>a.  In the server details page, click the dropdown menu icon of\u00a0<code>appServer1</code>\u00a0and select\u00a0<code>Start</code>\u00a0to start the server.</p> <p></p> <p>Note:\u00a0If prompted for credentials, enter the Admin Center username  and password as:\u00a0admin / admin.</p> <p>c.  Click\u00a0<code>Start</code>\u00a0to confirm the start\u00a0appServer1\u00a0server command.</p> <p></p> <p>Server\u00a0appServer1\u00a0will start, and you can see it is now in  the\u00a0Running\u00a0state.</p> <p>The appServer1 server now shows it has two applications <code>running</code>, which  are used in the labs in this workshop.</p> <ul> <li> <p>PlantsByWebSphere</p> </li> <li> <p>WhoAmI</p> </li> </ul> <p></p> </li> <li> <p>Repeat the same server start procedure for\u00a0<code>appServer2</code>\u00a0server.     Once it is done, the\u00a0appServer2\u00a0server is started as show below:</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#51-test-the-two-example-applications-used-in-the-lab","title":"5.1 - Test the two example applications used in the lab","text":"<p>In this section, you will test the two applications that are deployed in the collective.</p> <p>Test the PlantsByWebSphere application:</p> <ol> <li> <p>To access the\u00a0PlantsByWebSphere\u00a0application on appServer1</p> <p>a. Open a new tab on the Firefox browser, enter the following URL to  test PlantsByWebSphere on\u00a0appServer1, which is  on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d, &gt;  click\u00a0Advanced..-&gt;scroll down and -&gt;Accept Risk and Continue\u00a0to  continue.</p> <p></p> <p>b. In the application, click on the \u201cFlowers\u201d tab to view the  catalog of flowers. This action retrieves catalog details from the  application DB2 database.</p> <p></p> </li> <li> <p>Repeat the steps to access the\u00a0PlantsByWebSphere\u00a0application on     appServer2 on host server1.gym.lan</p> <p>a. Open a new tab on the Firefox browser and test  PlantsByWebSphere on\u00a0appServer2, which is  on\u00a0server1.gym.lan</p> <pre><code>https://server1.gym.lan:9442/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d, &gt;  click\u00a0Advanced..-&gt;scroll down and -&gt; Accept Risk and Continue\u00a0to  continue.</p> <p></p> </li> </ol> <p>Test the WhereAmI application:</p> <ol> <li> <p>To access the\u00a0WhereAmI\u00a0application on appServer1.</p> <p>a. Open a new tab on the Firefox browser and enter the following URL  to test WhereAmI on\u00a0appServer1, which is  on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/WhereAmI\n</code></pre> <p></p> </li> <li> <p>Repeat the steps to access the\u00a0WhereAmI\u00a0application on     appServer2 on host server1.gym.lan.</p> <p>a. Open a new tab on the Firefox browser and test WhereAmI  on\u00a0appServer2, which is on\u00a0server1.gym.lan</p> <pre><code>https://server1.gym.lan:9442/WhereAmI\n</code></pre> <p></p> </li> <li> <p>Close\u00a0the browser windows / tabs displaying the     PlantsByWebSphere and WhereAmI applications.</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-6-configure-dynamic-routing-application-high-availabilty","title":"Part 6: Configure Dynamic Routing application High Availabilty","text":"<p>In this section, you configure the `Dynamic Routing`` feature to route HTTP requests to members of Liberty collectives without having to regenerate the WebSphere plug-in configuration file when the environment changes.</p> <p>The Dynamic Routing feature, <code>dynamicRouting-1.0</code>, provides the Dynamic Routing service, which dynamically retrieves routing information from the collective repository and delivers this information to the WebSphere plug-in.</p> <p>To configure dynamic routing for a Liberty collective, you need to perform the following tasks:</p> <ul> <li> <p>Add dynamicRouting-1.0 feature to the Collective controller</p> <p>This feature must be added to the Collective Controller\u2019s server.xml  file.</p> </li> <li> <p>Create a Plug-in configuration file for the HTTP Server</p> <p>The \u201cdynamicRouting setup\u201d command generates the \u201ckeystore\u201d and  \u201cplug-in configuration files\u201d required for dynamic routing.</p> </li> <li> <p>Establish a secure connection between the plug-in and the     collective controller</p> </li> </ul> <p>The generated plug-in configuration file and keys must be copied to  the appropriate locations to establish the secure connection.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#61-setup-dynamic-routing-in-websphere-liberty","title":"6.1 - Setup Dynamic Routing in WebSphere Liberty","text":"<p>In this section, you will use an automation script, which we provide in the lab environment, to perform the steps described above to setup and configure Dynamic Routing.</p> <ol> <li> <p>Run the <code>setupDynamicRouting.sh</code> script shown below in the same     command shell you used previously, to setup the plugin configuration     for dynamic routing.</p> <p>The\u00a0setupDynamicRouting.sh\u00a0script performs all the tasks described  above which configures dynamic routing in the collective</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/setupDynamicRouting.sh\n</code></pre> <p>Once the command is completed, the pug-in configuration files are  created and configured for the IHS server.</p> <p></p> </li> </ol> <p>Dynamic routing in the Liberty Collective is now ready to use!</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#62-examine-the-generated-plugin-cfgxml-file","title":"6.2 - Examine the generated \u201cplugin-cfg.xml\u201d file","text":"<p>The\u00a0<code>plugin-cfg.xml</code>\u00a0file contains configuration information that determines how the web server plug-in forwards requests to the Liberty servers in the collective.</p> <p>The plugin only needs to connect to the Collective Controller to get topology information. It does not need to know the host/port of the application servers.</p> <p>The plugin-cfg.xml file is in the following directory:</p> <p>/opt/IBM/WebSphere/Plugins/config/webserver1</p> <ol> <li> <p>Examine the generated\u00a0plugin-cfg.xml</p> <pre><code>gedit /opt/IBM/WebSphere/Plugins/config/webserver1/plugin-cfg.xml\n</code></pre> <p>With Dynamic Routing, HTTP requests are sent to members of Liberty  collectives without regenerating the WebSphere plug-in configuration  file when the environment changes.</p> <p>Note: The plugin-cfg.xml no does not contain the host and port  information for the application servers or the application URL, etc.  as is the case with the static HTTP server plugin. Instead, the  plugin-cfg.xml contains the host and port information for the  collective controller which provides the application and application  server information dynamically to the plugin.</p> <p>When servers, cluster members, applications, or virtual hosts are  added, removed, started, stopped, or modified; the new information is  dynamically delivered to the WebSphere plug-in from the Liberty  Collective Controller.</p> <p>In this configuration, requests are routed based on up-to-date  information.</p> <p></p> </li> <li> <p>Close\u00a0the\u00a0gedit\u00a0editor. DO NOT SAVE ANY CHANGES!</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#63-examine-the-web-servers-httpdconf-file","title":"6.3 - Examine the Web Server\u2019s \u201chttpd.conf\u201d file","text":"<p>The\u00a0<code>httpd.conf</code>\u00a0file contains the HTTP Server configuration.</p> <p>The WebSphere plug-in module is loaded by appending configuration to the httpd.conf file in the web server.</p> <p>The web server\u2019s httpd.conf file is in the following directory:</p> <p>/opt/IBM/HTTPServer/conf</p> <ol> <li> <p>Examine the generated\u00a0httpd.conf\u00a0file</p> <pre><code>gedit /opt/IBM/HTTPServer/conf/httpd.conf\n</code></pre> <p>a. Scroll to the last line of the httpd.conf file, which is the  configuration to load the WebSphere plugin module.</p> <p>b. Notice the configuration points to the\u00a0plugin-cfg.xml\u00a0file,  which is used to determine how to direct the http requests to the  Liberty servers in the collective.</p> <p></p> </li> <li> <p>Close\u00a0the\u00a0gedit\u00a0editor. DO NOT SAVE ANY CHANGES!</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-7-testing-the-dynamic-routing-features","title":"Part 7: Testing the Dynamic Routing Features","text":"<p>In this section, you are going to test the dynamic routing you configured for the Liberty collective.</p> <p>You are going to conduct two testing scenarios:</p> <ul> <li> <p>In the first test case, you are using     the\u00a0PlantsByWebSphere\u00a0application to test the high     availability of the application and verify you can always access the     application directly from the IHS server if at least one of the     member servers is running.</p> <p>When you stop one of the app servers, the dynamic routing  automatically redirects the traffic to another surviving app server  without any user intervention or application interruption.</p> </li> <li> <p>The second test case demonstrates round robin load balancing and the     dynamic routing distributes traffic to the collective members based     on their workloads.</p> <p>The\u00a0WhereAmI\u00a0application is used in this testing because it does  NOT use sticky sessions, whereas the PlantsByWebSphere application  does.</p> <p>When you refresh the application URL link in the web browser window,  you can see the dynamic routing performs round-robin style routing  among the servers.</p> </li> </ul> <p>Test Case 1:</p> <p>This test case uses PlantsByWebSphere application. The design of this application uses HTTP Sessions to store application state in the internal http session object. By default, the http session object is local to the Liberty server, and not persisted in any external store.</p> <p>WebSphere traditional and WebSphere Liberty use a JSESSIONID in this case, which identifies the server handing the request that includes uses an http session. Then on subsequent transactions or requests, the JSESSIONID is read by the web server plugin, and requests continue to be routed to the SAME server.</p> <p>If the server handing the requests goes down, then the web server plugin will redirect the requests to any surviving servers.</p> <p>However, without session persistence configured, any session data is lost, such as items in a shopping cart, or login cookies, etc.</p> <ol> <li> <p>To access the\u00a0PlantsByWebSphere\u00a0application through IHS     server and plugin, open a new browser window and enter the     application URL as:</p> <pre><code>https//server0.gym.lan:8443/PlantsByWebSphere\n</code></pre> <p>The application \u201cHome\u201d page\u00a0is displayed.</p> <p></p> </li> <li> <p>You can navigate and visit different pages of the application. You     can see that although the application is running on two Liberty     servers with different HTTP/HTTPS ports, the dynamic routing     function of the Liberty collective is able to direct the incoming     traffic through the specified IHS server HTTPS port (8443) to the     application.</p> <p></p> </li> <li> <p>Click the\u00a0Help\u00a0link to go to application\u00a0Help\u00a0page.</p> <p></p> <p>The application Help page is displayed. On this page, you can see  which Liberty server the request was routed.</p> <p>As showing in the screen shot below, the application is running  from\u00a0appServer2\u00a0which might be different in your case.</p> <p></p> </li> <li> <p>Stop\u00a0the Liberty server that is identified as handling the     request, as shown on the PlantsByWebSphere     application\u00a0\"Help\"\u00a0page.</p> <p>a. Go back to Liberty collective\u00a0Admin Center Servers\u00a0page.</p> <p>b.\u00a0Stop\u00a0the server that was identified on the application Help  page, as illustrated below:</p> <p></p> <p>If prompted, enter the Admin Center credentials as:\u00a0admin / admin.</p> <p>The server is stopped.</p> <p></p> </li> <li> <p>From the\u00a0PlantsByWebSphere\u00a0application page, click the     \u201cFlowers\u201d tab, to show the catalog of flowers.</p> <p></p> </li> <li> <p>Click the\u00a0Help\u00a0link to go to application\u00a0Help\u00a0page, you can     see now the application is running from a different application     server.</p> <p></p> <p>This demonstrates that the Liberty dynamic routing detects the  application server is down and directs the traffic to another  application server automatically.</p> <p>The application high availability test is completed.</p> </li> </ol> <p>Test Case 2:</p> <p>In this test case, the\u00a0WhereAmI\u00a0application is used. This application does not use http sessions, and therefore the web server plugin can direct requests to the Liberty servers in a round-robin style.</p> <ol> <li> <p><code>Start</code>\u00a0both application servers (<code>appServer1</code> and     <code>appServer2</code>) from Liberty collective Admin Center.</p> </li> <li> <p>Open a new browser window and enter the\u00a0<code>WhereAmI</code>\u00a0application URL     as:</p> <pre><code>https://server0.gym.lan:8443/WhereAmI\n</code></pre> <p>The output shows that currently the application is running  from\u00a0appServer1\u00a0server.</p> <p>In your test, you may see\u00a0appSever2\u00a0handing the initial request.</p> <p></p> </li> <li> <p>Refresh the application page by clicking the\u00a0refresh icon\u00a0on the     browser.</p> <p>You can see the output showing that Liberty dynamic routing feature  directs the request traffic to other application server in a  round-robin fashion.</p> <p></p> </li> <li> <p>Refresh the browser again a few more times and see that the requests     get routed to\u00a0appServer1\u00a0and\u00a0appServer2\u00a0accordingly.</p> <p>The round robin load balancing test is completed.</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-8-produce-a-new-server-package-using-liberty-220012","title":"Part 8: Produce a new \u201cserver package\u201d using Liberty 22.0.0.12","text":"<p>In this section of the lab, you will use the same automated <code>mavenBuild</code> script that was used in previous labs to produce a NEW Liberty server package, with only one notable difference; the server package will include Liberty <code>22.0.0.12</code> instead of 22.0.0.8.</p> <p>Producing the build output in the form of a Liberty server package zip file provides the flexibility of deploying and upgrading your version of Liberty and applications as an immutable package, like how container images are deployed to Kubernetes container platforms.</p> <p>In this section of the lab, you will use the provided shell script that automates the tasks for producing a server package for deployment to the collective.</p> <p>Use the Maven Build script to produce a Server package with Liberty 22.0.0.12</p> <ol> <li> <p>Run the following command to build the applications and produce a     server package, which will use WebSphere Liberty kernel, version     22.0.0.12</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/mavenBuild.sh -v 22.0.0.12\n</code></pre> <p>Take note that a new Liberty server package was created with the name:  <code>22.0.0.12-pbwServerX.zip</code></p> <p></p> <p>The output from the \u201cmavenBuild\u201d script is a Liberty Server  package.</p> <p>The server package is in the following working directory.</p> <p>/home/techzone/lab-work/packagedServers</p> </li> <li> <p>Using the File viewer on the VM desktop, see that the server package     was produced.</p> <p>a. Double mouse-click on the \u201cHome\u201d\u00a0folder on the Desktop VM</p> <p></p> <p>b. From the file explorer, navigate  to\u00a0<code>Home &gt; lab-work &gt; packagedServers</code>\u00a0directory.</p> <p>TIP:\u00a0the server package is named based on the version of Liberty  in the package, and the placeholder server name;  \u201c22.0.0.12-pbwServerX.zip.</p> <p></p> </li> </ol> <p>Congratulations!\u00a0You have used Maven and successfully produced a new Liberty server package that contains your applications and WebSphere Liberty 22.0.0.12.</p> <p></p> <p>In the next sections of the lab, you will continue the best practice of using automation to deploy the server package to two hosts (VMs) and join the deployed servers to the Liberty Collective.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-9-deploy-the-new-server-package-to-the-collective","title":"Part 9: Deploy the new server package to the Collective","text":"<p>In this section of the lab, you deploy new Liberty servers as collective members to the collective, using the server package that you produced in the previous section of the lab.</p> <p>That server package you created, includes the Liberty binaries for 22.0.0.12 and your SAME sample applications using the SAME default server configuration as the previous deployment in Liberty 22.0.0.8.</p> <p>In this lab, you use the same <code>addMember.sh</code> script used in previous labs to deploy the server packages to the nodes, deploy the server package, create the collective members, and join the members to the collective.</p> <p>Launch the Liberty Admin Center in the Web Browser</p> <ol> <li> <p>If the Liberty Adin Center is not already open in the Web Browser,     open it now, using the following URL:</p> <pre><code>https://server0.gym.lan:9491/adminCenter/\n</code></pre> </li> <li> <p>Login to the\u00a0Admin Center\u00a0using     credentials:\u00a0admin\u00a0/\u00a0admin.</p> <p></p> <p>The Liberty Collective \u201cAdmin Center\u201d\u00a0UI is displayed.</p> <p></p> </li> <li> <p>Click the\u00a0<code>Explore</code>\u00a0icon to display the servers, applications, and     in the Collective.</p> <p></p> </li> <li> <p>Click the\u00a0<code>Servers</code>\u00a0view to display the servers in the Collective.</p> <p>Note:\u00a0You should already see two servers deployed in the  collective.</p> <p>The servers are running\u00a0Liberty 22.0.0.8. And the server should be  in the \u201cRunning\u201d state.</p> </li> <li> <p>If the appServer1 or appServer2 servers are NOT running, go ahead     and start them now.</p> <p>These servers were deployed in the previous labs.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#91-deploy-collective-member-to-the-local-host-vm-server0gymlan","title":"9.1 - Deploy collective member to the local host VM, server0.gym.lan","text":"<p>Use the automation script to deploy the Liberty server from the server package you created earlier and join the member to the collective.</p> <p>The script below performs the following:</p> <ul> <li> <p>deploy the server package for Liberty version 22.0.0.12</p> </li> <li> <p>Apply overrides for the HTTP and HTTPS ports with \u201c9081 / 9441\u201d</p> </li> <li> <p>Rename the default server name with \u201cappServer1\u201d</p> </li> <li> <p>Join the server to the collective</p> </li> </ul> <ol> <li> <p>From the same terminal window on the VM, run the command below to     create a local Liberty collective member on\u00a0server0.gym.lan\u00a0VM     using the 22.0.0.12 server package.</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n appServer1 -v 22.0.0.12 -p 9081:9441 -h server0.gym.lan\n</code></pre> <p></p> <p>When the script completes, the server\u00a0appServer1\u00a0with Liberty  22.0.0.12 is created and added to the collective.</p> <p>The\u00a0addMember.sh\u00a0script created a local Liberty server  called\u00a0appServer1\u00a0in the following directory on  the\u00a0server0.gym.lan\u00a0VM:</p> <p>/home/techzone/lab-work/liberty-staging/22.0.0.12-appServer1/wlp/usr/servers</p> </li> <li> <p>Go back to the Liberty collective Admin Center\u2019s Server page. You     can see that the\u00a0<code>appServer1</code>\u00a0server in directory     <code>22.0.0.12-appServer1</code> is added to the collective as a new     server.</p> <p>The Server is in the \u201cStopped\u201d state.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#92-deploy-a-collective-member-to-the-remote-host-vm-server1gymlan","title":"9.2 - Deploy a collective member to the remote host VM, server1.gym.lan","text":"<p>Now, run the script again, using slightly different parameters, to deploy Liberty to the remote VM,\u00a0server1.gym.lan. And, then join the remote member to the collective.</p> <p>Joining remote members to a collective requires a couple of additional steps that the script performs for you in the lab environment and are identified below.</p> <ol> <li> <p>Run command below to create a remote Liberty collective member     on\u00a0server1.gym.lan\u00a0VM, specifying a different server name and     ports.</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n  appServer2 -v 22.0.0.12 -p 9082:9442 -h server1.gym.lan\n</code></pre> <p></p> </li> </ol> <ul> <li> <p>When the script completes, the server\u00a0<code>appServer2</code>\u00a0with Liberty     <code>22.0.0.12</code> is created and added to the collective.</p> </li> <li> <p>The\u00a0addMember.sh\u00a0script created a local Liberty server     called\u00a0appServer2\u00a0in the following directory on     the\u00a0server1.gym.lan\u00a0VM:</p> <p>/opt/IBM/liberty-staging/22.0.0.12-appServer2/wlp/usr/servers</p> </li> <li> <p>The server uses\u00a09082\u00a0and\u00a09442\u00a0as its HTTP/HTTPS ports, as     defined ad script input parameters.</p> </li> </ul> <ol> <li> <p>Go back to the Liberty collective Admin Center\u2019s \u201cservers\u201d view. You can see the new member,\u00a0<code>appServer2</code>, has been added to     the server list and is the\u00a0<code>Stopped</code>\u00a0state.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#93-ripple-start-the-new-220012-servers","title":"9.3 - Ripple Start the new 22.0.0.12 servers","text":"<p>Now that the new Liberty servers with Liberty version 22.0.0.12 have been deployed to the collective, all you need to do now is ripple start the servers.</p> <p>Ripple starting the servers will allow the new application servers to accept incoming request without incurring an application outage.</p> <p>The ripple start will be manually performed in the Admin Center in this lab. However, like the other automated scripts you have used, this process can also be easily automated.</p> <p>Steps to ripple start the new servers:</p> <ul> <li> <p>Stop 22.0.0.8-appServer1</p> </li> <li> <p>Start 22.0.0.12-appServer1</p> </li> <li> <p>Stop 22.0.0.8-appServer2</p> </li> <li> <p>Start 22.0.0.12-appServer2</p> </li> </ul> <ol> <li> <p>Before starting the Liberty servers, you need to ensure the db2     database used by the\u00a0PlantsByWebSphere\u00a0application is running.</p> <pre><code>docker start db2_demo_data\n</code></pre> </li> <li> <p><code>Stop</code>\u00a0the collective member <code>22.0.0.8-appServer1</code>\u00a0from the     Liberty Admin Center.</p> <p>a. In the\u00a0server\u00a0details page, click the dropdown menu icon of  \u201c22.0.0.8-appServer1\u201d\u00a0and select\u00a0Stop\u00a0to stop the server.</p> <p></p> <p>Note:\u00a0If prompted for credentials, enter the Admin Center username  and password as:\u00a0admin / admin.</p> <p>b. Click\u00a0<code>Stop</code>\u00a0to confirm the stop  for\u00a022.0.0.8-appServer1\u00a0server</p> <p></p> <p>Server\u00a0appServer1\u00a0will stop, and you can see it is now in  the\u00a0Stopped\u00a0state.</p> <p>.</p> </li> <li> <p>Start\u00a0the collective member \u201c22.0.0.12-appServer1\u201d from the     Liberty Admin Center.</p> <p>a. In the\u00a0server\u00a0details page, click the dropdown menu icon of  \u201c22.0.0.12-appServer1\u201d\u00a0and select\u00a0Start\u00a0to start the server.</p> <p></p> <p>b. Click\u00a0<code>Start</code>\u00a0to confirm the stop  for\u00a022.0.0.12-appServer1\u00a0server.</p> <p></p> <p>Server\u00a022.0.0.12-appServer1\u00a0will start, and you can see it is now  in the\u00a0Running\u00a0state.</p> <p>.</p> </li> </ol> <p>Checkpoint of the current state</p> <p>At this point, you should see the following server states:</p> <p>On VM server0.gym.lan:</p> <ul> <li> <p>22.0.0.8-appServer1 -\u00a0Stopped</p> </li> <li> <p>22.0.0.12-appServer1 -Running</p> <p></p> </li> </ul> <p>On VM server1.gym.lan:</p> <ul> <li> <p>22.0.0.8-appServer2 -\u00a0Running</p> </li> <li> <p>22.0.0.12-appServer2 -Stopped</p> <p></p> </li> </ul> <p>Next, ripple start the\u00a022.00.12-appServer2\u00a0server on VM\u00a0server1.gym.lan\u00a0following the same steps as above.</p> <ol> <li> <p><code>Stop</code>\u00a0the collective member\u00a0<code>22.0.0.8-appServer02</code>\u00a0from the     Liberty Admin Center.</p> </li> <li> <p><code>Start</code>\u00a0the collective member\u00a0<code>22.0.0.12-appServer02</code>\u00a0from the     Liberty Admin Center.</p> <p>The final state should reflect the 22.0.0.12 servers are RUNNING, and the 22.0.0.8 servers are STOPPED.</p> <p></p> <p>Congratulations!\u00a0You have just completed the upgrade from Liberty 22.0.0.8 to 22.0.0.12 using WebSphere Liberty\u2019s zero-migration architecture and common practices for deployments using immutable server packages for flexible deployments.</p> <p></p> <p>The final activity in this lab is to demonstrate the applications continue to run as-is after the upgrade.</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#part-10-test-the-applications-after-the-liberty-upgrade","title":"Part 10: Test the applications after the Liberty upgrade","text":"<p>You have successfully ripple started the new 22.0.0.12 servers in the collective.</p> <p>In this section, you will test the PlantsByWebSphere and WhereAmI applications and ensure the applications run properly after the upgrade to Liberty 22.0.0.12.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#101-test-the-plantsbywebsphere-application","title":"10.1 - Test the PlantsByWebSphere application:","text":"<ol> <li> <p>To access the\u00a0PlantsByWebSphere\u00a0application on appServer1</p> <p>a. Open a new tab on the Firefox browser and test PlantsByWebSphere  on\u00a0appServer1, which is on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0You will likely see the \u201cWarning: Potential Security Risk  Ahead\u201d, click Advanced-&gt;. scroll down-&gt;Accept Risk and Continue to  continue. The warning occurs because new self-signed certs were  created when deploying the new application server version.</p> <p></p> <p>b. In the application, click on the \u201cHelp\u201d link, located on the  upper right corner of the application page.</p> <p></p> <p>c. On the \u201cHelp\u201d page, you will see the Server name and the  version of Liberty that is running for the server that handled this  specific request.</p> <p></p> <p>d. In the application, click the \u201cHome\u201d link to return to the  PlantsByWebSphere Home page.</p> <p></p> </li> <li> <p>OPTIONAL: Repeat the steps to access     the\u00a0PlantsByWebSphere\u00a0application on appServer2 on host     server1.gym.lan</p> <pre><code> https://server1.gym.lan:9442/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d,  click Advanced..-&gt;Accept Risk and Continue to continue.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#102-test-the-whereami-application","title":"10.2 - Test the WhereAmI application:","text":"<ol> <li> <p>To access the\u00a0WhereAmI\u00a0application on appServer1</p> <p>a. Open a new tab on the Firefox browser and test WhereAmI  on\u00a0appServer1, which is on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/WhereAmI\n</code></pre> <p>b. Note that the application is running on Liberty version 22.0.0.12</p> <p></p> </li> <li> <p>OPTIONAL: Repeat the steps to access the\u00a0WhereAmI\u00a0application on     appServer2 on host server1.gym.lan</p> <pre><code>https://server1.gym.lan:9442/WhereAmI\n</code></pre> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#103-test-dynamic-routing-after-the-liberty-upgrade","title":"10.3 - Test Dynamic Routing after the Liberty upgrade","text":"<p>In this part of the lab, you demonstrate that Liberty\u2019s Dynamic Routing capabilities is now automatically directing incoming requests from the HTTP server to the new Liberty 22.0.0.12 servers, after the upgrade.</p> <ol> <li> <p>To access the\u00a0WhereAmI\u00a0application through the IBM HTTP Server     and plugin, open a new browser window and enter the application URL     as:</p> <pre><code>https://server0.gym.lan:8443/WhereAmI\n</code></pre> <p>The output shows the application running on\u00a0appServer1\u00a0on the  initial request.</p> <p>Note:\u00a0It is possible that the request is routed  to\u00a0appServer2\u00a0instead of appServer1.</p> <p>Importantly, note the Liberty Version is:\u00a022.0.0.12, validating  that the Dynamic Routing capability has automatically detected the new  Liberty Servers and is directing incoming requests to the new Liberty  22.0.0.12 servers after the upgrade.</p> <p></p> </li> <li> <p>Refresh the application page by clicking the     Browsers\u00a0refresh\u00a0icon on the page.</p> <p>You can see the output showing that Liberty dynamic routing feature  directs the request traffic to\u00a0appServer2\u00a0server.</p> <p></p> </li> <li> <p>Refresh the browser again a few more times and see that the requests     get routed to\u00a0appServer1\u00a0and\u00a0appServer2\u00a0accordingly.</p> <p>The round robin load balancing test is completed.</p> </li> </ol> <p>Congratulations!</p> <p>You have successfully completed the lab \u201cLiberty Deployment on VMs\u201d</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/#summary","title":"Summary","text":"<p>In the lab, you followed the best practices to deploy and configure Liberty Collective and upgrade the version of Liberty in the Collective</p> <p>Following this methodology, you gained an understanding of how you might apply your own build processes or automation to achieve significant agility and flexibility managing Liberty collectives with repeatable automated processes that significantly reduces risk to your business.</p> <p>You have gained an appreciation for Liberty\u2019s \u201czero-migration\u201d architecture and how simple it is to upgrade Liberty following the common practices described in the lab.</p> <p>In this lab, you have completed the following administrative activities in Liberty Collective on VMs implementation :</p> <ul> <li> <p>Build Liberty server packages</p> </li> <li> <p>Create a Liberty Collective</p> </li> <li> <p>Deploy Liberty Server packages to the collective</p> </li> <li> <p>Configure and work with Liberty Dynamic Routing fro application HA</p> </li> <li> <p>Upgrade vrsion of Libery using Liberty's zero-migration architecture capabilitoes</p> </li> </ul>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/","title":"Lab 4311:","text":""},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#lab-4311","title":"Lab 4311:","text":""},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#recommended-practices-for-websphere-liberty-deployments-and-zero-migration-upgrades-on-vms","title":"Recommended practices for WebSphere Liberty deployments and zero-migration upgrades on VMs","text":"<p>The goal of this lab is to provide hands-on experience using recommended practices for deploying Java applications to Liberty in collectives on VMs, using automation and flexible deployment methodologies.</p> <p>You will learn how Liberty dynamic routing feature enables routing of HTTP requests to all members of Liberty collectives without regenerating the WebSphere plug-in configuration file when servers, collective members, applications, or virtual hosts are added, removed, started, stopped, or modified.</p> <p>You will also learn that Liberty follows a single stream continuous delivery model. There is only one stream of Liberty, no version upgrades necessary. Simply install new version (or fixpacks if you prefer) to get the latest performance enhancements, features, and bug fixes. Then use your existing build process to produce a new Liberty Server package that contains the updated Liberty binaries, your existing application and configuration, and then deploy to a dual installation location. This removes one of the largest headaches for managing technical debt for your applications: keeping current on software updates.</p> <p>Following these methodologies, you will gain an understanding of how you might apply your own DevOps processes or automation to achieve significant agility and flexibility managing Liberty deployments with repeatable automated processes that significantly reduces risk to your business.</p> <p>After completing the lab, you should have an appreciation for how simple Liberty is to manage though automation, which equally applies to integration with your own DevOps tools.</p> <p>This lab contains the following hands-on activities:</p> <ul> <li> <p>Build Liberty server packages using Liberty's flexible deployment model</p> </li> <li> <p>Create a Liberty-ND Collective </p> </li> <li> <p>Deploy Liberty Server packages to the Liberty-ND collective</p> </li> <li> <p>Configure Liberty-ND Dynamic Routing in the Collective Controller</p> </li> <li> <p>Upgrade Liberty using Liberty's zero-migration architecture</p> </li> </ul>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#the-lab-environment","title":"The lab environment","text":"<p>The lab environemnt consists of two Host VMs:</p> <ul> <li> <p>server0.gym.lan</p> </li> <li> <p>server1.gym.lan</p> </li> </ul> <p>You will use Linux shell scripts provided for the lab, to build Liberty server packages, construct a Liberty- ND Collective that spans two host VMs, and deploy the server package to both host VMs.</p> <p>The Liberty-ND Collective that you will create is illustrated below:</p> <p></p> <p>The \u201cserver0.gym.lan\u201d host VM, which is the primary VM, contains the following components:</p> <ul> <li> <p>Liberty Builds and Server packages:\u00a0Think of this as a \u201cbuild     machine\u201d where a build process builds the applications, runs tests,     and produces a server package that is ready to be deployed. A server     package contains the Liberty binaries, application, default server     configurations, which get deployed as a unit to host VMs.</p> </li> <li> <p>Collective Controller:\u00a0The collective controller is a Liberty     server that is configured with the \u201ccollectiveController-1.0\u201d     feature, which enables the Server to act as the management server     for the collective.</p> </li> </ul> <p>Note:\u00a0In most cases the Collective Controller would likely be placed on a dedicated host, but to minimize the size of this demonstration environment, it\u2019s collocated with the host used for builds</p> <ul> <li>Collective Member:\u00a0Collective members are Liberty Servers that     run your application and are joined to the collective with the     \u201ccollectiveMember-1.0\u201d feature. Collective members can be     centrally managed and take advantage of features such as \u201cdynamic     Routing\u201d without requiring Liberty ND licenses for the collective     members.</li> </ul> <p>Note:\u00a0In most cases Liberty collective members are not located on the same host as collective controllers, but to minimize the size of this demonstration environment a collective member is collocated with a collective controller.</p> <ul> <li>Http Server:\u00a0The IBM HTTP server is used in some labs to     showcase Liberty capabilities such as Dynamic Routing, Session     Persistence, and fail-over scenarios.</li> </ul> <p>Note:\u00a0In most cases the HTTP server is placed on a dedicated host located in the DMZ, but to minimize the size of this demonstration environment, it\u2019s collocated with Liberty processes.</p> <p>The \u201cserver1.gym.lan\u201d VM contains the following components:</p> <ul> <li>Collective Member:\u00a0Collective members are Liberty Servers that     run your application and are joined to the collective with the     \u201ccollectiveMember-1.0\u201d feature.</li> </ul>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#accessing-the-environment","title":"Accessing the environment","text":"<ol> <li> <p>Access the lab environment from your web browser.</p> <p>The lab environment page is displayed, the lab environment contains  two (2) Linux VMs, server0 and server1. The VM server0 is  the one with the Graphical User Interface (GUI) for you to access and  work in this lab.</p> <p></p> </li> <li> <p>Click <code>server0</code> icon to access it.</p> <p></p> </li> <li> <p>If prompted in the VM login screen, login to the\u00a0server0\u00a0VM     using the credentials below:</p> <p>User ID:\u00a0<code>techzone</code></p> <p>Password:\u00a0<code>IBMDem0s!</code></p> <p>Note:\u00a0That is a numeric zero in IBMDem0s!</p> </li> <li> <p>The `server0`` VM GUI is displayed, click the RedHat icon in the middle     of screen to bring up the VM desktop UI.</p> <p></p> <p>The VM desktop UI is displayed.</p> <p></p> </li> </ol> <p>Tips for working in the lab environment:</p> <ol> <li> <p>You can use the VM Desktop tools to fit to window or resize the     window.</p> <p></p> </li> <li> <p>You can copy / paste text from the lab guide into the lab     environment using the VM Desktop Send Text tool.</p> <p></p> <p>a. Copy the text from the lab guide that you want to paste into the  lab environment.</p> <p>b. Open a terminal window, or a text editor or a web browser in the VM  Desktop where you want to copy the text to.</p> <p>c. Click the <code>Send Text</code> icon in the VM Desktop tool bar, paste the  text into its window, then again click <code>Send Text</code> to send the text  to an open command shell and close its window.</p> <p></p> <p>The text is now copied to the terminal window, or the text editor or  the web browser you opened in the previous step.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#review-liberty-deployment-common-practices","title":"Review Liberty deployment common practices","text":"<p>A Liberty server is lightweight due to its modular architecture, so you can easily package a server installation and applications in a compressed \u201czip\u201d or \u201cjar\u201d package. You can then store this package and use it to deploy the installation to different nodes or machines in your Liberty Collective.</p> <p>In this lab, you will deploy Liberty and sample applications to a Liberty-ND Collective, while following several common practices as illustrated below.</p> <p></p> <ul> <li> <p>Recommended practice:\u00a0Produce server packages as build     output</p> <p>It is recommended to create an immutable build using server packages  that include the Liberty binaries, server configuration, application,  and shared configuration as build output.</p> <p>The build output, \u201cserver package\u201d, is the deployable unit to  Liberty collective members. Using this practice is very similar to  recommended practices for container image deployments in Kubernetes  platforms.</p> </li> <li> <p>Recommended practice: Automate the build and deployment of     server packages to the collective</p> <p>Automating installation, deployment, and configuration is always  recommended to achieve greater agility, repeatability, and  productivity.</p> </li> <li> <p>Recommended practice:\u00a0Add configuration overrides to the     server after the server package is uncompressed.</p> <p>The automation scripts used in the lab follows this practice. The  server package is built as a template that contains the application,  libraries, and default configuration.</p> <p>Then, when the server package is deployed and uncompressed on the  target machine, the configuration overrides are added. These overrides  can override any default configuration from the server package.</p> </li> </ul> <p>Note:\u00a0there are several alternatives to applying the overrides to the server after expanding the archive.</p> <p>Some clients choose to override using OS environment variables that override default Values in the server.xml, other clients apply the overrides in the Liberty configuration by building the archive using the overrides in either the configDropins directory or via an include(d) external xml file in the server.xml for a specific environment.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-1-clone-the-github-repo-for-this-workshop","title":"Part 1: Clone the GitHub repo for this workshop","text":"<p>This lab requires artifacts that are stored in a GitHub repository. Run the command below to clone the repository to the local VM used for the lab.</p> <ol> <li> <p>Open a new terminal window on the \u201cserver0.gym.lan\u201d VM.</p> <p></p> </li> <li> <p>Copy the commands below to the terminal window to clone the GitHub     repository required for the lab.</p> <pre><code>git clone https://github.com/IBMTechSales/liberty_admin_pot.git\n\ncd /home/techzone/liberty_admin_pot/lab-scripts\n\nchmod -R 755 ./\n</code></pre> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-2-produce-liberty-server-packages-as-build-output","title":"Part 2: Produce Liberty \u201cserver packages\u201d as build output","text":"<p>Following recommended practices for flexible deployment of Liberty applications, you will produce a server package as build output, which includes the Liberty runtime, server configuration, and the application, as a zip archive file.</p> <p>Producing the build output in the form of a Liberty server package zip file provides the flexibility of deploying and upgrading your version of Liberty and applications as an immutable package, like how container images are deployed to Kubernetes container platforms.</p> <p>In the lab, the <code>mavenBuid.sh</code> script provides the following capabilities for producing server packages for deployment to a Liberty collective.</p> <ul> <li> <p>Pull the application source code from the source code repository     (GitHub)</p> </li> <li> <p>Build the application and produce a Liberty Server package</p> </li> <li> <p>Store the Liberty server package in a \u201cworking directory\u201d for the     lab.</p> </li> </ul> <p>mavenBuild.sh script is NOT an official IBM tool.</p> <p>It is a simple script that we provide for this PoT to demonstrate ease of automation of common Liberty tasks. Other tools such as Gradle, Jeknins, UCD, etc can be employed based on enterprise preferences and practices</p> <p>In this section of the lab, you will use the provided shell script that automates the tasks for producing a server package for deployment to the collective.</p> <p>Use the Maven Build script to produce a Server package</p> <ol> <li> <p>Run the\u00a0Maven Build\u00a0shell script to build the applications and     produce a Liberty Server package, which will use WebSphere Liberty     kernel, version 22.0.0.8</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/mavenBuild.sh -v 22.0.0.8\n</code></pre> <p>Note:\u00a0there are additional steps performed aside from what is  depicted in the output above which only shows the completion.</p> <p></p> </li> <li> <p>Using the File viewer on the VM desktop, see that the server package     was produced.</p> <p>a. Double mouse-click on the \u201cHome\u201d\u00a0folder on the Desktop VM.</p> <p></p> <p>b. From the file explorer, navigate  to\u00a0techzone/lab-work/packagedServers\u00a0directory.</p> <p>TIP:\u00a0the server package is named based on the version of Liberty  in the package, and the placeholder server name;  \u201c22.0.0.8-pbwServerX.zip\".</p> <p></p> </li> </ol> <p>What did the Maven Build do?</p> <p>The core activity performed by the script is to run Maven to build the applications and produce a Liberty Server package. The server package is somewhat customized to include additional artifacts and configuration overrides that are required to run the applications in Liberty.</p> <p>The Maven build process leverages the \u201cLiberty Maven Plugin\u201d, which provides for the capabilities to retrieve Liberty binaries from the maven repo, build the application, and create a Liberty server package.</p> <p>As illustrated below, Maven configures Liberty using the artifacts provided in the projects and produced by the build.</p> <ul> <li> <p>Maven adds the server.xml file and the application binaries (WAR,     EAR)</p> </li> <li> <p>Maven adds the configDropins/overrides as required for the     environment:</p> </li> </ul> <p></p> <p>Below is a hi-level list of tasks the maven build process performs in this lab:</p> <ul> <li> <p>Download the Liberty Kernel based on the version specified on the     command; for example, version 22.0.0.8</p> </li> <li> <p>Build the application deployable artifacts for PlantsByWebSphere     and WhereAmI applications: EAR, WAR, JAR</p> </li> <li> <p>Create a Liberty Server named \u201cpbwServerX\u201d as a template server     that is used for multiple deployments to the collective.</p> </li> <li> <p>Add the two example applications to the server configuration</p> </li> <li> <p>Add the required DB2 libraries to the server</p> </li> <li> <p>Replace the server.xml server configuration file with the server.xml     generated by Transformation Advisor</p> </li> <li> <p>Add the \u201cmemberOverrides.xml\u201d config/overrides file</p> </li> <li> <p>Install all the Liberty features as required by     the\u00a0server.xml\u00a0file</p> </li> <li> <p>Install the Collective Member feature so servers can be included as     members in a Liberty Collective</p> </li> <li> <p>Install the Session Database feature so the application will     function with session persistence with fail-over</p> </li> <li> <p>Produce the Liberty Server package as a zip file, containing the     Liberty binaries, applications, and the default configurations</p> </li> </ul> <p>The output from the \u201cmavenBuild\u201d script is a Liberty Server package. The server package is in the following working directory.</p> <pre><code>/home/techzone/lab-work/packagedServers\n</code></pre> <p></p> <p>Congratulations!\u00a0You have used Maven and successfully produced a Liberty server package, which adheres to the flexible deployment recommended practices.</p> <p></p> <p>Now that you have a server package, it can be deployed to local or remote hosts (VMs / machines) where the Liberty collective members will host the sample applications.</p> <p>In the next sections of the lab, you will continue the recommended practice of using automation to create a `Liberty Collective`` and deploy the server package to two hosts (VMs), and add the deployed servers to the Liberty Collective, where the servers can be centrally managed by the collective.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-3-create-a-liberty-collective-controller","title":"Part 3: Create a Liberty Collective Controller","text":"<p>A\u00a0<code>Liberty-ND Collective</code>\u00a0is a set of Liberty servers in a single management domain.</p> <p>A collective consists of at least one server with the\u00a0collectiveController-1.0\u00a0feature enabled that is called a\u00a0collective controller.</p> <p>TIP:\u00a0Liberty Servers that function as Collective Controllers MUST have Liberty ND licenses, as these servers use the\u00a0collectiveController-1.0\u00a0feature that is only available with Liberty-ND.</p> <p>The collective controller provides for a centralized administrative control point to perform operations such as MBean routing, file transfer, operational control, and monitoring</p> <p>A core role of collective controllers is to receive information, such as MBean attributes and operational state, from the members within the collective so that the data can be retrieved readily without having to invoke an operation on each individual member.</p> <p>A collective can have many servers with the\u00a0<code>collectiveMember-1.0</code>\u00a0feature enabled in application servers that are called\u00a0collective members.</p> <p></p> <p>In this section of the lab, you will create the\u00a0<code>Collective</code>\u00a0and the\u00a0<code>Collective Controller</code>\u00a0using automation, via the\u00a0<code>createController.sh</code> shell script.</p> <p>The \u201ccreateController.sh\u201d script provides the following capabilities</p> <ul> <li> <p>Create the Collective and Collective Controller</p> </li> <li> <p>Install the\u00a0Liberty Admin Center\u00a0application into the Controller     server</p> </li> <li> <p>Start the Collective Controller server</p> </li> </ul> <ol> <li> <p>Run commands below in the same command shell as you used to build     the serverPackage, to create a Liberty collective controller:</p> <pre><code>/home/techzone/liberty\\_admin\\_pot/lab-scripts/createController.sh\n</code></pre> <p>The createController.sh script creates a Liberty server  named\u00a0CollectiveController.</p> <p>The CollectiveController server is in the following directory:</p> <p>/home/techzone/lab-work/liberty-controller/wlp/usr/servers</p> <ul> <li> <p>The CollectiveController server is configured with the\u00a0<code>collectiveController-1.0</code>\u00a0feature which enables the server to act as the managing server for a collective</p> </li> <li> <p>The CollectiveController server is also configured with the\u00a0<code>adminCenter-1.0</code>\u00a0feature, which installs the \u201cLiberty Admin Center\u201d UI application.</p> </li> <li> <p>The CollectiveController server runs on HTTPS port\u00a09491\u00a0in this lab</p> </li> </ul> <p></p> </li> <li> <p>Once the collective controller is started, click its\u00a0Admin Center     URL\u00a0to launch it in a browser window, then enter the login     credentials as:\u00a0admin\u00a0/\u00a0admin.</p> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d, &gt;  click\u00a0Advanced..-&gt;scroll down and _&gt;Accept Risk and Continue\u00a0to  continue.</p> <p></p> </li> <li> <p>Login to the\u00a0Admin Center\u00a0using     credentials:\u00a0admin\u00a0/\u00a0admin.</p> <p></p> <p>The Liberty Collective \u201cAdmin Center\u201d\u00a0UI is displayed.</p> <p></p> </li> <li> <p>Click the\u00a0<code>Explore</code>\u00a0icon to display the servers, applications, and     hosts in the Collective.</p> <p></p> <p>The collective resource list is displayed, and you can see that you  have:</p> <ul> <li> <p>one server \u2013 The collective controller server</p> </li> <li> <p>one host \u2013 the local host that the controller is running on</p> </li> <li> <p>one runtime \u2013 Liberty runtime</p> </li> </ul> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-4-create-liberty-collective-members","title":"Part 4: Create Liberty Collective Members","text":"<p>The collective members are the Liberty servers that run your applications. For Liberty servers to join a collective, the servers must have the\u00a0<code>collectiveMember-1.0</code>\u00a0feature enabled.</p> <p>Membership in a Liberty collective is optional. Liberty servers join a collective by registering with a collective controller to become members. Members share information about themselves with the controller through the controller operational repository.</p> <p></p> <p>In this section of the lab, you will join Liberty servers as collective members to the collective, using the server package that you produced previously in the lab.</p> <p>That server package you created, includes the Liberty binaries, the sample applications, and default server configuration overrides.</p> <p>The\u00a0collectiveMember-1.0\u00a0feature was installed and enabled for the Liberty server that is in the server package.</p> <p>In this lab, you use the \u201c<code>addMember.sh</code>\u201d script to deploy the server packages to the nodes, create the collective members, and join the members to the collective.</p> <p>The addMember.sh script performs the following tasks:</p> <ul> <li> <p>Register the Host machine if it is remote VM from the Controller</p> </li> <li> <p>Copy or send the server package to the host machine where Liberty     will be deployed</p> </li> <li> <p>Unzip the server package, which is an archive installation of     Liberty on the hosts machines (VMs)</p> </li> <li> <p>Apply server configuration overrides for the specific collective     member</p> </li> <li> <p>Join the collective member to the collective</p> </li> <li> <p>Open application port and Collective Controller port for remote     hosts</p> </li> </ul> <p>This script adds collective members, one to the local host VM, server0.gym.lan, another to the remote host VM, server1.gym.lan.</p> <p>Use the automation script to deploy the Liberty servers from the server package you created earlier and join them as a member to the collective.</p> <ol> <li>In the same command shell as before, run the addMember.sh script     twice with different input parameters as shown to create two Liberty     servers.<pre><code>/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n  appServer1 -v 22.0.0.8 -p 9081:9441 -h server0.gym.lan\n\n/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n  appServer2 -v 22.0.0.8 -p 9082:9442 -h server1.gym.lan\n</code></pre> </li> </ol> <p>When the script completes, the server\u00a0appServer1\u00a0and  server\u00a0appServer2\u00a0are created and added to the collective.</p> <ol> <li> <p>Go back to the Liberty collective\u00a0Admin Center\u00a0page and you can     see the total number of servers is now 3 with the appServer1     and\u00a0appServer2 added.</p> <p></p> </li> <li> <p>Click the\u00a0SERVERS\u00a0icon to go to its details page.</p> <p></p> <p>You see the appServer1 and\u00a0appServer2 have been added to the  server list and they are in the\u00a0Stopped\u00a0state.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-5-verify-the-application-deployment-in-the-collective","title":"Part 5: Verify the application deployment in the collective","text":"<p>You have deployed two Liberty servers as the collective members. In this section, you will start these two servers from the Liberty Admin Center and run the example applications on the individual Liberty servers to ensure the applications run properly.</p> <ol> <li> <p>Start the DB2 application database for PlantsByWebSphere</p> <p>The PlantsByWebSphere application requires an application database, which you need to ensure is up and running.</p> <p>a.  Before starting the Liberty servers, you need to start the db2 database used by the\u00a0PlantsByWebSphere\u00a0application with the command below.</p> <pre><code>docker start db2_demo_data\n</code></pre> </li> <li> <p>Start the Liberty servers from the Admin Center</p> <p>a.  To start the collective member from the Liberty Admin Center\u00a0Explorer\u00a0page, click the\u00a0SERVERS\u00a0icon to go to its details page.</p> <p></p> <p>b.  In the server details page, click the dropdown menu icon of\u00a0<code>appServer1</code>\u00a0and select\u00a0<code>Start</code>\u00a0to start the server.</p> <p></p> <p>Note:\u00a0If prompted for credentials, enter the Admin Center username  and password as:\u00a0admin / admin.</p> <p>c.  Click\u00a0<code>Start</code>\u00a0to confirm the start\u00a0appServer1\u00a0server command.</p> <p></p> <p>Server\u00a0appServer1\u00a0will start, and you can see it is now in  the\u00a0Running\u00a0state.</p> <p>The appServer1 server now shows it has two applications <code>running</code>, which  are used in the labs in this workshop.</p> <ul> <li> <p>PlantsByWebSphere</p> </li> <li> <p>WhoAmI</p> </li> </ul> <p></p> </li> <li> <p>Repeat the same server start procedure for\u00a0<code>appServer2</code>\u00a0server.     Once it is done, the\u00a0appServer2\u00a0server is started as show below:</p> <p></p> </li> <li> <p>Click the\u00a0<code>Explorer</code>\u00a0dashboard icon to go back to the dashboard     view.</p> <p></p> <p>Explore the \u201cApplications\u201d, \u201cservers\u201d, and \u201chosts\u201d that  are registered and running in the collective</p> <p></p> <p>Applications view:</p> <p></p> <p>Servers view:</p> <p></p> <p>Hosts view:</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#51-test-the-two-example-applications-used-in-the-lab","title":"5.1 - Test the two example applications used in the lab","text":"<p>In this section, you will test the two applications that are deployed in the collective.</p> <p>Test the PlantsByWebSphere application:</p> <ol> <li> <p>To access the\u00a0PlantsByWebSphere\u00a0application on appServer1</p> <p>a. Open a new tab on the Firefox browser, enter the following URL to  test PlantsByWebSphere on\u00a0appServer1, which is  on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d, &gt;  click\u00a0Advanced..-&gt;scroll down and -&gt;Accept Risk and Continue\u00a0to  continue.</p> <p></p> <p>b. In the application, click on the \u201cFlowers\u201d tab to view the  catalog of flowers. This action retrieves catalog details from the  application DB2 database.</p> <p></p> </li> <li> <p>Repeat the steps to access the\u00a0PlantsByWebSphere\u00a0application on     appServer2 on host server1.gym.lan</p> <p>a. Open a new tab on the Firefox browser and test  PlantsByWebSphere on\u00a0appServer2, which is  on\u00a0server1.gym.lan</p> <pre><code>https://server1.gym.lan:9442/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d, &gt;  click\u00a0Advanced..-&gt;scroll down and -&gt; Accept Risk and Continue\u00a0to  continue.</p> <p></p> </li> </ol> <p>Test the WhereAmI application:</p> <ol> <li> <p>To access the\u00a0WhereAmI\u00a0application on appServer1.</p> <p>a. Open a new tab on the Firefox browser and enter the following URL  to test WhereAmI on\u00a0appServer1, which is  on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/WhereAmI\n</code></pre> <p></p> </li> <li> <p>Repeat the steps to access the\u00a0WhereAmI\u00a0application on     appServer2 on host server1.gym.lan.</p> <p>a. Open a new tab on the Firefox browser and test WhereAmI  on\u00a0appServer2, which is on\u00a0server1.gym.lan</p> <pre><code>https://server1.gym.lan:9442/WhereAmI\n</code></pre> <p></p> </li> <li> <p>Close\u00a0the browser windows / tabs displaying the     PlantsByWebSphere and WhereAmI applications.</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-6-configure-dynamic-routing-application-high-availabilty","title":"Part 6: Configure Dynamic Routing application High Availabilty","text":"<p>In this section, you configure the `Dynamic Routing`` feature to route HTTP requests to members of Liberty collectives without having to regenerate the WebSphere plug-in configuration file when the environment changes.</p> <p>The Dynamic Routing feature, <code>dynamicRouting-1.0</code>, provides the Dynamic Routing service, which dynamically retrieves routing information from the collective repository and delivers this information to the WebSphere plug-in.</p> <p>To configure dynamic routing for a Liberty collective, you need to perform the following tasks:</p> <ul> <li> <p>Add dynamicRouting-1.0 feature to the Collective controller</p> <p>This feature must be added to the Collective Controller\u2019s server.xml  file.</p> </li> <li> <p>Create a Plug-in configuration file for the HTTP Server</p> <p>The \u201cdynamicRouting setup\u201d command generates the \u201ckeystore\u201d and  \u201cplug-in configuration files\u201d required for dynamic routing.</p> </li> <li> <p>Establish a secure connection between the plug-in and the     collective controller</p> </li> </ul> <p>The generated plug-in configuration file and keys must be copied to  the appropriate locations to establish the secure connection.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#61-setup-dynamic-routing-in-websphere-liberty","title":"6.1 - Setup Dynamic Routing in WebSphere Liberty","text":"<p>In this section, you will use an automation script, which we provide in the lab environment, to perform the steps described above to setup and configure Dynamic Routing.</p> <ol> <li> <p>Run the <code>setupDynamicRouting.sh</code> script shown below in the same     command shell you used previously, to setup the plugin configuration     for dynamic routing.</p> <p>The\u00a0setupDynamicRouting.sh\u00a0script performs all the tasks described  above which configures dynamic routing in the collective</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/setupDynamicRouting.sh\n</code></pre> <p>Once the command is completed, the pug-in configuration files are  created and configured for the IHS server.</p> <p></p> </li> </ol> <p>Dynamic routing in the Liberty Collective is now ready to use!</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#62-examine-the-generated-plugin-cfgxml-file","title":"6.2 - Examine the generated \u201cplugin-cfg.xml\u201d file","text":"<p>The\u00a0<code>plugin-cfg.xml</code>\u00a0file contains configuration information that determines how the web server plug-in forwards requests to the Liberty servers in the collective.</p> <p>The plugin only needs to connect to the Collective Controller to get topology information. It does not need to know the host/port of the application servers.</p> <p>The plugin-cfg.xml file is in the following directory:</p> <p>/opt/IBM/WebSphere/Plugins/config/webserver1</p> <ol> <li> <p>Examine the generated\u00a0plugin-cfg.xml</p> <pre><code>gedit /opt/IBM/WebSphere/Plugins/config/webserver1/plugin-cfg.xml\n</code></pre> <p>With Dynamic Routing, HTTP requests are sent to members of Liberty  collectives without regenerating the WebSphere plug-in configuration  file when the environment changes.</p> <p>Note: The plugin-cfg.xml no does not contain the host and port  information for the application servers or the application URL, etc.  as is the case with the static HTTP server plugin. Instead, the  plugin-cfg.xml contains the host and port information for the  collective controller which provides the application and application  server information dynamically to the plugin.</p> <p>When servers, cluster members, applications, or virtual hosts are  added, removed, started, stopped, or modified; the new information is  dynamically delivered to the WebSphere plug-in from the Liberty  Collective Controller.</p> <p>In this configuration, requests are routed based on up-to-date  information.</p> <p></p> </li> <li> <p>Close\u00a0the\u00a0gedit\u00a0editor. DO NOT SAVE ANY CHANGES!</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#63-examine-the-web-servers-httpdconf-file","title":"6.3 - Examine the Web Server\u2019s \u201chttpd.conf\u201d file","text":"<p>The\u00a0<code>httpd.conf</code>\u00a0file contains the HTTP Server configuration.</p> <p>The WebSphere plug-in module is loaded by appending configuration to the httpd.conf file in the web server.</p> <p>The web server\u2019s httpd.conf file is in the following directory:</p> <p>/opt/IBM/HTTPServer/conf</p> <ol> <li> <p>Examine the generated\u00a0httpd.conf\u00a0file</p> <pre><code>gedit /opt/IBM/HTTPServer/conf/httpd.conf\n</code></pre> <p>a. Scroll to the last line of the httpd.conf file, which is the  configuration to load the WebSphere plugin module.</p> <p>b. Notice the configuration points to the\u00a0plugin-cfg.xml\u00a0file,  which is used to determine how to direct the http requests to the  Liberty servers in the collective.</p> <p></p> </li> <li> <p>Close\u00a0the\u00a0gedit\u00a0editor. DO NOT SAVE ANY CHANGES!</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-7-testing-the-dynamic-routing-features","title":"Part 7: Testing the Dynamic Routing Features","text":"<p>In this section, you are going to test the dynamic routing you configured for the Liberty collective.</p> <p>You are going to conduct two testing scenarios:</p> <ul> <li> <p>In the first test case, you are using     the\u00a0PlantsByWebSphere\u00a0application to test the high     availability of the application and verify you can always access the     application directly from the IHS server if at least one of the     member servers is running.</p> <p>When you stop one of the app servers, the dynamic routing  automatically redirects the traffic to another surviving app server  without any user intervention or application interruption.</p> </li> <li> <p>The second test case demonstrates round robin load balancing and the     dynamic routing distributes traffic to the collective members based     on their workloads.</p> <p>The\u00a0WhereAmI\u00a0application is used in this testing because it does  NOT use sticky sessions, whereas the PlantsByWebSphere application  does.</p> <p>When you refresh the application URL link in the web browser window,  you can see the dynamic routing performs round-robin style routing  among the servers.</p> </li> </ul> <p>Test Case 1:</p> <p>This test case uses PlantsByWebSphere application. The design of this application uses HTTP Sessions to store application state in the internal http session object. By default, the http session object is local to the Liberty server, and not persisted in any external store.</p> <p>WebSphere traditional and WebSphere Liberty use a JSESSIONID in this case, which identifies the server handing the request that includes uses an http session. Then on subsequent transactions or requests, the JSESSIONID is read by the web server plugin, and requests continue to be routed to the SAME server.</p> <p>If the server handing the requests goes down, then the web server plugin will redirect the requests to any surviving servers.</p> <p>However, without session persistence configured, any session data is lost, such as items in a shopping cart, or login cookies, etc.</p> <ol> <li> <p>To access the\u00a0PlantsByWebSphere\u00a0application through IHS     server and plugin, open a new browser window and enter the     application URL as:</p> <pre><code>https//server0.gym.lan:8443/PlantsByWebSphere\n</code></pre> <p>The application \u201cHome\u201d page\u00a0is displayed.</p> <p></p> </li> <li> <p>You can navigate and visit different pages of the application. You     can see that although the application is running on two Liberty     servers with different HTTP/HTTPS ports, the dynamic routing     function of the Liberty collective is able to direct the incoming     traffic through the specified IHS server port (8080) to the     application.</p> <p></p> </li> <li> <p>Click the\u00a0Help\u00a0link to go to application\u00a0Help\u00a0page.</p> <p></p> <p>The application Help page is displayed. On this page, you can see  which Liberty server the request was routed.</p> <p>As showing in the screen shot below, the application is running  from\u00a0appServer2\u00a0which might be different in your case.</p> <p></p> </li> <li> <p>Stop\u00a0the Liberty server that is identified as handling the     request, as shown on the PlantsByWebSphere     application\u00a0\"Help\"\u00a0page.</p> <p>a. Go back to Liberty collective\u00a0Admin Center Servers\u00a0page.</p> <p>b.\u00a0Stop\u00a0the server that was identified on the application Help  page, as illustrated below:</p> <p></p> <p>If prompted, enter the Admin Center credentials as:\u00a0admin / admin.</p> <p>The server is stopped.</p> <p></p> </li> <li> <p>From the\u00a0PlantsByWebSphere\u00a0application page, click the     \u201cFlowers\u201d tab, to show the catalog of flowers.</p> <p></p> </li> <li> <p>Click the\u00a0Help\u00a0link to go to application\u00a0Help\u00a0page, you can     see now the application is running from a different application     server.</p> <p></p> <p>This demonstrates that the Liberty dynamic routing detects the  application server is down and directs the traffic to another  application server automatically.</p> <p>The application high availability test is completed.</p> </li> </ol> <p>Test Case 2:</p> <p>In this test case, the\u00a0WhereAmI\u00a0application is used. This application does not use http sessions, and therefore the web server plugin can direct requests to the Liberty servers in a round-robin style.</p> <ol> <li> <p><code>Start</code>\u00a0both application servers (<code>appServer1</code> and     <code>appServer2</code>) from Liberty collective Admin Center.</p> </li> <li> <p>Open a new browser window and enter the\u00a0<code>WhereAmI</code>\u00a0application URL     as:</p> <pre><code>https://server0.gym.lan:8443/WhereAmI\n</code></pre> <p>The output shows that currently the application is running  from\u00a0appServer1\u00a0server.</p> <p>In your test, you may see\u00a0appSever2\u00a0handing the initial request.</p> <p></p> </li> <li> <p>Refresh the application page by clicking the\u00a0refresh icon\u00a0on the     browser.</p> <p>You can see the output showing that Liberty dynamic routing feature  directs the request traffic to other application server in a  round-robin fashion.</p> <p></p> </li> <li> <p>Refresh the browser again a few more times and see that the requests     get routed to\u00a0appServer1\u00a0and\u00a0appServer2\u00a0accordingly.</p> <p>The round robin load balancing test is completed.</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-8-produce-a-new-server-package-using-liberty-220012","title":"Part 8: Produce a new \u201cserver package\u201d using Liberty 22.0.0.12","text":"<p>In this section of the lab, you will use the same automated <code>mavenBuild</code> script that was used in previous labs to produce a NEW Liberty server package, with only one notable difference; the server package will include Liberty <code>22.0.0.12</code> instead of 22.0.0.8.</p> <p>Producing the build output in the form of a Liberty server package zip file provides the flexibility of deploying and upgrading your version of Liberty and applications as an immutable package, like how container images are deployed to Kubernetes container platforms.</p> <p>In this section of the lab, you will use the provided shell script that automates the tasks for producing a server package for deployment to the collective.</p> <p>Use the Maven Build script to produce a Server package with Liberty 22.0.0.12</p> <ol> <li> <p>Run the following command to build the applications and produce a     server package, which will use WebSphere Liberty kernel, version     22.0.0.12</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/mavenBuild.sh -v 22.0.0.12\n</code></pre> <p>Take note that a new Liberty server package was created with the name:  <code>22.0.0.12-pbwServerX.zip</code></p> <p></p> <p>The output from the \u201cmavenBuild\u201d script is a Liberty Server  package.</p> <p>The server package is in the following working directory.</p> <p>/home/techzone/lab-work/packagedServers</p> </li> <li> <p>Using the File viewer on the VM desktop, see that the server package     was produced.</p> <p>a. Double mouse-click on the \u201cHome\u201d\u00a0folder on the Desktop VM</p> <p></p> <p>b. From the file explorer, navigate  to\u00a0<code>/home/techzone/lab-work/packagedServers</code>\u00a0directory.</p> <p>TIP:\u00a0the server package is named based on the version of Liberty  in the package, and the placeholder server name;  \u201c22.0.0.12-pbwServerX.zip.</p> <p></p> </li> </ol> <p>Congratulations!\u00a0You have used Maven and successfully produced a new Liberty server package that contains your applications and WebSphere Liberty 22.0.0.12.</p> <p></p> <p>In the next sections of the lab, you will continue the best practice of using automation to deploy the server package to two hosts (VMs) and join the deployed servers to the Liberty Collective.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-9-deploy-the-new-server-package-to-the-collective","title":"Part 9: Deploy the new server package to the Collective","text":"<p>In this section of the lab, you deploy new Liberty servers as collective members to the collective, using the server package that you produced in the previous section of the lab.</p> <p>That server package you created, includes the Liberty binaries for 22.0.0.12 and your SAME sample applications using the SAME default server configuration as the previous deployment in Liberty 22.0.0.8.</p> <p>In this lab, you use the same <code>addMember.sh</code> script used in previous labs to deploy the server packages to the nodes, deploy the server package, create the collective members, and join the members to the collective.</p> <p>Launch the Liberty Admin Center in the Web Browser</p> <ol> <li> <p>If the Liberty Adin Center is not already open in the Web Browser,     open it now, using the following URL:</p> <pre><code>https://server0.gym.lan:9491/adminCenter/\n</code></pre> </li> <li> <p>Login to the\u00a0Admin Center\u00a0using     credentials:\u00a0admin\u00a0/\u00a0admin.</p> <p></p> <p>The Liberty Collective \u201cAdmin Center\u201d\u00a0UI is displayed.</p> <p></p> </li> <li> <p>Click the\u00a0<code>Explore</code>\u00a0icon to display the servers, applications, and     in the Collective.</p> <p></p> </li> <li> <p>Click the\u00a0<code>Servers</code>\u00a0view to display the servers in the Collective.</p> <p>Note:\u00a0You should already see two servers deployed in the  collective.</p> <p>The servers are running\u00a0Liberty 22.0.0.8. And the server should be  in the \u201cRunning\u201d state.</p> </li> <li> <p>If the appServer1 or appServer2 servers are NOT running, go ahead     and start them now.</p> <p>These servers were deployed in the previous labs.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#91-deploy-collective-member-to-the-local-host-vm-server0gymlan","title":"9.1 - Deploy collective member to the local host VM, server0.gym.lan","text":"<p>Use the automation script to deploy the Liberty server from the server package you created earlier and join the member to the collective.</p> <p>The script below performs the following:</p> <ul> <li> <p>deploy the server package for Liberty version 22.0.0.12</p> </li> <li> <p>Apply overrides for the HTTP and HTTPS ports with \u201c9081 / 9441\u201d</p> </li> <li> <p>Rename the default server name with \u201cappServer1\u201d</p> </li> <li> <p>Join the server to the collective</p> </li> </ul> <ol> <li> <p>From the same terminal window on the VM, run the command below to     create a local Liberty collective member on\u00a0server0.gym.lan\u00a0VM     using the 22.0.0.12 server package.</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n appServer1 -v 22.0.0.12 -p 9081:9441 -h server0.gym.lan\n</code></pre> <p></p> <p>When the script completes, the server\u00a0appServer1\u00a0with Liberty  22.0.0.12 is created and added to the collective.</p> <p>The\u00a0addMember.sh\u00a0script created a local Liberty server  called\u00a0appServer1\u00a0in the following directory on  the\u00a0server0.gym.lan\u00a0VM:</p> <p>/home/techzone/lab-work/liberty-staging/22.0.0.12-appServer1/wlp/usr/servers</p> </li> <li> <p>Go back to the Liberty collective Admin Center\u2019s Server page. You     can see that the\u00a0<code>appServer1</code>\u00a0server in directory     <code>22.0.0.12-appServer1</code> is added to the collective as a new     server.</p> <p>The Server is in the \u201cStopped\u201d state.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#92-deploy-a-collective-member-to-the-remote-host-vm-server1gymlan","title":"9.2 - Deploy a collective member to the remote host VM, server1.gym.lan","text":"<p>Now, run the script again, using slightly different parameters, to deploy Liberty to the remote VM,\u00a0server1.gym.lan. And, then join the remote member to the collective.</p> <p>Joining remote members to a collective requires a couple of additional steps that the script performs for you in the lab environment and are identified below.</p> <ol> <li> <p>Run command below to create a remote Liberty collective member     on\u00a0server1.gym.lan\u00a0VM, specifying a different server name and     ports.</p> <pre><code>/home/techzone/liberty_admin_pot/lab-scripts/addMember.sh -n  appServer2 -v 22.0.0.12 -p 9082:9442 -h server1.gym.lan\n</code></pre> <p></p> </li> </ol> <ul> <li> <p>When the script completes, the server\u00a0<code>appServer2</code>\u00a0with Liberty     <code>22.0.0.12</code> is created and added to the collective.</p> </li> <li> <p>The\u00a0addMember.sh\u00a0script created a local Liberty server     called\u00a0appServer2\u00a0in the following directory on     the\u00a0server1.gym.lan\u00a0VM:</p> <p>/opt/IBM/liberty-staging/22.0.0.12-appServer2/wlp/usr/servers</p> </li> <li> <p>The server uses\u00a09082\u00a0and\u00a09442\u00a0as its HTTP/HTTPS ports, as     defined ad script input parameters.</p> </li> </ul> <ol> <li> <p>Go back to the Liberty collective Admin Center\u2019s \u201cservers\u201d view. You can see the new member,\u00a0<code>appServer2</code>, has been added to     the server list and is the\u00a0<code>Stopped</code>\u00a0state.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#93-ripple-start-the-new-220012-servers","title":"9.3 - Ripple Start the new 22.0.0.12 servers","text":"<p>Now that the new Liberty servers with Liberty version 22.0.0.12 have been deployed to the collective, all you need to do now is ripple start the servers.</p> <p>Ripple starting the servers will allow the new application servers to accept incoming request without incurring an application outage.</p> <p>The ripple start will be manually performed in the Admin Center in this lab. However, like the other automated scripts you have used, this process can also be easily automated.</p> <p>Steps to ripple start the new servers:</p> <ul> <li> <p>Stop 22.0.0.8-appServer1</p> </li> <li> <p>Start 22.0.0.12-appServer1</p> </li> <li> <p>Stop 22.0.0.8-appServer2</p> </li> <li> <p>Start 22.0.0.12-appServer2</p> </li> </ul> <ol> <li> <p>Before starting the Liberty servers, you need to ensure the db2     database used by the\u00a0PlantsByWebSphere\u00a0application is running.</p> <pre><code>docker start db2_demo_data\n</code></pre> </li> <li> <p><code>Stop</code>\u00a0the collective member <code>22.0.0.8-appServer1</code>\u00a0from the     Liberty Admin Center.</p> <p>a. In the\u00a0server\u00a0details page, click the dropdown menu icon of  \u201c22.0.0.8-appServer1\u201d\u00a0and select\u00a0Stop\u00a0to stop the server.</p> <p></p> <p>Note:\u00a0If prompted for credentials, enter the Admin Center username  and password as:\u00a0admin / admin.</p> <p>b. Click\u00a0<code>Stop</code>\u00a0to confirm the stop  for\u00a022.0.0.8-appServer1\u00a0server</p> <p></p> <p>Server\u00a0appServer1\u00a0will stop, and you can see it is now in  the\u00a0Stopped\u00a0state.</p> <p>.</p> </li> <li> <p>Start\u00a0the collective member \u201c22.0.0.12-appServer1\u201d from the     Liberty Admin Center.</p> <p>a. In the\u00a0server\u00a0details page, click the dropdown menu icon of  \u201c22.0.0.12-appServer1\u201d\u00a0and select\u00a0Start\u00a0to start the server.</p> <p></p> <p>b. Click\u00a0<code>Start</code>\u00a0to confirm the stop  for\u00a022.0.0.12-appServer1\u00a0server.</p> <p></p> <p>Server\u00a022.0.0.12-appServer1\u00a0will start, and you can see it is now  in the\u00a0Running\u00a0state.</p> <p>.</p> </li> </ol> <p>Checkpoint of the current state</p> <p>At this point, you should see the following server states:</p> <p>On VM server0.gym.lan:</p> <ul> <li> <p>22.0.0.8-appServer1 -\u00a0Stopped</p> </li> <li> <p>22.0.0.12-appServer1 -Running</p> <p></p> </li> </ul> <p>On VM server1.gym.lan:</p> <ul> <li> <p>22.0.0.8-appServer2 -\u00a0Running</p> </li> <li> <p>22.0.0.12-appServer2 -Stopped</p> <p></p> </li> </ul> <p>Next, ripple start the\u00a022.00.12-appServer2\u00a0server on VM\u00a0server1.gym.lan\u00a0following the same steps as above.</p> <ol> <li> <p><code>Stop</code>\u00a0the collective member\u00a0<code>22.0.0.8-appServer02</code>\u00a0from the     Liberty Admin Center.</p> </li> <li> <p><code>Start</code>\u00a0the collective member\u00a0<code>22.0.0.12-appServer02</code>\u00a0from the     Liberty Admin Center.</p> <p>The final state should reflect the 22.0.0.12 servers are RUNNING, and the 22.0.0.8 servers are STOPPED.</p> <p></p> <p>Congratulations!\u00a0You have just completed the upgrade from Liberty 22.0.0.8 to 22.0.0.12 using WebSphere Liberty\u2019s zero-migration architecture and common practices for deployments using immutable server packages for flexible deployments.</p> <p></p> <p>The final activity in this lab is to demonstrate the applications continue to run as-is after the upgrade.</p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#part-10-test-the-applications-after-the-liberty-upgrade","title":"Part 10: Test the applications after the Liberty upgrade","text":"<p>You have successfully ripple started the new 22.0.0.12 servers in the collective.</p> <p>In this section, you will test the PlantsByWebSphere and WhereAmI applications and ensure the applications run properly after the upgrade to Liberty 22.0.0.12.</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#101-test-the-plantsbywebsphere-application","title":"10.1 - Test the PlantsByWebSphere application:","text":"<ol> <li> <p>To access the\u00a0PlantsByWebSphere\u00a0application on appServer1</p> <p>a. Open a new tab on the Firefox browser and test PlantsByWebSphere  on\u00a0appServer1, which is on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0You will likely see the \u201cWarning: Potential Security Risk  Ahead\u201d, click Advanced-&gt;. scroll down-&gt;Accept Risk and Continue to  continue. The warning occurs because new self-signed certs were  created when deploying the new application server version.</p> <p></p> <p>b. In the application, click on the \u201cHelp\u201d link, located on the  upper right corner of the application page.</p> <p></p> <p>c. On the \u201cHelp\u201d page, you will see the Server name and the  version of Liberty that is running for the server that handled this  specific request.</p> <p></p> <p>d. In the application, click the \u201cHome\u201d link to return to the  PlantsByWebSphere Home page.</p> <p></p> </li> <li> <p>OPTIONAL: Repeat the steps to access     the\u00a0PlantsByWebSphere\u00a0application on appServer2 on host     server1.gym.lan</p> <pre><code> https://server1.gym.lan:9442/PlantsByWebSphere\n</code></pre> <p>Note:\u00a0If you see the \u201cWarning: Potential Security Risk Ahead\u201d,  click Advanced..-&gt;Accept Risk and Continue to continue.</p> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#102-test-the-whereami-application","title":"10.2 - Test the WhereAmI application:","text":"<ol> <li> <p>To access the\u00a0WhereAmI\u00a0application on appServer1</p> <p>a. Open a new tab on the Firefox browser and test WhereAmI  on\u00a0appServer1, which is on\u00a0server0.gym.lan</p> <pre><code>https://server0.gym.lan:9441/WhereAmI\n</code></pre> <p>b. Note that the application is running on Liberty version 22.0.0.12</p> <p></p> </li> <li> <p>OPTIONAL: Repeat the steps to access the\u00a0WhereAmI\u00a0application on     appServer2 on host server1.gym.lan</p> <pre><code>https://server1.gym.lan:9442/WhereAmI\n</code></pre> <p></p> </li> </ol>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#103-test-dynamic-routing-after-the-liberty-upgrade","title":"10.3 - Test Dynamic Routing after the Liberty upgrade","text":"<p>In this part of the lab, you demonstrate that Liberty\u2019s Dynamic Routing capabilities is now automatically directing incoming requests from the HTTP server to the new Liberty 22.0.0.12 servers, after the upgrade.</p> <ol> <li> <p>To access the\u00a0WhereAmI\u00a0application through the IBM HTTP Server     and plugin, open a new browser window and enter the application URL     as:</p> <pre><code>https://server0.gym.lan:8443/WhereAmI\n</code></pre> <p>The output shows the application running on\u00a0appServer1\u00a0on the  initial request.</p> <p>Note:\u00a0It is possible that the request is routed  to\u00a0appServer2\u00a0instead of appServer1.</p> <p>Importantly, note the Liberty Version is:\u00a022.0.0.12, validating  that the Dynamic Routing capability has automatically detected the new  Liberty Servers and is directing incoming requests to the new Liberty  22.0.0.12 servers after the upgrade.</p> <p></p> </li> <li> <p>Refresh the application page by clicking the     Browsers\u00a0refresh\u00a0icon on the page.</p> <p>You can see the output showing that Liberty dynamic routing feature  directs the request traffic to\u00a0appServer2\u00a0server.</p> <p></p> </li> <li> <p>Refresh the browser again a few more times and see that the requests     get routed to\u00a0appServer1\u00a0and\u00a0appServer2\u00a0accordingly.</p> <p>The round robin load balancing test is completed.</p> </li> </ol> <p>Congratulations!</p> <p>You have successfully completed the lab \u201cLiberty Deployment on VMs\u201d</p>"},{"location":"1157-Liberty-Enterprise-Deployment-VMs/archived/Tech-Exchange-Lab-4311-Liberty-on-VMs-v3%20-%20Copy/#summary","title":"Summary","text":"<p>In the lab, you followed the best practices to deploy and configure Liberty Collective and upgrade the version of Liberty in the Collective</p> <p>Following this methodology, you gained an understanding of how you might apply your own build processes or automation to achieve significant agility and flexibility managing Liberty collectives with repeatable automated processes that significantly reduces risk to your business.</p> <p>You have gained an appreciation for Liberty\u2019s \u201czero-migration\u201d architecture and how simple it is to upgrade Liberty following the common practices described in the lab.</p> <p>In this lab, you have completed the following administrative activities in Liberty Collective on VMs implementation :</p> <ul> <li> <p>Build Liberty server packages</p> </li> <li> <p>Create a Liberty Collective</p> </li> <li> <p>Deploy Liberty Server packages to the collective</p> </li> <li> <p>Configure and work with Liberty Dynamic Routing fro application HA</p> </li> <li> <p>Upgrade vrsion of Libery using Liberty's zero-migration architecture capabilitoes</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/","title":"1597 - WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":""},{"location":"1597-WebSphere_Automation/#lab-1597","title":"Lab 1597","text":""},{"location":"1597-WebSphere_Automation/#websphere-proactive-cve-protection-and-memory-leak-remediation-observed-by-instana","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":""},{"location":"1597-WebSphere_Automation/#introduction-to-ibm-websphere-automation","title":"Introduction to IBM WebSphere Automation","text":"<p>IBM WebSphere Automation focuses on delivering value to existing WebSphere Application Server (WAS) environments by helping administrators reduce the cost, effort and risk of addressing common vulnerabilities, automating tasks and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. It provides the following benefits:</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhanced remediation capabilities with insights and recommendations improve the speed and depth of understanding outages and anomalies as they occur.</p> </li> <li> <p>Augmented operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>IBM WebSphere Automation is a stand-alone product that runs on Red Hat OpenShift. Entitlement to Red Hat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>You can deploy it virtually anywhere through containers that are supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that is designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/#accessing-the-lab-environment","title":"Accessing the lab environment","text":"<ol> <li> <p>Access the lab environment from your web browser.</p> <p>The lab environment page is displayed, the lab environment contains  seven (7) Linux VMs, including student, instana and OpenShift Container Platform (OCP) Cluster VMs. The VM student is  the one with the Graphical User Interface (GUI) for you to access and work in this lab. The RedHat OpenShift Cluster VMs that hosts the  IBM WebSphere Automation solution. </p> <p></p> <p>Note: The student VM is the only VM that you access directly in the lab environment.</p> </li> <li> <p>Click Red Hat icon to access it.</p> <p></p> </li> <li> <p>Click ibmuser user to log in.</p> <p></p> </li> <li> <p>Enter the password as: engageibm and click Unlock.</p> <p></p> <p>The lab VM GUI is displayed.</p> <p> </p> </li> </ol> <p>Tips for working in the lab environment:</p> <ol> <li> <p>You can use the VM Desktop tools to fit to window or resize the     window.</p> <p></p> </li> <li> <p>To copy the text from the lab guide into the lab     environment, you must use the VM Desktop Send Text tool.</p> <p></p> <p>a. Copy the text from the lab guide that you want to paste into the  lab environment.</p> <p>b. Open a terminal window, or a text editor or a web browser in the VM  Desktop where you want to copy the text to.</p> <p>c. Click the Send Text icon in the VM Desktop tool bar, paste the  text into its window, then again click Send Text to send the text  to an open command shell and close its window.</p> <p></p> <p>The text is now copied to the terminal window, or the text editor or  the web browser you opened in the previous step.</p> <p></p> </li> <li> <p>(Optional) Open the lab-commands.txt file in an editor, to copy &amp; paste commands throughout the lab. </p> </li> </ol> <p>TIP: You may use the lab-commands.txt file to copy &amp; paste commands throught the lab after you have cloned the lab repo. </p> <pre><code>    gedit /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab-commands.txt\n</code></pre>"},{"location":"1597-WebSphere_Automation/#section-1-set-up-ibm-websphere-automation-in-the-lab-environment","title":"Section 1 - Set up IBM WebSphere Automation in the lab environment","text":"<ol> <li> <p>Log in to the student VM. You see the Desktop, which contains all the programs that you use (browsers, terminal) in this session.</p> <p>The login credentials for the student VM are:</p> <p>User ID: ibmuser</p> <p>Password: engageibm</p> </li> </ol> <p></p> <ol> <li> <p>Clone the GitHub repo to download the lab artifacts and Linux shell scripts that are used in the lab. Then, set execute permissions for the scripts. </p> <p>a. Open a Terminal window on the VM, and ensure that you are in the home directory of the user, ibmuser:</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the Terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> <p>c. Add execute permissions to the shell sctipts in the cloned repository</p> <pre><code>find ./WAS-Automation-LabFiles -name \"*.sh\" -exec chmod +x {} \\;\n</code></pre> <p>d.  Verify the shell scripts are now executable in the two lab directories:</p> <pre><code>ls -l /home/ibmuser/WAS-Automation-LabFiles/techxchange/*\n</code></pre> <p></p> </li> </ol> <p>=================================================</p>"},{"location":"1597-WebSphere_Automation/#errata-fix-an-issue-in-our-lab-environment","title":"ERRATA - Fix an issue in our lab environment","text":"<ol> <li> <p>Change to the directory where the shell scripts are located. </p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/techxchange\n</code></pre> </li> <li> <p>Run the <code>errata.sh</code> shell script to fix a known issue in our lab environment:</p> <pre><code>sudo ./errata.sh\n</code></pre> </li> </ol> <p>===============================================</p>"},{"location":"1597-WebSphere_Automation/#11-overview-configuring-websphere-automation","title":"1.1 Overview - Configuring WebSphere Automation","text":"<p>The Fix Deployment capability of WebSphere Automation delivers determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation.  </p> <p>You run a Linux shell script, which automates the setup process. The script performs the following tasks:</p> <ul> <li>Create the <code>ssh key</code></li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the <code>wsa-ansible</code> secret that contains the key</li> <li>Create the <code>known_hosts</code> file</li> <li>Create the <code>wsa-secure-fixcentral-creds</code> secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <p>First, you must verify that IBM WebSphere Automation is in the \"Ready\" state. </p>"},{"location":"1597-WebSphere_Automation/#12-ensure-websphere-automation-is-ready-for-use","title":"1.2 Ensure WebSphere Automation is \"Ready\" for use","text":"<ol> <li> <p>Log in to Red Hat OpenShift CLI:</p> <p>a. Open a new Terminal window in the VM.</p> <p>b. Type <code>oc login -u ocadmin -p ibmrhocp</code> to log in to Red Hat OpenShift. </p> <p>Use the following credentials to log in: </p> <p>username: ocadmin</p> <p>password: ibmrhocp</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure that you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation ready in your environment. </p> </li> </ol> <p>Note: The output must indicate that the WSA resource <code>READY</code> state is <code>True</code> before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre>"},{"location":"1597-WebSphere_Automation/#13-use-the-provided-shell-script-to-setup-websphere-automation","title":"1.3 Use the provided shell script to setup WebSphere Automation","text":"<p>In this section, you run a shell script that performs the setup steps noted above, which are required to use the Fix Deployment features in IBM WebSphere Automation. </p> <ol> <li> <p>Ensure you are in directory where the shell scripts are located. </p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab1-CVE\n</code></pre> </li> <li> <p>Run the shell script to configure WebSphere Automation:</p> <pre><code>./wsa-setup.sh\n</code></pre> <p>Note: The script runs without any user interaction.  </p> </li> <li> <p>When the script completes, verify that the test-connection Ansible playbook ran successfully, as illustrated in the console output. </p> <p>You should see the message TEST PASSED, which indicates that WebSphere automation is properly configured. </p> <p></p> <p></p> <p>What if the script FAILS?</p> <p>If the script completed with \"TEST FAILED\", contact the lab instructor. </p> <p>Then, RE-RUN the script again. </p> <p>Note: you can also run the <code>oc logs --tail</code> command that is shown in the console output, which displays the entire log output from the ansible playbook. That log might provide additional insights into the error. </p> </li> </ol> <p>You have now completed the WebSphere Automation setup procedures</p> <p>If the <code>wsa-setup.sh</code> script completed with TEST PASSED, you can proceed with the lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/#section-2-accessing-the-websphere-automation-ui","title":"Section 2 - Accessing the WebSphere Automation UI","text":"<p>A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers. </p> <p>For this lab, WebSphere Automation is pre-installed on an OpenShift cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.</p> <ol> <li> <p>On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>https://cpd-websphere-automation.apps.ocp.ibm.edu/zen/#/homepage</p> <p></p> <p></p> </li> <li> <p>On the <code>Log in to IBM Cloud Pak</code> page, select the <code>OpenShift authentication</code> as the authentication type. Then click <code>Log in</code></p> <p></p> <p>Note: If necessary, accept all the browser security warnings and certificates. In Firefox, click Advanced, and then scroll down and click Accept the risk and continue. </p> <p></p> </li> <li> <p>Enter <code>ocadmin</code> as username and <code>ibmrhocp</code> as password. And click <code>Log In</code>.</p> <p></p> <p></p> </li> <li> <p>At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>View the <code>Application Runtimes</code> that are registered with IBM Automation.</p> <p>a. Click the menu icon in the upper left corner of the page.</p> <p></p> <p>b. Click <code>Operate</code>, and then select <code>Application runtimes</code>.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that are registered with IBM Automation.</p> <p></p> <p></p> </li> <li> <p>The Application runtimes \u2013 Security page appears. There is no data displayed because no WebSphere or Liberty servers are registered yet.</p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#21-receiving-security-event-notifications-via-email","title":"2.1 Receiving security &amp; event notifications via email","text":"<p>Note: In this lab environment, we have not configured email notifications.</p> <p>Notifications are sent to a list of email addresses when a change is detected in the security or health status of one or more servers that WebSphere Automation monitors.</p> <p>For security monitoring, email notifications are sent when a new security bulletin is published that affects your server inventory, when a newly tracked server is vulnerable to one or more existing CVEs, or when a security fix is successfully applied to a managed server. </p> <p>For server health monitoring, email notifications are sent when an investigation into a server health issue is started, when an investigation successfully completes, or when an investigation fails to complete. </p> <p>You can also define custom notifications for events that occur in WebSphere Automation using webhook notifications for <code>Slack</code> and <code>ServiceNow</code>. </p> <p>Reference: To review the information that is included in each email, see Example notification contents in the IBM WebSphere Automation documentation: </p> <p>https://www.ibm.com/docs/en/ws-automation?topic=notifications-example-notification-contents</p> <p></p>"},{"location":"1597-WebSphere_Automation/#section-3-register-websphere-application-server-with-ibm-websphere-automation","title":"Section 3 - Register WebSphere Application Server with IBM WebSphere Automation","text":"<p>In this section, you run a Linux shell script to automatically register a WebSphere Application Server to IBM WebSphere Automation. </p> <p>The Linux shell script obtains the necessary information as described below. Then, the script runs a <code>wsadmin</code> script to register the WebSphere Application Server.  </p> <p>WebSphere Application Servers and WebSphere Liberty servers are added to WebSphere Automation by registering them with the usage metering service.</p> <p>To register your application servers with the usage metering service, it requires the following usage metering details. The script you  run gathers this information. </p> <ul> <li> <p>URL: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.</p> </li> <li> <p>API Key: The token that is used to authenticate the WebSphere Application Server and Liberty servers during the registration process.</p> </li> <li> <p>Usage metering certificate: The certificate that contains the public key. This key allows a WebSphere Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.</p> </li> </ul> <p>In this section, you run the <code>register-was-server.sh</code> script to register a WebSphere Application Server, version 9.0.5.7. </p> <ol> <li> <p>Minimize the browser window and open a new terminal window.</p> <p></p> </li> <li> <p>Run the <code>register-was-server.sh</code> script to register the WebSphere server with IBM WebSphere Automation</p> <p>a. Change directory to the location of the script:</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab1-CVE\n</code></pre> <p>b. Run the script, passing in the parameter <code>9057</code> to register the WebSphere version 9.0.5.7 server in this lab environment. </p> <pre><code>./register-was-server.sh 9057\n</code></pre> <p></p> <p>Once the script completes, you see the message indicating that the WebSphere server was successfully registered. </p> </li> </ol> <p></p> <p>At this point, the newly registered server is automatically added to the WebSphere Automation dashboard in the UI. </p> <ol> <li> <p>View the newly registered WebSphere server in WebSphere Automation Dashboard</p> <p>a. Open the browser in the VM, and go to the tab where the WebSphere Automation dashboard is displayed. </p> <p>Note: the URL is: https://cpd-websphere-automation.apps.ocp.ibm.edu/websphereauto/security</p> <p>b. From the WebSphere Automation <code>Security</code> dashboard, confirm that the tWAS v9.0.5.7 server is registered in IBM Automation.</p> <p>Note: It might take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI.</p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#section-4-proactive-cve-protection-for-websphere-with-ibm-websphere-automation","title":"Section 4 - Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":""},{"location":"1597-WebSphere_Automation/#41-business-context-for-this-scenario","title":"4.1 Business Context for this scenario","text":"<p>You are a WebSphere Administrator, part of a WebSphere Operations Team that is responsible for maintaining security compliance of the WebSphere estate in the enterprise. </p> <p>A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is often a very manual and time consuming process, as illustrated below:  </p> <p></p> <p>This is where IBM WebSphere Automation can help!</p> <p>With WebSphere Automation, you have:</p> <ul> <li> <p>Management dashboard: A Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).</p> </li> <li> <p>Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.</p> </li> <li> <p>Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.</p> </li> <li> <p>Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.</p> </li> <li> <p>Fix History: A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues</p> </li> <li> <p>Automated fix installation of Fixpaks and iFixes to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard. </p> </li> </ul> <p>In this section, you use the IBM WebSphere Automation to demonstrate its powerful capabilities for proactive CVE protection for WebSphere. </p> <p></p>"},{"location":"1597-WebSphere_Automation/#42-how-ibm-websphere-automation-automatically-manages-your-websphere-and-liberty-server-security-posture","title":"4.2 How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture","text":"<p>WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation. </p> <p>The WebSphere Automation vulnerability manager makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers by using the WebSphere Automation UI.</p> <p>When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation CVE/PSIRT monitor detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.</p> <p>After defining an exposure mitigation plan, administrators can then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.</p> <p></p>"},{"location":"1597-WebSphere_Automation/#43-working-with-traditional-websphere-servers-with-ibm-automation-security-vulnerabilities","title":"4.3 Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities","text":"<p>You can view the security vulnerability status of each server in your inventory from the Security page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.</p> <p>You can track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.</p> <p>In this section of the lab, you do the following tasks: </p> <ul> <li> <p>Resolve known vulnerabilities in the WebSphere traditional application server, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix that is documented in the security bulletin for this vulnerability. </p> </li> <li> <p>Review the security posture and fix history of the WebSphere application server.   After applying iFixes or Fixpaks, IBM Automation immediately updates the security information for that application server to show that the critical vulnerabilities are patched. </p> </li> </ul> <p></p> <ol> <li> <p>In the browser, go to the Security -&gt; Servers dashboard in WebSphere Automation.</p> <p></p> <p>You see that this server Risk Level is 10.0, with (+## more) unresolved CVEs. </p> <p>Note: Near the top of that list is the LOG4J vulnerability, known as CVE-2021-44228, with a critical score of 10.  </p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered might be different than what is shown in the screen capture. <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#431-review-cve-2021-44228-to-understand-the-remediation-options-for-the-log4j-vulnerability","title":"4.3.1 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability","text":"<p>In this section, you review the details of the critical (10.0) CVE-2021-44228 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>You apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> </li> <li> <p>View the security bulletins for the CVE-2021-44228 Log4J vulnerability.</p> <p>a.  Click CVE-2021-44228 link under the 9057 servers Unresolved CVEs column.</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level Critical (10)</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the 9057 WebSphere server was exposed to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> <p></p> <p>b.  Click the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>c.  The security bulletin is displayed in a new browser tab.</p> <p>d. Close the <code>site cookies</code> dialog box, if displayed</p> <p>e.  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you can see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips.</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046).</p> <p></p> <p>You can also acess the security bulletins from the ibm.com/support pages. You are prompted to log in by using your IBM ID to access the content from the IBM Support site. </p> <p>https://www.ibm.com/support/pages/node/6525706</p> </li> <li> <p>Close the browser tab containing the security bulletin    </p> </li> <li> <p>Return to the browser tab that contains the <code>IBM WebSphere Automation dashboard</code>. Then, return to the <code>Security</code> view.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#432-update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"4.3.2 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <p>There are a couple of additional components in the product to support this use case:</p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the <code>websphereSecure</code> custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server by using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/#4321-navigate-to-the-server-and-unresolved-cve-to-fix","title":"4.3.2.1 Navigate to the Server and unresolved CVE to fix","text":"<p>Apply the recommended iFix to resolve the CVE-2021-44228 vulnerability.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p>You fix it by applying the recommended iFix (PH42728).</p> <p></p> </li> <li> <p>Click tWAS_9057_server to view the list of CVEs and vulnerabilities.</p> <p></p> <p>The list displays both resolved and unresolved CVEs for the selected server. It also shows the Risk Level to identify the severity of the vulnerabilities, and the number of days the server was exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click CVE-2021-44228 to view the CVE information and affected servers.</p> <p></p> <p>On the CVE Information page for CVE-2021-44228, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#4322-prepare-fix","title":"4.3.2.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Select the target server to patch and the dialog shows all affected servers that are known to WebSphere Automation, and lets you select the desired fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation is deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This might be a preferred option for fix packs because they are significantly larger than interim fixes, especially for traditional WebSphere fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>This option automatically downloads the fix and then installs it after the download is complete. </p> <p>Fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you can download and install the recommended iFix for the CVE into the tWAS_9057_server.  </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE.</p> <p>Next to each affected server, there is a link to <code>Prepare Fix</code>. </p> <p>a. Click the <code>Prepare fix</code> link next to tWAS_9057_server for CVE-2021-44228.</p> <p></p> <p>b. From the Select fix page, select the <code>PH42728</code> iFix. Then, click <code>Fetch fix</code>. </p> IMPORTANT:  If the PH42728 iFix is not listed under the resolution column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. WebSphere Automation only loads the meta-data for the unresolved CVEs of the registered servers.   WebSphere Automation does this by using a background process that spins up several threads. Because there are more unresolved CVEs than the number of threads loading the meta-data, it takes WebSphere Automation a couple of iterations to load all of the meta-data for the fixes.    Typically, the process completes within 8-10 minutes after the server is registered.  WebSphere Automation continues to load fix meta-data as new unresolved CVEs are detected for registered servers. <p></p> <p>This action causes WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix is successfully fetched from IBM Fix Central, the status changes to Ready to Install.</p> <p></p> </li> <li> <p>Stop the WebSphere Application Server: </p> <p>a. Return to a Terminal window in the VM</p> <p>b. Run the <code>stopServer.sh</code> command below </p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server -username wasadmin -password wasadmin\n</code></pre> <p> </p> TIP: IBM WebSphere Automation will attempt to stop the WebSphere Application Server, if the credentials areprovided in the <code>soap.client.props</code> file. <p> However, in this lab environment, the WebSphere credentials are not stored, and you must manually stop the WebSphere Application Server in order for IBM WebSphere Automation to apply the iFix that was downloaded.</p> </li> <li> <p>Verify the WebSphere Application Server is stopped, using the command below: </p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/serverStatus.sh tWAS_9057_server -username wasadmin -password wasadmin\n</code></pre> <p> </p> </li> <li> <p>Install the fix to resolve the CVE.</p> <p>After the fix is successfully fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click Install fix next to tWAS_9057_server.</p> <p></p> <p>b. When prompted to confirm the installation, click Proceed.</p> <p>Note: For this lab, Create backup option should be set to off.</p> <p>c. After installation starts, a new fix record is created, and the installation begins.</p> <p></p> <p>d. The installation can take 5 or 6 minutes to complete. Wait until you see the status change to Installation complete.</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click the ID of the action and view the <code>runbook.log</code> output file. </p> <p>Common errors that are reported in the log are the <code>ssh key</code> and the <code>wsa-ansible secret not properly configured in the environment</code>.  </p> <p></p> <p></p> </li> <li> <p>Restart the WebSphere Application Server: </p> <p>a. Return to a Terminal window in the VM</p> <p>b. Run the <code>startServer.sh</code> command below </p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> <p> </p> TIP: IBM WebSphere Automation will START WebSphere Application Servers after it installs a fix, if and only if, IBM WebSphere Automation Stopped the server. <p> However, in this lab, you manually stopped WebSphere Application Server, so WebSphere Automation did NOT restart it.</p> <p></p> </li> </ol> <p>Congratulations! You successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server. </p> <p>In the next section of the lab, you review the updated security posture and fix history of the WebSphere server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/#433-view-the-security-posture-and-fix-history-of-your-websphere-servers","title":"4.3.3 View the security posture and Fix History of your WebSphere servers","text":""},{"location":"1597-WebSphere_Automation/#fix-history","title":"Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations team fixes vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to document the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days that servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities are detected, when and how they are fixed, and how many days that servers are exposed.</p> <p>In this section, you review the security posture and fix history of the two traditional WebSphere servers that are used in the lab to demonstrate how WebSphere Automation manages the details, so you can handle your patching SLAs with ease.</p> <p>Since you applied the PH42762 iFix, now you can examine the updated security posture of the 9057 WebSphere Application Server.</p> <ol> <li> <p>View the tWAS_9057_server CVE Information.</p> <p>a. From the Security view in the WebSphere Automation dashboard, click the tWAS_9057_server link located under the Server column.</p> <p></p> <p>b.  Select the Information tab.</p> <p></p> <p>c.  From the Information view, you can see the list of Installed iFixes for the 9057 server.</p> <p></p> <p>Notice that the Fixed date for the iFixes that are related to the Log4J vulnerability shows that they were installed moments ago.</p> <p>However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.</p> IBM WebSphere Automation reports ALL iFixes that were applied, regardless of when they were applied. However. It can only determine fix dates, number of days that the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere Application Server is registered with IBM WebSphere Automation. </li> <li> <p>View the tWAS_9057_server CVE Vulnerabilities details.</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab.</p> <p></p> <p>b. From the list of CVEs, sort by Status, and display the Resolved CVEs on top.</p> <p></p> <p>The CVEs that are listed as Resolved are related to Log4J CVEs that were fixed by applying the iFix earlier; CVE-2021-44228 being the most critical CVE listed.</p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server was exposed to each vulnerability.</p> </li> <li> <p>View the tWAS_9057_server Fix History details.</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab.</p> <p>b. Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice the Fixes that were applied.</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were Installed. Next to each Fix you can view the CVEs that were resolved by that Fix, and more importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers.</p> <p>a.  Return to the Security view. Then, select the CVEs category.</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b. View the CVE-2021-44228 CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE. </p> <p></p> <p>In this section you learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to respond to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).</p> <p>You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI. </p> <p>You learned that WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p></p> </li> </ol> <p>Congratulations!  You completed the proactive CVE management lab for traditional WebSphere Application Servers.      </p> <p></p>"},{"location":"1597-WebSphere_Automation/#section-5-detect-and-trigger-investigation-of-application-memory-leak-with-ibm-websphere-automation","title":"Section 5 - Detect and trigger investigation of Application Memory Leak with IBM WebSphere Automation","text":"<p>In this section of the lab, you are going to use a traditional WebSphere Application Server registered with IBM WebSphere Automation (WSA), and monitored by Instana to drive a memory leak investigation.</p> <p>You will learn how WSA can automatically:</p> <ul> <li> <p>detect memory leaks before they cause a JVM crash</p> </li> <li> <p>gather problem determination (PD) information while the leak is in     progress</p> </li> <li> <p>analyze the Problem Determination info and produce a report which can be exported and shared with application development teams or application vendors.</p> </li> </ul> <p></p> <p>You will use a sample application which continuously adds objects to the JVM heap to create a memory leak event.</p> <p>Instana will detect the event and initiate communication with WebSphere Automation to inform that a leak has been detected. </p> <p>Then WebSphere Automation opens an investigation and gathers the necessary problem diagnostic information for that server.  </p> <p>You will see the investigation is opened and progresses though its investigation proess. These processes include:</p> <ul> <li> <p>Memory leak detected</p> </li> <li> <p>Identifying server</p> </li> <li> <p>Collecting heap dump</p> </li> <li> <p>Analyzing heap dump</p> </li> <li> <p>Investigation complete</p> </li> </ul> <p>Upon completing the investigation, WSA provides an analysis summary which indicates the likely potential root cause of the memory leak. </p> <p>In this lab, the root cause is a vector, growing unbounded, in the sample application which is being hosted by the servlet wrapper. </p> <p>WSA also allows you to download all the files that you need to share with your application development team or application vendor, so that they could take the action to remediate the memory leak in the application.</p> <p>### 5.1 Verify the Instana agent is running and configured</p> <p>For this lab, the Instana agent has already been installed on the VM. </p> <p>However, installing the Instana agent is simple. Using the Instana UI, you can select options for installing the agent, such as the <code>agent mode</code>, <code>agent runtime</code>, and <code>installation mode</code>. Doing so, produces a <code>curl command</code> that you run from a Terminal window, to install the Linux agent. </p> <ol> <li> <p>Check that the Instana agent process is running. You should see the Instana Java process listed. </p> <pre><code>ps -ef | grep instana\n</code></pre> <p></p> <p>Tip: The Instana agent is installed in /opt/instana/agent directory.</p> </li> <li> <p>Login to the Instana UI</p> <p>a.  From the web browser, open a new window and click the <code>Instana bookmark</code> to access Instana page.</p> <p></p> <p>The login credentials are:</p> <p>E-Mail: admin@instana.local</p> <p>Password: qJgN6hS6sE</p> </li> <li> <p>Verify the Instana agent installation</p> <p>a. Click on the <code>Infrastructure</code> icon on the left navigation bar. </p> <p>You will see the <code>WebSphere</code> infrastructure zone that we configured in the Instana agent for this lab. </p> <p>This infrastructure zone is configured for montoring WebSphere, using Instana's out of the box capabilities. </p> <p></p> <p>b. Click <code>Time Rage</code> dropdown button, select <code>Last 5 minutes</code> and click <code>Live</code>.</p> <p></p> <p>The Istana agent is now set to monitor the changes in 5 minutes interval, the agent installation is now completed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#52-websphere-automation-integration-with-instana-and-websphere-servers","title":"5.2 WebSphere Automation integration with Instana and WebSphere Servers","text":"<p>WebSphere Automation (WSA) communicates with Instana to receive real-time Instana alerts. </p> <p>WSA also accesses the VMs where registered WebSphere servers are hosted to collect problem diagnostic information. </p> <p>To do so, a secure ssh connection must be configured between the Instana server and the VM hosting WebSphere Application Servers. </p> <p>For this lab, we have configured the secure ssh connections required for Instana, WebSphere Automation, and WebSphere Application Server environments, according to the product documentation. </p>"},{"location":"1597-WebSphere_Automation/#53-configure-instana-for-memory-leak-alert","title":"5.3 Configure Instana for memory leak alert","text":"<p>Configuring Instana to create alerts is outside the scope of this lab.</p> <p>The Instana configuration has already been performed, as required for the lab. </p> <p>However, for your reference, the detailed steps for configuring Instana alerts for WebSphere Application Server is docuemnted in <code>Appendix A</code> of this lab guide. </p> <p>The high-level Instana configuration for the memory leak alert includes:</p> <ul> <li>create a custom payload</li> <li>create an alert channel</li> <li>create a custom event</li> <li>create an alert</li> </ul> <p></p> <ol> <li> <p>View the <code>Custom payload</code> that was created for the lab</p> <p>Adding a custom payload to your alert notifications enables you to use Instana alerts more efficiently.</p> <p>a. From the Instana page, go to <code>Settings &gt; Team Settings</code>\u00a0page, under\u00a0<code>Events &amp; Alerts</code>. Then click\u00a0<code>Custom Payload</code>.</p> <p>b. You see the custom payload that is configred for the lab.</p> <p>In our case, alert notifications include a custom payload based on the automatically detected PID of the internal Process ID of the processes being monitored. </p> <p></p> </li> <li> <p>View the <code>alert channel</code> that was created for the lab</p> <p>An Alert Channel is a mechanism that is used to get Events out of Instana and into another system when Events are trigger. There are a variety of Alert Channels including email notifications, slack, Watson AIOps, and more.</p> <p>a.  On the\u00a0Team Settings\u00a0page, under\u00a0<code>Events &amp; Alerts</code>, click\u00a0<code>Alert Channels</code>.</p> <p>b. You see the alert channel named <code>WebSphere Automation Healing Webhook</code> that is configured for the lab.</p> <p></p> </li> <li> <p>View the <code>custom event</code> that was created for the lab</p> <p>A Custom Event enables you to create issues or incidents based on an individual metric of any given entity.</p> <p>a. On the\u00a0Team Settings\u00a0page, under\u00a0<code>Events &amp; Alerts</code>, click\u00a0<code>Events</code>.</p> <p>b. In the <code>search field</code>, enter <code>memory usgae high</code> to filter the list of events.</p> <p>b. You see the custom event named <code>Memory Usage High</code> that was configured for the lab.  </p> <p></p> </li> <li> <p>View the  <code>alert</code> that was creatd for the lab</p> <p>An Alert is raised when an <code>event</code> has triggered, such as <code>high memory usage over 80% for some period</code>. </p> <p>a. On the\u00a0Team Settings\u00a0page, under\u00a0<code>Events &amp; Alerts</code>, click\u00a0<code>Alerts</code></p> <p>b. You see the Alert named <code>WbSphere Automation Healing Memory Leak</code> that was configured for the lab. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#54-websphere-memory-leak-check-with-websphere-automation","title":"5.4 WebSphere memory leak check with WebSphere Automation","text":"<p>In this section, you run a script to create a memory leak incident for an application running in a WebSphere Application server instance which is already registered in WebSphere Automation. </p> <p>When WebSphere Automation detects the memory leak, it automatically conducts the analysis to identify the root cause.</p> <ol> <li> <p>Run the following Linux shell script to install a memory leak application in WebSphere Application Server, which will also restart the WebSphere application server to pick up the changes. </p> <p>a. From a Terminal window, ensure you are in the directory that where the script is located</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak\n</code></pre> <p>b. Run the command below to install the memory leak app in the WebSphere Application Server:</p> <pre><code>./klp-tWAS_configure_MLApp.sh\n</code></pre> <p></p> </li> <li> <p>Login to WebSphere Automation, if you are not already logged in</p> <p>a.  On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>https://cpd-websphere-automation.apps.ocp.ibm.edu/zen/#/homepage</p> <p></p> <p></p> <p>b.  On the <code>Log in to IBM Cloud Pak</code> page, select the <code>OpenShift authentication</code> as the authentication type. Then click <code>Log in</code></p> <p></p> <p>Note: If necessary, accept all the browser security warnings and certificates. In Firefox, click Advanced, and then scroll down and click Accept the risk and continue. </p> <p></p> <p>c.  Enter <code>ocadmin</code> as username and <code>ibmrhocp</code> as password. And click <code>Log In</code>.</p> <p></p> <p></p> <p>d.  At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>Go to the <code>Application Runtimes</code> which shows the WebSphere servers registered with IBM Automation.</p> <p>a. Click the menu icon in the upper left corner of the page.</p> <p></p> <p>b. Click <code>Operate</code>, and then select <code>Application runtimes</code>.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that are registered with IBM Automation.</p> <p></p> <p> </p> </li> <li> <p>In the WebSphere Automation UI, click on the <code>Health</code> icon.</p> <p>The <code>Health</code> section is where you view and analyze server health problems. </p> <p></p> <p>Since all the application are working fine at this time, you do not see any health investigations on the Health page yet.</p> <p></p> </li> <li> <p>In this lab, you can also monitor the WebSphere application server     memory change in Instana.</p> <p>a. In Instana administration console, click <code>Infrastructure</code> icon, click     <code>Comparison Table</code>, select <code>JVMs</code> from the dropdown, and click <code>bootstrap WAS90.SERV1.</code></p> <p></p> <p>As you can see, currently there is not any issue with the WAS server.</p> <p></p> </li> <li> <p>Set the <code>Time Range</code> to <code>Last 5 minutes</code> and click <code>Live</code> to see the current state</p> <p></p> </li> <li> <p>From the Terminal window, run the provided script which will run a sample memory leak application in WebSphere. Instana will immediately show the significant increase in JVM heap usage, which will create an application memory leak event.</p> <pre><code>/home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak/klp-curl_MLAPP_add_was.sh\n</code></pre> <p>The script output is showing like this:</p> <p></p> <p>[ibmuser@student ~]$ /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak/klp-curl_MLApp_add_was.sh</p> <p>Increased heap usage by 25MB</p> <p>Increased heap usage by 50MB</p> <p>Increased heap usage by 75MB</p> <p>Increased heap usage by 100MB</p> <p>Increased heap usage by 125MB</p> <p>Increased heap usage by 150MB</p> <p>Increased heap usage by 175MB</p> <p>Increased heap usage by 200MB</p> <p>Increased heap usage by 225MB</p> <p>Increased heap usage by 250MB</p> <p>Increased heap usage by 275MB</p> <p>Increased heap usage by 300MB</p> <p>Increased heap usage by 325MB</p> </li> <li> <p>In the Instana page, you can see that the memory is increasing steadily, and one issue is detected.</p> <p></p> </li> <li> <p>Go back to the WebSphere Automation UI. You see that WebSphere Automation has received the Memory leak alert and activate its investigation on the issue. </p> <p>Initially you might see the Server <code>Not identified yet</code> status and soon you see the server name is identified. </p> <p></p> <p>a. Click the <code>Investigating</code> link to view its details.</p> <p></p> </li> <li> <p>The Investigating section lists the problem, status, Server, Host     and Cell information, why the investigation is started and the     investigation history. </p> <p>a. Click the View history dropdown to see current investigation activities</p> <p></p> <p>The WSA memory leak investigation activities include:</p> <ul> <li>Memory leak detected</li> <li>Identifying server</li> <li>Collecting heap dump</li> <li>Analyzing heap dump</li> <li>Investigation complete</li> </ul> <p>The screenshot below shows that the investigation is in process.</p> <p></p> </li> <li> <p>After a few minutes, the WebSphere Automation investigation will show <code>Investigation Complete</code>. You can see the analysis summary which points to the root cause of the issue.</p> <p></p> <p>You can also click <code>Download all files</code> to get the analysis reports, heap dumps and WebSphere Automation runbooks on your workstation.</p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>you can run a script to reduce the heap usage and then stop the WAS     server with the commands:</p> <p>a. Free the memory </p> <pre><code>/home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak/klp-curl_MLApp_removeLast.sh\n</code></pre> <p>b. Stop the WebSPhere Application Server</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server -username wasadmin -password wasadmin\n</code></pre> <p></p> <p>Congratulations! You have completed the WebSphere Automation Memory Leak Detection lab.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/#appendix-a-detailed-steps-to-configure-instana-for-memory-leak-alert","title":"Appendix A: Detailed steps to configure Instana for memory leak alert","text":"Click to expand: Appendix A: Detailed steps to configure Instana for memory leak alert     This section describes the steps to configure Instana for the memory leak alert to be used by WebSphere Automation (WSA).    You will use the Instana administrative console UI to complete the following activities.  The actives include:     - create a custom payload   - create an alert channel   - create a custom event   - create an alert      1.  Create a custom payload.      Adding a custom payload to your alert notifications enables you to use Instana alerts more efficiently.      You can create a custom payload by using the Instana administrative console or using the Instana API, in the lab, you are using the Instana administrative console.      a. From the Instana page, go to **`Settings &gt; Team Settings`**\u00a0page,     under\u00a0**`Events &amp; Alerts`**. Then click\u00a0**`Custom Payload`**.      ![Graphical user interface, text, application, chat or text message  Description automatically generated](./lab2-media/media/image32.png)      b. In the\u00a0**`Key`**\u00a0field, type\u00a0**`PID`**, do not use any other value for the key. Set the\u00a0**`Value type`**\u00a0to\u00a0**`Dynamic`**. In     the\u00a0**`Value`**\u00a0field, click\u00a0**`Select Tag`**\u00a0and select\u00a0**`Internal -     Process ID`**, then click\u00a0**`Save`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image33.png)  2.  Gather the WSA information required to set up the Alert Channel.      a. From the Terminal window, run the following **oc** commands to         get the **Webhook URL**\u00a0for WebSphere Automation\u00a0installation.          oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443          oc project websphere-automation          oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak      Your outputs look like this       <p>[ibmuser@student ~]$ oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443</p> <p>Login successful.</p> <p>You have access to 66 projects, the list has been suppressed. You can list all projects with 'oc projects'</p> <p>Using project \"websphere-automation\".</p> <p>[ibmuser@student ~]$ oc project websphere-automation</p> <p>Already on project \"websphere-automation\" on server \"https://api.demo.ibmdte.net:6443\".</p> <p>[ibmuser@student ~]$ oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak</p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak</p>       The WebSphere Automation Webhook URL is: **https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak**, you will use it later.      b. Run the following oc command to get the token\u00a0for WebSphere     Automation\u00a0installation.          oc get secret -o jsonpath='{.data.token}' wsa-health-webhooks-apis-sa-generated-token | base64 -d      The output is shown below, you will use the token value later, when you create the alert channel.        <p>[ibmuser@student ~]$ oc get secret -o jsonpath='{.data.token}' wsa-health-webhooks-apis-sa-generated-token | base64 -d</p> <p>eyJhbGciOiJSUzI1NiIsImtpZCI6InJ1YTJ4VU1JdnRkemdlcFM1M0habGtTcXVuM1hlZlBrY19UUl82QWRWc0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3ZWJzcGhlcmUtYXV0b21hdGlvbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ3c2EtaGVhbHRoLXdlYmhvb2tzLWFwaXMtc2EtdG9rZW4tc3R3bW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NhLWhlYWx0aC13ZWJob29rcy1hcGlzLXNhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzcxNjBjZmYtMTUwNy00MWYyLWFlODgtYjg5MjcxZjJlNzlmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OndlYnNwaGVyZS1hdXRvbWF0aW9uOndzYS1oZWFsdGgtd2ViaG9va3MtYXBpcy1zYSJ9.TVQfRO6E2ZTa4BBSvVgiv-74gbhEG-BVOBu0WaUFG_FBRJsplT6qr_trcsrvyNL9BVrF3kGd4oCqCos8HQGoIO0wEt7DsyePEbIRwL_vn8Jyr_qBr7cHrbWhu4y6EMWCObDWQdZRUsJqtgSLxtTzYqSf6upo_uQczjD5waWLX3gZbeeh5GcyNctFaQPpp_neM6HY-gZJxCSm8o7XmNB1Zcxg-F6ehhdf-0uXDXGYuBKsouWpBatERwBoVL3JgWQTPDUeIJApH9EOlO9LDieb8gaJDbWVB4b1ZsIWdlJg_F5pbWbapRuM8aAlf0HOxCaV84zTifK7J5R2NBf9xxeqrCqMpeSxfR5_Heh9WIl1lviKVn3qeS6aktj6duyu_5lpHw6RQjArcUk5NCxfe7hGS64BaISEbNdfrcYTNqEKeiNmydEuX7PpJaJxHBkmYYbWnZ0BrMaqQ1kUlTcvACs5FsNmbBQ3MOt3hin8dDqC9A1mFA_KlD1Oa1suhuY0DB_8tGwhKsIxFxY9pbKXhmqRl__7oueFxuFxxfvPWanL0WzRsoTJShyhcO6K3oyZPJWC4Cr2I42qo_g_Lth7gBIYRdzFJ63xpNgGUDStTXXcMkfMnm8v-lo5qzsezdgYBb6l152zcS6dA7Ld3502zIpnMx6ZGQadDL8uOSZbK-2CRU0</p>   3.  Create an alert channel.      To create an alert channel by using the Instana administrative  console,      a.  On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**, click\u00a0**`Alert Channels`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image34.png)      b. Click\u00a0**`Add Alert Channel`**\u00a0and select\u00a0**`Generic Webhook`**.      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image35.png)      c. On the\u00a0Create Generic **Webhook Alert Channel**\u00a0page, enter the name as `WebSphere Automation Healing Webhook` in the\u00a0**`Name`**\u00a0field      d. Enter the\u00a0**`Webhook URL`**\u00a0you have for\u00a0WebSphere     Automation\u00a0installation.          https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak      ![Graphical user interface, text, application, email, Teams  Description automatically generated](./lab2-media/media/image36.png)      e. Under\u00a0**`Custom HTTP Request Headers`**, click\u00a0**`Add Header`**.      ![Graphical user interface, text, application, email, website Description automatically generated](./lab2-media/media/image37.png)      f. Create the following two `request headers`. Then click **`Test Channel`**.       Key Value Content-Type application/json Authorization Token value you get with the oc command in previous step         ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image38.png)       g. Be sure you clicked **`Test Channel`** to test the channel before you proceed.       You should see the message showing the channel was successfully triggered.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image39.png)  4.  After verifying the channel, click **`Create`** to create it.      The alert channel is created.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image40.png)  5.  Create a `custom event`      A Custom Event enables you to create issues or incidents based on an individual metric of any given entity.      To create a custom event by using the Instana administrative console:      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Events`**, then click **`New Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image41.png)      b. Create a custom event named \u201c**`Memory Usage High`**\u201d. Set its parameters as shown below.       **Note:** Refer to screenshot below!      `1. Event Details`       - Name: Memory Usage High       - Description: Memory usage over 80%       - Issue Severity: Warning       - Grace Period: 90 s      `2. Condition`       - Source: Built-in metrics       - Entity type: JVM       - Metric: Memory &gt; Used percentage       - Time window: 10 s       - Aggregation: max       - Operator: &gt;=       - Percentage: 80      `3. Scope`       -  Apply on (required): All available entities       ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image42.png)      c. Click **`Create`** to create the new custom event.  1.  Create an `alert`.      An Alert is raised when an event has triggered, such as high memory usage over 80% for some period.       To create an alert by using the Instana administrative console,      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Alerts`**, then click **`New Alert`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image43.png)      b. In the\u00a0**`Name`**\u00a0field, type a name for the alert as: **`WebSphere Automation Healing Memory Leak`**.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image44.png)      c. In the\u00a0**`Events`**\u00a0menu, select\u00a0**`Alert on Event(s)`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image45.png)      d. In the\u00a0**`Events`**\u00a0section, click\u00a0**`Add Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image46.png)      e. In the\u00a0`Add Events\u00a0window`, enter **`memory usage h`** in the search box and select\u00a0**`Memory Usage High`**. You can filter the list by using a keyword (for example,\u00a0leak) to help find the entry in the list.      Click\u00a0**`Add 1 Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image47.png)      f. Add two more events: **`Garbage collection activity high** (for JVM)` and **`Memory leak** (for JVM)`.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image48.png)      The event list updated:      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image49.png)      g.  In the\u00a0**`Scope`**\u00a0menu, select **`All available entities`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image50.png)      h.  Under\u00a0**`Alerting`**, click\u00a0**`Add Alert Channel`**, select the alert channel that you created previously. Then click\u00a0**`Add 1 Channel`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image51.png)      ![Graphical user interface, application Description automatically&gt; generated](./lab2-media/media/image52.png)      i. Click\u00a0**`Create`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image53.png)      The alert is created.       ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image54.png)    **Now the Instana configuration for memory leak alert is completed**"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#websphere-proactive-cve-protection-and-memory-leak-remediation-observed-by-instana","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":"<p>Duration: 90 mins</p> <p>Need support? </p> <ul> <li> <p>Kevin Postreich - kevinlp@us.ibm.com</p> </li> <li> <p>Yi Tang - yitang@us.ibm.com</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#introduction-to-ibm-websphere-automation","title":"Introduction to IBM WebSphere Automation","text":"<p>IBM WebSphere Automation focuses on delivering value to existing WebSphere Application Server (WAS) environments by helping administrators reduce the cost, effort and risk of addressing common vulnerabilities, automating tasks and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>In conversations with customers, the same three concerns repeatedly come up. Organizations must keep their IT estate secure, compliant amd resilient to disruption, they must keep it running optimally, and they must reduce costs and maximize ROI.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. It provides the following benefits:</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhanced remediation capabilities with insights and recommendations improve the speed and depth of understanding outages and anomalies as they occur.</p> </li> <li> <p>Augmented operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>With WebSphere Automation, security, business efficiency and resilience become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, while laying a solid automation foundation to support future growth.</p> <p>IBM WebSphere Automation is a stand-alone product that runs on Red Hat OpenShift. Entitlement to Red Hat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>You can deploy it virtually anywhere through containers that are supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that is designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#10-set-up-ibm-websphere-automation-in-the-lab-environment","title":"1.0 Set up IBM WebSphere Automation in the lab environment","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#10-setup-ibm-websphere-automation-in-the-lab-environment","title":"1.0 Setup IBM WebSphere Automation in the lab environment","text":"<p>=======</p> <p>5202d8fc109c23dcfabe6ea9088703d8c4d683ce</p> <ol> <li>Log in to the Student VM. You see the Desktop, which contains all the programs that you use (browsers, terminal) in this session.</li> </ol> <p>The login credentials for the STUDENT image are:</p> <p>User ID: ibmuser    Password: engageibm</p> <p></p> <ol> <li> <p>Clone the GitHub repo to download the lab artifacts and Linux shell scripts that are used in the lab. Then, set execute permissions for the scripts. </p> <p>a. Open a Terminal window on the VM, and ensure that you are in the home directory of the user, ibmuser:</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the Terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> <p>c.  Navigate to the cloned repo directory for this lab:</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> <p>d. Add execute permission to the shell scripts:</p> <pre><code>chmod 755 *.sh\n</code></pre> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#11-overview-configuring-websphere-automation","title":"1.1 Overview - Configuring WebSphere Automation","text":"<p>The Fix Deployment capability of WebSphere Automation delivers determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation.  </p> <p>You run a Linux shell script, which automates the setup process. The script performs the following tasks:</p> <ul> <li>Create the <code>ssh key</code></li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the <code>wsa-ansible</code> secret that contains the key</li> <li>Create the <code>known_hosts</code> file</li> <li>Create the <code>wsa-secure-fixcentral-creds</code> secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <p>First, you must verify that IBM WebSphere Automation is in the \"Ready\" state. </p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#12-ensure-websphere-automation-is-ready-for-use","title":"1.2 Ensure WebSphere Automation is \"Ready\" for use","text":"<ol> <li> <p>Log in to Red Hat OpenShift CLI:</p> <p>a. Open a new Terminal window in the VM.</p> <p>b. Type <code>oc login -u ibmadmin -p engageibm</code> to log in to Red Hat OpenShift. </p> <p>Use the following credentials to log in: </p> <p>username: ibmadmin</p> <p>password: engageibm</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure that you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation ready in your environment. </p> </li> </ol> <p>Note: The output must indicate that the WSA resource READY state is True before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#13-use-the-provided-shell-script-to-setup-websphere-automation","title":"1.3 Use the provided shell script to setup WebSphere Automation","text":"<p>In this section, you run a shell script that performs the setup steps noted above, which are required to use the Fix Deployment features in IBM WebSphere Automation. </p> <ol> <li> <p>Ensure you are in directory where the shell scripts are located. </p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> </li> <li> <p>Type <code>sudo yum install sshpass</code> to install the sshpass tool. This allows commands in the script to be executed without having to enter passwords. When prompted, enter <code>y</code> to complete the installation.</p> </li> <li> <p>Run the shell script to configure WebSphere Automation:</p> <pre><code>./wsa-setup.sh\n</code></pre> <p>The script runs without any user interaction.  </p> </li> <li> <p>When the script completes, verify that the test-connection Ansible playbook ran successfully, as illustrated in the console output. </p> <p>You should see the message TEST PASSED, which indicates that WebSphere automation is properly configured. </p> <p></p> <p></p> <p>What if the script FAILS?</p> <p>If the script completed with \"TEST FAILED\", contact the lab instructor. </p> <p>Then, RE-RUN the script again. </p> <p>Note: you can also run the <code>oc logs --tail</code> command that is shown in the console output, which displays the entire log output from the ansible playbook. That log might provide additional insights into the error. </p> </li> </ol> <p>You have now completed the WebSphere Automation setup procedures</p> <p>If the <code>wsa-setup.sh</code> script completed with TEST_PASSED, you can proceed with the lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#20-accessing-the-websphere-automation-ui","title":"2.0 Accessing the WebSphere Automation UI","text":"<p>A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers. </p> <p>For this lab, WebSphere Automation is pre-installed on an OpenShift cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.</p> <ol> <li> <p>On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/zen/#/homepage</p> <p></p> <p></p> </li> <li> <p>On the login page, select the OpenShift authentication as the authentication type.</p> <p>Note: Enlarge the browser window until you see the graphics, as illustrated below. </p> <p></p> <p>Note: If necessary, accept all the browser security warnings and certificates. In Firefox, click Advanced, and then scroll down and click Accept the risk and continue. </p> <p></p> </li> <li> <p>Select htpasswd as the login selection</p> <p></p> <p></p> </li> <li> <p>Enter ibmadmin as username and engageibm as password. And click Log In.</p> <p></p> <p></p> <p>If a Welcome pop-up window appears, click the upper right corner of the pop-up window to dismiss it. You should see IBM Automation in the upper left corner of the page. If instead, you see the \"IBM Cloudpak | Administration\" page, go to the IBM Automation page by using these steps:  </p> <p></p> <p>a. In the upper right corner, click on the cloudpak switcher icon</p> <p></p> <p>b. Select IBM Automation (WebSphere Automation) from the menu</p> <p></p> </li> <li> <p>At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>View the Application Runtimes that are registered with IBM Automation.</p> <p>a. Click the menu icon in the upper left corner of the page.</p> <p></p> <p>b. Click Operate, and then select Application runtimes.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that are registered with IBM Automation.</p> <p></p> <p></p> </li> <li> <p>The Application runtimes \u2013 Security page appears. There is no data displayed because no WebSphere or Liberty servers are registered yet.</p> IMPORTANT:  If any of the labels on the page do nt display properly, refresh the browser window by using the web browser refresh icon.   For example: The label for the Fix management tab might display as !Fix management! the first time. Refreshing the browser window results in the labels displaying correctly.   Note: This is only a one-time action. <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#21-receiving-security-event-notifications-via-email","title":"2.1 Receiving security &amp; event notifications via email","text":"<p>Before you register WebSphere servers with WebSphere Automation, you can configure email addresses to receive notifications when: </p> <ul> <li>New vulnerabilities are discovered in WebSphere servers that are registered with IBM WebSphere Automation</li> <li>iFixes or Fixpacks are installed or uninstalled</li> <li>Instana observability detects memory issues and WebSphere Automation triggers a diagnosis of the event</li> </ul> <ol> <li> <p>Add your email address as a receiver of event notifications.</p> <p>a. Select the Notifications menu item from the navigation list.</p> <p>b. Click the Email addresses tab to add the email address where notifications of new CVEs are delivered.</p> <p></p> <p></p> </li> <li> <p>The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications.</p> <p>a. Click Add.</p> <p>b. Enter your email address.</p> <p>c. Click Save.</p> <p></p> </li> </ol> <p>Great! Your email is configured to receive event notifications.</p> <p>In the next section, you register servers to WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#30-register-websphere-application-server-with-ibm-websphere-automation","title":"3.0 Register WebSphere Application Server with IBM WebSphere Automation","text":"<p>In this section, you run a Linux shell script to automatically register a WebSphere Application Server to IBM WebSphere Automation. </p> <p>The Linux shell script obtains the necessary information as described below. Then, the script runs a <code>wsadmin</code> script to register the WebSphere Application Server.  </p> <p>WebSphere Application Servers and WebSphere Liberty servers are added to WebSphere Automation by registering them with the usage metering service.</p> <p>To register your application servers with the usage metering service, it requires the following usage metering details. The script you  run gathers this information. </p> <ul> <li> <p>URL: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.</p> </li> <li> <p>API Key: The token that is used to authenticate the WebSphere Application Server and Liberty servers during the registration process.</p> </li> <li> <p>Usage metering certificate: The certificate that contains the public key. This key allows a WebSphere Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.</p> </li> </ul> <p>In this section, you run the <code>register-was-server.sh</code> script to register a WebSphere Application Server, version 9.0.5.7. </p> <ol> <li> <p>Minimize the browser window and open a new terminal window.</p> <p></p> </li> <li> <p>Run the <code>register-was-server.sh</code> script to register the WebSphere server with IBM WebSphere Automation</p> <p>a. Change directory to the location of the script:</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> <p>b. Run the script, passing in the parameter <code>9057</code> to register the WebSphere version 9.0.5.7 server in this lab environment. </p> <pre><code>./register-was-server.sh 9057\n</code></pre> <p></p> <p>Once the script completes, you see the message indicating that the WebSphere server was successfully registered. </p> </li> </ol> <p></p> <p>At this point, the newly registered server is automatically added to the WebSphere Automation dashboard in the UI. </p> <ol> <li> <p>View the newly registered WebSphere server in WebSphere Automation Dashboard</p> <p>a. Open the browser and go to the tab where the WebSphere Automation dashboard is displayed. </p> <p>Note: the URL is: https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/security</p> <p>c. Go to the WebSphere Automation Security -&gt; Servers dashboard, and confirm that the tWAS v9.0.5.7 server is registered in IBM Automation.</p> <p>Note: It might take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI.</p> <p></p> </li> <li> <p>Check your email. A mail notification is sent that shows new vulnerabilities for the registered application server.</p> <p></p> Information: In the email message, there is a link that redirects to the console to show more details about the vulnerability. However, due to network restrictions in the lab environment, this link does not work. <p></p> </li> </ol> Click to expand: Section 4 - Proactive CVE protection for WebSphere with IBM WebSphere Automation  ## 4.0 Proactive CVE protection for WebSphere Application Server    ### 4.1 Business Context for this scenario  You are a WebSphere Administrator, part of a WebSphere Operations Team that is responsible for maintaining security compliance of the WebSphere estate in the enterprise.   A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is often a very manual and time consuming process.    ![](./lab1-media/media/image2.png)   This is where **IBM WebSphere Automation** can help\\!  With WebSphere Automation, you have:    - **Management dashboard:** A Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).    - **Automated vulnerability tracking:** Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.    - **Contextual notifications:** Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.    - **Shared, live visibility to key stakeholders:** WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.    - **Fix History:** A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues    - **Automated fix installation of Fixpaks and iFixes** to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard.   In this section, you use the IBM WebSphere Automation to demonstrate its powerful capabilities for proactive CVP protection for WebSphere.    ![](./lab1-media/media/image3.png)    ### 4.2 How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture   WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation.   The WebSphere Automation *vulnerability manager* makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers by using the WebSphere Automation UI.  When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation *CVE/PSIRT monitor* detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.  After defining an exposure mitigation plan, administrators can then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.      ### 4.3 Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities  You can view the security vulnerability status of each server in your inventory from the **Security** page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.  You can track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.  In this section of the lab, you do the following tasks:     - **Resolve known vulnerabilities in the WebSphere traditional application server**, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix that is documented in the security bulletin for this vulnerability.     - **Review the security posture and fix history of the WebSphere application server.**   After applying iFixes or Fixpaks, IBM Automation immediately updates the security information for that application server to show that the critical vulnerabilities are patched.        1.  In the browser, go to the **Security -&gt; Servers** dashboard in WebSphere Automation.      ![dashboard tWAS1](./lab1-media/media/image28.png)      You see that this server Risk Level is **10.0**, with **(+## more)** unresolved CVEs.       &gt;**Note:** Near the top of that list is the LOG4J vulnerability, known as CVE-2021-44228, with a critical score of **10**.          |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=50,50)   | TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered might be different than what is shown in the screen capture.        2.  If you have not already done so, check your email. A mail notification was sent showing new vulnerabilities for the registered application server.      ![](./lab1-media/media/image29.png)      |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=100,100)   | Information: In the email message, there is a link that redirects to the console to show more details on the vulnerability. However, due to network restrictions in the lab environment, this link does not work.          ### 4.4 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability  In this section, you review the details of the critical (10.0) **CVE-2021-44228** CVE and determine the appropriate remediation options to resolve the CVE.  You apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in **CVE-2021-44228**.  1.  Notice in the IBM Automation console that **tWAS 9.0.5.7** is vulnerable to **CVE-2021-44228**.      ![](./lab1-media/media/imagev3-32.png)  2.  Click **(+ \\ more)** to expand the list of unresolved CVEs.       IBM Automation also detects additional unresolved CVEs that are related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin.      ![](./lab1-media/media/imagev3-33.png)      As noted in the IBM security bulletin, which you explore next, there are three CVEs related to the LOG4J vulnerability. A subset is highlighted below in the list of Unresolved CVEs for this WebSphere Application Server.      ![](./lab1-media/media/imagev3-34.png)  3.  After viewing the complete list of unresolved CVEs for the 9057 server, close the **Unresolved CVEs** view.  4.  View the security bulletins for the **CVE-2021-44228** Log4J vulnerability.       a.  Click **CVE-2021-44228** link under the 9057 servers **Unresolved CVEs** column.      ![](./lab1-media/media/imagev3-35.png)      From the CVE Information page that is displayed, you can see important details about this CVE.      Here you can see the following details:      - Risk Level **Critical (10)**      - Date the vulnerability was detected in the \u201c**registered**\u201d server      - Number of days the 9057 WebSphere server was **exposed** to the vulnerability      - List of affected servers that are registered with IBM WebSphere Automation      - Link to the IBM security bulletin for the CVE      &gt; **Note:** The **Days Exposed** and **date detected** are expressed from the point of time that the server is registered with IBM WebSphere Automation.      b.  Click the **View** Link to view the IBM security bulletin for this CVE.      ![](./lab1-media/media/imagev3-36.png)      c.  The security bulletin is displayed in a new browser tab.      d.  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.      ![](./lab1-media/media/imagev3-37.png)      As you can see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips.      &gt; **Note:** The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046).      ![](./lab1-media/media/image32.png)      You can read the security bulletins from the **ibm.com/support** pages. You are prompted to log in by using your IBM ID to access the content:          5.  Return to the browser tab that contains the IBM WebSphere Automation dashboard. Then, return to the **Security** view.       ![](./lab1-media/media/imagev3-39.png)    ### 4.5 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability  Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced in IBM WebSphere Automation in version 1.4.  You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the **Modify WebSphere inventory** permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.  In this section, you leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as **CVE-2021-44228**.  There are a couple of additional components now included in the product to support this use case:    - **Fix manager**      The WebSphere Automation *fix manager* uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the `websphereSecure` custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.    - **Installation manager**      The WebSphere Automation *installation manager* communicates with the registered server by using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.  ### 4.5.1 Navigate to the Server and unresolved CVE to fix  Apply the recommended iFix to resolve the CVE-2021-44228 vulnerability.  1.  Notice in the IBM Automation console that **tWAS 9.0.5.7** is vulnerable to **CVE-2021-44228**.      ![CVE 2021 44228](./lab1-media/media/image30.png)       **Note:** The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046)       ![security bulletin info](./lab1-media/media/image32.png)       You fix it by applying the recommended iFix (PH42728).        2. Click **tWAS_9057_server** to view the list of CVEs and vulnerabilities.       ![](./lab1-media/media/image83.png)       The list displays both *resolved* and *unresolved* CVEs for the selected server. It also shows the **Risk Level** to identify the severity of the vulnerabilities, and the number of days the server was exposed to the vulnerability.       ![](./lab1-media/media/image84-a.png)  3. Click **CVE-2021-44228** to view the CVE information and affected servers.      ![](./lab1-media/media/image84.png)      On the CVE Information page for CVE-2021-44228, a list of **Affected Servers** is displayed along with the option to **Prepare fix**.       &gt;**DO NOT prepare fix yet.** You do that in the following steps.       ![](./lab1-media/media/image85.png)   ### 4.5.2 Prepare Fix   The *Fix Deployment* capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes.   Selection of the wanted iFix or published fix pack is exposed through the **Prepare fix** dialog, which can be found in the CVE details view. Select the target server to patch and the dialog shows all affected servers that are known to WebSphere Automation, and lets you select the desired fix.  After you select the fix, WebSphere Automation provides two options:     - **Fetch fix:**       If installation is deferred to a later time, then the **Fetch fix** option causes the fix to be downloaded and stored for later use.       This might be a preferred option for fix packs because they are significantly larger than interim fixes, especially for traditional WebSphere fix packs.    - **Fetch then install fix:**       This option automatically downloads the fix and then installs it after the download is complete.       Fetched fixes are stored within WebSphere Automation for immediate reuse.               &gt; Now you can download and install the recommended iFix for the CVE into the tWAS_9057_server.    1. Download the recommended iFix to resolve the CVE.      Next to each affected server, there is a link to **Prepare Fix**.       a. Click the **Prepare fix** link next to **tWAS_9057_server** for **CVE-2021-44228**.      ![](./lab1-media/media/image86.png)      b. From the **Select fix** page, select the **PH42728** iFix. Then, click **Fetch fix**.        |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image47.png?cropResize=50,50)   | IMPORTANT:  If the **PH42728** iFix is not listed under the **resolution** column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. WebSphere Automation only loads the meta-data for the unresolved CVEs of the registered servers.   WebSphere Automation does this by using a background process that spins up several threads. Because there are more unresolved CVEs than the number of threads loading the meta-data, it takes WebSphere Automation a couple of iterations to load all of the meta-data for the fixes.    Typically, the process completes within 8-10 minutes after the server is registered.  WebSphere Automation continues to load fix meta-data as new unresolved CVEs are detected for registered servers.      ![](./lab1-media/media/image87.png)       This action causes WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab.       The **Status** field automatically updates as the action progresses.       ![](./lab1-media/media/image88.png)      When the fix is successfully fetched from IBM Fix Central, the status changes to **Ready to Install**.      ![](./lab1-media/media/image89.png)   2. Install the fix to resolve the CVE.      After the fix is successfully fetched, the action to **Install the fix** is made available next to the affected server.      a. Click **Install fix** next to **tWAS_9057_server**.      ![](./lab1-media/media/image90.png)      b. When prompted to confirm the installation, click **Proceed**.      &gt; **Note:** For this lab, **Create backup** option should be set to **off**.      c. After installation starts, a new **fix record** is created, and the installation begins.      ![](./lab1-media/media/v51-005.png)      d. The installation can take 5 or 6 minutes to complete. Wait until you see the status change to **Installation complete**.      ![](./lab1-media/media/image92.png)       &gt; **TROUBLESHOOTING TIP**     &gt;      &gt; If the installation fails, click the **ID** of the action and view the `runbook.log` output file.      &gt;     &gt;  Common errors that are reported in the log are the `ssh key` and the `wsa-ansible secret not properly configured in the environment`.       &gt;     &gt; ![](./lab1-media/media/image93.png)     &gt;     &gt; ![](./lab1-media/media/image97.png)   **Congratulations!** You successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server.   In the next section of the lab, you review the updated security posture and fix history of the WebSphere server.      ### 4.6 View the security posture and Fix History of your WebSphere servers  ### 4.6.1 Fix history  Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations team fixes vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.  Therefore, it is vital to document the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days that servers were exposed.  A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities are detected, when and how they are fixed, and how many days that servers are exposed.  In this section, you review the security posture and fix history of the two traditional WebSphere servers that are used in the lab to demonstrate how WebSphere Automation manages the details, so you can handle your patching SLAs with ease.  Since you applied the PH42762 iFix, now you can examine the updated security posture of the 9057 WebSphere Application Server.  1.  View the **tWAS_9057_server** CVE Information.      a. From the **Security** view in the WebSphere Automation dashboard, click the **tWAS_9057_server** link located under the **Server** column.      ![](./lab1-media/media/imagev3-44.png)      b.  Select the **Information** tab.      ![](./lab1-media/media/imagev3-45.png)      c.  From the **Information** view, you can see the list of Installed iFixes for the 9057 server.      ![](./lab1-media/media/imagev3-46.png)      &gt; Notice that the **Fixed date** for the iFixes that are related to the Log4J vulnerability shows that they were installed moments ago.     &gt;      &gt; However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.      |                                                |                                                                                                                                                                                                                                                                                                                           |     | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |     | ![sign-info](./lab1-media/media/image4.png) | IBM WebSphere Automation reports ALL iFixes that were applied, regardless of when they were applied. However. It can only determine fix dates, number of days that the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere Application Server is registered with IBM WebSphere Automation. |  2.  View the **tWAS_9057_server** CVE Vulnerabilities details.      a.  From the **tWS_9057_server** view, select the **Vulnerabilities** tab.      ![](./lab1-media/media/imagev3-47.png)      b. From the list of CVEs, sort by **Status**, and display the **Resolved CVEs** on top.      ![](./lab1-media/media/imagev3-48.png)      The CVEs that are listed as **Resolved** are related to Log4J CVEs that were fixed by applying the iFix earlier; **CVE-2021-44228** being the most critical CVE listed.      As illustrated above, the **Vulnerabilities view** provides the details about when the vulnerability was detected in this specific server, and how many days the server was exposed to each vulnerability.  3.  View the **tWAS_9057_server** Fix History details.      a.  From the **tWS_9057_server** view, select the **Vulnerabilities** tab.      b. Select **Fix History**, as illustrated below:      ![](./lab1-media/media/imagev3-49.png)  4.  Notice the Fixes that were applied.      ![](./lab1-media/media/imagev3-50.png)      &gt;**Fix history** shows changes to the server. You can see the action that was taken, and in this case, the Fixes were **Installed**. Next to each Fix you can view the CVEs that were resolved by that Fix, and more importantly, the date that the Fix was applied that resolved specific vulnerabilities.  5.  You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers.      a.  Return to the **Security** view. Then, select the **CVEs** category.      ![](./lab1-media/media/imagev3-51.png)      &gt; Using this view, you can easily determine which servers are affected by specific CVEs.     &gt;       &gt; As an example, focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.     &gt;      &gt; This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.      b. View the **CVE-2021-44228** CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE.       ![](./lab1-media/media/imagev3-52.png)       In this section you learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to respond to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).      You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI.       You learned how to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.   **Congratulations!**  You completed the proactive CVE management lab for traditional WebSphere Application Servers.         Click to expand: Section 5 - Detect and trigger investigation of Application Memory Leak with IBM WebSphere Automation  ## 5.0 Detect and Address Application Memory Leak with IBM WebSphere Automation and Instana  In this lab, you are going to use a traditional WebSphere Application Server and a Liberty Server registered with WSA and monitored by Instana to drive a memory leak investigation.  ![Diagram Description automatically generated](./lab2-media/media/image2.png)  You are going to use a sample application and a script which is going to continuously add objects to the heap to create a memory leak event. Instana will detect such event and will initiate a communication with WSA to inform that a leak has been detected. Once that is done, WSA will open an investigation and begin gathering the necessary problem diagnostic information for that server. You can see the investigation is opened and the process which it goes through. These processes include:    - Memory leak detected    - Identifying server    - Collecting heap dump    - Analyzing heap dump    - Investigation complete  In the end of the investigation, WSA provides an analysis summary which indicates the likely potential root cause of the memory leak. In this case it is a vector inside the sample application which is being hosted by the servlet wrapper. WSA also allow you to simply download all the files that you need with your application development team or application vendor so that they could take the action to fix the application.  At the end of this lab, you will learn how WSA can automatically:    - detect memory leaks before they cause a crash    - gather problem determination (PD) information while the leak is in     progress    - analyze the PD info and produce a report which can be exported and     share with app development teams or app vendors.     ### 5.1 Installing and starting Instana agent  In this section, you install an Instana agent to the **STUDENT** workstation and start it.  In this lab, you wil install a Linux agent in the `student` VM, where the WebSphere Application Server used in this lab is installed.    Using the Instana UI, you can select options for installing the agent, such as the `agent mode`, `agent runtime`, and `installation mode`. Doing so, produces a curl command that you run from a Terminal window, to install the Linux agent.   In this lab, we have provided a simple Linux shell script that installs the Linux agent and configures a `WebSphere` infrastructure zone for monitoring WebSphere Application Server.   1.  Install the Instana Linux agent on the Student VM      a.  Open a new Terminal window.      b. Run the following script to install the instana agent          cd /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange          ./klp-install-instana-agent.sh      ![](./lab2-media/media/4310-install-instana-agant.png)       The Instana agent is installed in **/opt/instana/agent** directory.      The script also defined an Instana Infrastructure Zone for WebSphere by enabling the Instana `Hardware &amp; Zone plugin settings` as illustrated below:        ![Graphical user interface, text Description automatically  generated](./lab2-media/media/image24.png)      &gt; For reference purposes only, Instana's configuration file is located here: `/opt/instana/agent/etc/instana/configuration.yaml`       Lastly, the script restarted the Instana agent with the updated configuration.        ![](./lab2-media/media/4310-restarted-instana.png)   2. Login to the Instana UI      a.  From the web browser, open a new window and click the `Instana     bookmark` to access Instana page.      ![Graphical user interface, application, Word Description  automatically generated](./lab2-media/media/image21.png)       The login credentials are:       &gt; E-Mail: **admin@instana.local**       &gt; Password: **qJgN6hS6sE**  3.  Verify the Instana agent installation      &gt; Note: after the agent is started, it might take a few minutes for the agent to sync with Instana server.      a. Go back to `Instana administrative console` in the web browser,       b. Click on the `Infrastructure` icon on the left navigation bar.       You will see the `WebSphere` infrastructure zone that was configured when you installed the Instana agent using the Linux script.        ![](./lab2-media/media/4310-infrastructure-zone.png)      c. Click `Time Rage` dropdown button, select `Last 5 minutes` and click `Live`.      ![A screenshot of a computer Description automatically generated with medium confidence](./lab2-media/media/image28.png)      After a few minutes, you see that the infrastructure zone you defined is displayed.      ![A picture containing shape Description automatically  generated](./lab2-media/media/image29.png)      The Istana agent is now set to monitor the changes in 5 minutes interval, the agent installation is now completed.   ### 5.2 Configure WebSphere Automation integration with Instana and WebSphere Servers  WebSphere Automation (WSA) communicates with Instana to receive real-time Instana alerts.   WSA also accesses the VMs where registered WebSphere servers are hosted to collect problem diagnostic information.   To do so, a secure ssh connection must be configured between the Instana server and the VM hosting WebSphere Application Servers.   In this lab, you will run a simple Linux shell script that configures and validates the secure SSH connection,  1. Configure the secure ssh connection between Instana server and the Linux Student VM      a. Return to the Terminal window in the Student VM.      b. Run the following script that configures the secure ssh connection and restarts the Instana server.          cd /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange          ./klp-instana-setup.sh        c. Ensure the script completed with the `TEST PASSED` message.       When the script completes the ssh configuration, it tests the secure connection. If the connection is properly configured, the `TEST PASSED` message is displayed.       If the test passes, you can continue with the lab.      ![](./lab2-media/media/4310-setup-instana-ssh.png)   ### 5.3 Configure Instana for memory leak alert  This section describes the steps to configure Instana for the memory leak alert to be used by WebSphere Automation (WSA).    You will use the Instana administrative console UI to complete the following activities.  The actives include:     - create a custom payload   - create an alert channel   - create a custom event   - create an alert      1.  Create a custom payload.      Adding a custom payload to your alert notifications enables you to use Instana alerts more efficiently.      You can create a custom payload by using the Instana administrative console or using the Instana API, in the lab, you are using the Instana administrative console.      a. From the Instana page, go to **`Settings &gt; Team Settings`**\u00a0page,     under\u00a0**`Events &amp; Alerts`**. Then click\u00a0**`Custom Payload`**.      ![Graphical user interface, text, application, chat or text message  Description automatically generated](./lab2-media/media/image32.png)      b. In the\u00a0**`Key`**\u00a0field, type\u00a0**`PID`**, do not use any other value for the key. Set the\u00a0**`Value type`**\u00a0to\u00a0**`Dynamic`**. In     the\u00a0**`Value`**\u00a0field, click\u00a0**`Select Tag`**\u00a0and select\u00a0**`Internal -     Process ID`**, then click\u00a0**`Save`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image33.png)  2.  Gather the WSA information required to set up the Alert Channel.      a. From the Terminal window, run the following **oc** commands to         get the **Webhook URL**\u00a0for WebSphere Automation\u00a0installation.          oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443          oc project websphere-automation          oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak      Your outputs look like this       <p>[ibmuser@student ~]$ oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443</p> <p>Login successful.</p> <p>You have access to 66 projects, the list has been suppressed. You can list all projects with 'oc projects'</p> <p>Using project \"websphere-automation\".</p> <p>[ibmuser@student ~]$ oc project websphere-automation</p> <p>Already on project \"websphere-automation\" on server \"https://api.demo.ibmdte.net:6443\".</p> <p>[ibmuser@student ~]$ oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak</p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak</p>       The WebSphere Automation Webhook URL is: **https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak**, you will use it later.      b. Run the following oc command to get the token\u00a0for WebSphere     Automation\u00a0installation.          oc serviceaccounts get-token wsa-health-webhooks-apis-sa      The output is shown below, you will use the token value later, when you create the alert channel.        <p>[ibmuser@student ~]$ oc serviceaccounts get-token wsa-health-webhooks-apis-sa</p> <p>eyJhbGciOiJSUzI1NiIsImtpZCI6InJ1YTJ4VU1JdnRkemdlcFM1M0habGtTcXVuM1hlZlBrY19UUl82QWRWc0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3ZWJzcGhlcmUtYXV0b21hdGlvbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ3c2EtaGVhbHRoLXdlYmhvb2tzLWFwaXMtc2EtdG9rZW4tc3R3bW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NhLWhlYWx0aC13ZWJob29rcy1hcGlzLXNhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzcxNjBjZmYtMTUwNy00MWYyLWFlODgtYjg5MjcxZjJlNzlmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OndlYnNwaGVyZS1hdXRvbWF0aW9uOndzYS1oZWFsdGgtd2ViaG9va3MtYXBpcy1zYSJ9.TVQfRO6E2ZTa4BBSvVgiv-74gbhEG-BVOBu0WaUFG_FBRJsplT6qr_trcsrvyNL9BVrF3kGd4oCqCos8HQGoIO0wEt7DsyePEbIRwL_vn8Jyr_qBr7cHrbWhu4y6EMWCObDWQdZRUsJqtgSLxtTzYqSf6upo_uQczjD5waWLX3gZbeeh5GcyNctFaQPpp_neM6HY-gZJxCSm8o7XmNB1Zcxg-F6ehhdf-0uXDXGYuBKsouWpBatERwBoVL3JgWQTPDUeIJApH9EOlO9LDieb8gaJDbWVB4b1ZsIWdlJg_F5pbWbapRuM8aAlf0HOxCaV84zTifK7J5R2NBf9xxeqrCqMpeSxfR5_Heh9WIl1lviKVn3qeS6aktj6duyu_5lpHw6RQjArcUk5NCxfe7hGS64BaISEbNdfrcYTNqEKeiNmydEuX7PpJaJxHBkmYYbWnZ0BrMaqQ1kUlTcvACs5FsNmbBQ3MOt3hin8dDqC9A1mFA_KlD1Oa1suhuY0DB_8tGwhKsIxFxY9pbKXhmqRl__7oueFxuFxxfvPWanL0WzRsoTJShyhcO6K3oyZPJWC4Cr2I42qo_g_Lth7gBIYRdzFJ63xpNgGUDStTXXcMkfMnm8v-lo5qzsezdgYBb6l152zcS6dA7Ld3502zIpnMx6ZGQadDL8uOSZbK-2CRU0</p>   3.  Create an alert channel.      To create an alert channel by using the Instana administrative  console,      a.  On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**, click\u00a0**`Alert Channels`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image34.png)      b. Click\u00a0**`Add Alert Channel`**\u00a0and select\u00a0**`Generic Webhook`**.      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image35.png)      c. On the\u00a0Create Generic **Webhook Alert Channel**\u00a0page, enter the name as `WebSphere Automation Healing Webhook` in the\u00a0**`Name`**\u00a0field      d. Enter the\u00a0**`Webhook URL`**\u00a0you have for\u00a0WebSphere     Automation\u00a0installation.          https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak      ![Graphical user interface, text, application, email, Teams  Description automatically generated](./lab2-media/media/image36.png)      e. Under\u00a0**`Custom HTTP Request Headers`**, click\u00a0**`Add Header`**.      ![Graphical user interface, text, application, email, website Description automatically generated](./lab2-media/media/image37.png)      f. Create the following two `request headers`. Then click **`Test Channel`**.       Key Value Content-Type application/json Authorization Token value you get with the oc command in previous step         ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image38.png)       g. Be sure you clicked **`Test Channel`** to test the channel before you proceed.       You should see the message showing the channel was successfully triggered.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image39.png)  4.  After verifying the channel, click **`Create`** to create it.      The alert channel is created.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image40.png)  5.  Create a `custom event`      A Custom Event enables you to create issues or incidents based on an individual metric of any given entity.      To create a custom event by using the Instana administrative console:      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Events`**, then click **`New Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image41.png)      b. Create a custom event named \u201c**`Memory Usage High`**\u201d. Set its parameters as shown below.       **Note:** Refer to screenshot below!      `1. Event Details`       - Name: Memory Usage High       - Description: Memory usage over 80%       - Issue Severity: Warning       - Grace Period: 90 s      `2. Condition`       - Source: Built-in metrics       - Entity type: JVM       - Metric: Memory &gt; Used percentage       - Time window: 10 s       - Aggregation: max       - Operator: &gt;=       - Percentage: 80      `3. Scope`       -  Apply on (required): All available entities       ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image42.png)      c. Click **`Create`** to create the new custom event.  1.  Create an `alert`.      An Alert is raised when an event has triggered, such as high memory usage over 80% for some period.       To create an alert by using the Instana administrative console,      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Alerts`**, then click **`New Alert`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image43.png)      b. In the\u00a0**`Name`**\u00a0field, type a name for the alert as: **`WebSphere Automation Healing Memory Leak`**.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image44.png)      c. In the\u00a0**`Events`**\u00a0menu, select\u00a0**`Alert on Event(s)`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image45.png)      d. In the\u00a0**`Events`**\u00a0section, click\u00a0**`Add Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image46.png)      e. In the\u00a0`Add Events\u00a0window`, enter **`memory usage h`** in the search box and select\u00a0**`Memory Usage High`**. You can filter the list by using a keyword (for example,\u00a0leak) to help find the entry in the list.      Click\u00a0**`Add 1 Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image47.png)      f. Add two more events: **`Garbage collection activity high** (for JVM)` and **`Memory leak** (for JVM)`.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image48.png)      The event list updated:      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image49.png)      g.  In the\u00a0**`Scope`**\u00a0menu, select **`All available entities`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image50.png)      h.  Under\u00a0**`Alerting`**, click\u00a0**`Add Alert Channel`**, select the alert channel that you created previously. Then click\u00a0**`Add 1 Channel`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image51.png)      ![Graphical user interface, application Description automatically&gt; generated](./lab2-media/media/image52.png)      i. Click\u00a0**`Create`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image53.png)      The alert is created.       ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image54.png)    **Now the Instana configuration for memory leak alert is completed**    ### 5.4 WebSphere memory leak check with WebSphere Automation  In this section, you run a script to create memory leak incident for an application running in a WebSphere Application server instance which is already registered in WebSphere Automation. When WebSphere Automation detects the memory leak, it automatically conducts the analysis to identify the root cause.  1.  Run the following Linux shell script to install a memory leak application in WebSphere Application Server and restart the WebSphere application server.       a. From the Terminal window,     run the command below to install the memory leak app and restart the WebSphere application server:          cd /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange           ./klp-tWAS_configure_MLApp.sh   1.  Login to WebSphere Automation, if you are not already logged in.       a.  Open a Firefox web browser      ![Graphical user interface Description automatically  generated](./lab2-media/media/image9.png)      b.  Click WebSphere Automation bookmark      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image10.png)      c.  Click OpenShift authentication      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image11.png)      d.  Click **htpasswd.**      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image12.png)      e.  Enter Username and Password as: **ibmadmin** / **engageibm** and click **Log in**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image13.png)   3.  In the WebSphere Automation UI, click on the **`Health`** icon.      The `Health` section is where you view and analyze server health problems.       ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image55.png)      Since all the application are working fine at this time, you do not see anything in the Health page yet.      ![Graphical user interface, text, application Description   automatically generated](./lab2-media/media/image56.png)  4.  In this lab, you can also monitor the WebSphere application server     memory change in Instana.      a. In **Instana administration console**, click **`Infrastructure`** icon, click         **`Comparison Table`**, select **`JVMs`** from the dropdown, and click **`bootstrap WAS90.SERV1.`**      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image57.png)      As you can see, currently there is not any issue with the WAS server.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image58.png)  5. Set the `Time Range` to `Last 5 minutes` and click `Live` to see the current state      ![](./lab2-media/media/4310-set-live-5min.png)   6.  From the Terminal window, run the provided script which will run a sample memory leak application in WebSphere. Instana will immediately show the significant increase in JVM heap usage, which will create an application memory leak event.          /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange/klp-curl_MLAPP_add_was.sh      The script output is showing like this:       <p>[ibmuser@student ~]$ /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange/klp-curl_MLApp_add_was.sh</p> <p>Increased heap usage by 25MB</p> <p>Increased heap usage by 50MB</p> <p>Increased heap usage by 75MB</p> <p>Increased heap usage by 100MB</p> <p>Increased heap usage by 125MB</p> <p>Increased heap usage by 150MB</p> <p>Increased heap usage by 175MB</p> <p>Increased heap usage by 200MB</p> <p>Increased heap usage by 225MB</p> <p>Increased heap usage by 250MB</p> <p>Increased heap usage by 275MB</p> <p>Increased heap usage by 300MB</p> <p>Increased heap usage by 325MB</p>   7.  In the Instana page, you can see that the memory is increasing steadily, and one issue is detected.      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image59.png)  8.  Go back to the WebSphere Automation UI. You see that WebSphere Automation has received the Memory leak alert and activate its investigation on the issue.       Initially you might see the Server `Not identified yet` status and soon you see the server name is identified.       ![Graphical user interface, application Description automatically generated](./lab2-media/media/image60.png)      a. Click the **`Investigating`** link to view its details.      ![Graphical user interface, text Description automaticallygenerated](./lab2-media/media/image61.png)  9.  The Investigating section lists the problem, status, Server, Host     and Cell information, why the investigation is started and the     investigation history.       a. Click the **View history** dropdown to see current investigation activities      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image62.png)      The WSA memory leak investigation activities include:      - Memory leak detected     - Identifying server     - Collecting heap dump     - Analyzing heap dump     - Investigation complete      The screenshot below shows that the investigation is in process.      ![Graphical user interface, application Description automaticallygenerated](./lab2-media/media/image63.png)  10. If you check your email, you should have received a WSA notification like the following for the issue.      ![Graphical user interface, text, application, email Description automatically generated](./lab2-media/media/image64.png)  11. After a few minutes, the WebSphere Automation investigation is completed. You can see the analysis summary which points to the root cause of the issue.      You can also click **`Download all files`** to get the analysis     reports, heap dumps and WebSphere Automation runbooks on your workstation.      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image65.png)      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image66.png)      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image67.png)      ![Graphical user interface, text, application, email Description automatically generated](./lab2-media/media/image68.png)  12. Now WSA has successfully detected and analyzed WAS memory leak     issue, it has sent you another email to confirm that.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image69.png)  13. you can run a script to reduce the heap usage and then stop the WAS     server with the commands:          /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange/klp-curl_MLAPP_removeLast.sh          /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%282%29/#summary","title":"Summary","text":"<p>Congratulations! You have completed the WebSphere Automation Memory Leak Detection lab.</p> <p>With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.</p> <p>IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.</p> <p>IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.</p> <p>To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#websphere-proactive-cve-protection-and-memory-leak-remediation-observed-by-instana","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":"<p>Duration: 90 mins</p> <p>Need support? </p> <ul> <li> <p>Kevin Postreich - kevinlp@us.ibm.com</p> </li> <li> <p>Yi Tang - yitang@us.ibm.com</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#introduction-to-ibm-websphere-automation","title":"Introduction to IBM WebSphere Automation","text":"<p>IBM WebSphere Automation focuses on delivering value to existing WebSphere Application Server (WAS) environments by helping administrators reduce the cost, effort and risk of addressing common vulnerabilities, automating tasks and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>In conversations with customers, the same three concerns repeatedly come up. Organizations must keep their IT estate secure, compliant amd resilient to disruption, they must keep it running optimally, and they must reduce costs and maximize ROI.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. It provides the following benefits:</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhanced remediation capabilities with insights and recommendations improve the speed and depth of understanding outages and anomalies as they occur.</p> </li> <li> <p>Augmented operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>With WebSphere Automation, security, business efficiency and resilience become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, while laying a solid automation foundation to support future growth.</p> <p>IBM WebSphere Automation is a stand-alone product that runs on Red Hat OpenShift. Entitlement to Red Hat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>You can deploy it virtually anywhere through containers that are supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that is designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#10-set-up-ibm-websphere-automation-in-the-lab-environment","title":"1.0 Set up IBM WebSphere Automation in the lab environment","text":"<ol> <li> <p>Log in to the Student VM. You see the Desktop, which contains all the programs that you use (browsers, terminal) in this session.</p> <p>The login credentials for the STUDENT image are:</p> <p>User ID: ibmuser</p> <p>Password: engageibm</p> </li> </ol> <p></p> <ol> <li> <p>Clone the GitHub repo to download the lab artifacts and Linux shell scripts that are used in the lab. Then, set execute permissions for the scripts. </p> <p>a. Open a Terminal window on the VM, and ensure that you are in the home directory of the user, ibmuser:</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the Terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> <p>c.  Navigate to the cloned repo directory for this lab:</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> <p>d. Add execute permission to the shell scripts:</p> <pre><code>chmod 755 *.sh\n</code></pre> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#11-overview-configuring-websphere-automation","title":"1.1 Overview - Configuring WebSphere Automation","text":"<p>The Fix Deployment capability of WebSphere Automation delivers determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation.  </p> <p>You run a Linux shell script, which automates the setup process. The script performs the following tasks:</p> <ul> <li>Create the <code>ssh key</code></li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the <code>wsa-ansible</code> secret that contains the key</li> <li>Create the <code>known_hosts</code> file</li> <li>Create the <code>wsa-secure-fixcentral-creds</code> secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <p>First, you must verify that IBM WebSphere Automation is in the \"Ready\" state. </p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#12-ensure-websphere-automation-is-ready-for-use","title":"1.2 Ensure WebSphere Automation is \"Ready\" for use","text":"<ol> <li> <p>Log in to Red Hat OpenShift CLI:</p> <p>a. Open a new Terminal window in the VM.</p> <p>b. Type <code>oc login -u ibmadmin -p engageibm</code> to log in to Red Hat OpenShift. </p> <p>Use the following credentials to log in: </p> <p>username: ibmadmin</p> <p>password: engageibm</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure that you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation ready in your environment. </p> </li> </ol> <p>Note: The output must indicate that the WSA resource READY state is True before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#13-use-the-provided-shell-script-to-setup-websphere-automation","title":"1.3 Use the provided shell script to setup WebSphere Automation","text":"<p>In this section, you run a shell script that performs the setup steps noted above, which are required to use the Fix Deployment features in IBM WebSphere Automation. </p> <ol> <li> <p>Ensure you are in directory where the shell scripts are located. </p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> </li> <li> <p>Type <code>sudo yum install sshpass</code> to install the sshpass tool. This allows commands in the script to be executed without having to enter passwords. When prompted, enter <code>y</code> to complete the installation.</p> </li> <li> <p>Run the shell script to configure WebSphere Automation:</p> <pre><code>./wsa-setup.sh\n</code></pre> <p>The script runs without any user interaction.  </p> </li> <li> <p>When the script completes, verify that the test-connection Ansible playbook ran successfully, as illustrated in the console output. </p> <p>You should see the message TEST PASSED, which indicates that WebSphere automation is properly configured. </p> <p></p> <p></p> <p>What if the script FAILS?</p> <p>If the script completed with \"TEST FAILED\", contact the lab instructor. </p> <p>Then, RE-RUN the script again. </p> <p>Note: you can also run the <code>oc logs --tail</code> command that is shown in the console output, which displays the entire log output from the ansible playbook. That log might provide additional insights into the error. </p> </li> </ol> <p>You have now completed the WebSphere Automation setup procedures</p> <p>If the <code>wsa-setup.sh</code> script completed with TEST_PASSED, you can proceed with the lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#20-accessing-the-websphere-automation-ui","title":"2.0 Accessing the WebSphere Automation UI","text":"<p>A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers. </p> <p>For this lab, WebSphere Automation is pre-installed on an OpenShift cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.</p> <ol> <li> <p>On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/zen/#/homepage</p> <p></p> <p></p> </li> <li> <p>On the login page, select the OpenShift authentication as the authentication type.</p> <p>Note: Enlarge the browser window until you see the graphics, as illustrated below. </p> <p></p> <p>Note: If necessary, accept all the browser security warnings and certificates. In Firefox, click Advanced, and then scroll down and click Accept the risk and continue. </p> <p></p> </li> <li> <p>Select htpasswd as the login selection</p> <p></p> <p></p> </li> <li> <p>Enter ibmadmin as username and engageibm as password. And click Log In.</p> <p></p> <p></p> <p>If a Welcome pop-up window appears, click the upper right corner of the pop-up window to dismiss it. You should see IBM Automation in the upper left corner of the page. If instead, you see the \"IBM Cloudpak | Administration\" page, go to the IBM Automation page by using these steps:  </p> <p></p> <p>a. In the upper right corner, click on the cloudpak switcher icon</p> <p></p> <p>b. Select IBM Automation (WebSphere Automation) from the menu</p> <p></p> </li> <li> <p>At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>View the Application Runtimes that are registered with IBM Automation.</p> <p>a. Click the menu icon in the upper left corner of the page.</p> <p></p> <p>b. Click Operate, and then select Application runtimes.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that are registered with IBM Automation.</p> <p></p> <p></p> </li> <li> <p>The Application runtimes \u2013 Security page appears. There is no data displayed because no WebSphere or Liberty servers are registered yet.</p> IMPORTANT:  If any of the labels on the page do nt display properly, refresh the browser window by using the web browser refresh icon.   For example: The label for the Fix management tab might display as !Fix management! the first time. Refreshing the browser window results in the labels displaying correctly.   Note: This is only a one-time action. <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#21-receiving-security-event-notifications-via-email","title":"2.1 Receiving security &amp; event notifications via email","text":"<p>Before you register WebSphere servers with WebSphere Automation, you can configure email addresses to receive notifications when: </p> <ul> <li>New vulnerabilities are discovered in WebSphere servers that are registered with IBM WebSphere Automation</li> <li>iFixes or Fixpacks are installed or uninstalled</li> <li>Instana observability detects memory issues and WebSphere Automation triggers a diagnosis of the event</li> </ul> <ol> <li> <p>Add your email address as a receiver of event notifications.</p> <p>a. Select the Notifications menu item from the navigation list.</p> <p>b. Click the Email addresses tab to add the email address where notifications of new CVEs are delivered.</p> <p></p> <p></p> </li> <li> <p>The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications.</p> <p>a. Click Add.</p> <p>b. Enter your email address.</p> <p>c. Click Save.</p> <p></p> </li> </ol> <p>Great! Your email is configured to receive event notifications.</p> <p>In the next section, you register servers to WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#30-register-websphere-application-server-with-ibm-websphere-automation","title":"3.0 Register WebSphere Application Server with IBM WebSphere Automation","text":"<p>In this section, you run a Linux shell script to automatically register a WebSphere Application Server to IBM WebSphere Automation. </p> <p>The Linux shell script obtains the necessary information as described below. Then, the script runs a <code>wsadmin</code> script to register the WebSphere Application Server.  </p> <p>WebSphere Application Servers and WebSphere Liberty servers are added to WebSphere Automation by registering them with the usage metering service.</p> <p>To register your application servers with the usage metering service, it requires the following usage metering details. The script you  run gathers this information. </p> <ul> <li> <p>URL: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.</p> </li> <li> <p>API Key: The token that is used to authenticate the WebSphere Application Server and Liberty servers during the registration process.</p> </li> <li> <p>Usage metering certificate: The certificate that contains the public key. This key allows a WebSphere Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.</p> </li> </ul> <p>In this section, you run the <code>register-was-server.sh</code> script to register a WebSphere Application Server, version 9.0.5.7. </p> <ol> <li> <p>Minimize the browser window and open a new terminal window.</p> <p></p> </li> <li> <p>Run the <code>register-was-server.sh</code> script to register the WebSphere server with IBM WebSphere Automation</p> <p>a. Change directory to the location of the script:</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> <p>b. Run the script, passing in the parameter <code>9057</code> to register the WebSphere version 9.0.5.7 server in this lab environment. </p> <pre><code>./register-was-server.sh 9057\n</code></pre> <p></p> <p>Once the script completes, you see the message indicating that the WebSphere server was successfully registered. </p> </li> </ol> <p></p> <p>At this point, the newly registered server is automatically added to the WebSphere Automation dashboard in the UI. </p> <ol> <li> <p>View the newly registered WebSphere server in WebSphere Automation Dashboard</p> <p>a. Open the browser and go to the tab where the WebSphere Automation dashboard is displayed. </p> <p>Note: the URL is: https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/security</p> <p>c. Go to the WebSphere Automation Security -&gt; Servers dashboard, and confirm that the tWAS v9.0.5.7 server is registered in IBM Automation.</p> <p>Note: It might take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI.</p> <p></p> </li> <li> <p>Check your email. A mail notification is sent that shows new vulnerabilities for the registered application server.</p> <p></p> Information: In the email message, there is a link that redirects to the console to show more details about the vulnerability. However, due to network restrictions in the lab environment, this link does not work. <p></p> </li> </ol> Click to expand: Section 4 - Proactive CVE protection for WebSphere with IBM WebSphere Automation  ## 4.0 Proactive CVE protection for WebSphere Application Server    ### 4.1 Business Context for this scenario  You are a WebSphere Administrator, part of a WebSphere Operations Team that is responsible for maintaining security compliance of the WebSphere estate in the enterprise.   A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is often a very manual and time consuming process.    ![](./lab1-media/media/image2.png)   This is where **IBM WebSphere Automation** can help\\!  With WebSphere Automation, you have:    - **Management dashboard:** A Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).    - **Automated vulnerability tracking:** Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.    - **Contextual notifications:** Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.    - **Shared, live visibility to key stakeholders:** WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.    - **Fix History:** A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues    - **Automated fix installation of Fixpaks and iFixes** to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard.   In this section, you use the IBM WebSphere Automation to demonstrate its powerful capabilities for proactive CVP protection for WebSphere.    ![](./lab1-media/media/image3.png)    ### 4.2 How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture   WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation.   The WebSphere Automation *vulnerability manager* makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers by using the WebSphere Automation UI.  When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation *CVE/PSIRT monitor* detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.  After defining an exposure mitigation plan, administrators can then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.      ### 4.3 Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities  You can view the security vulnerability status of each server in your inventory from the **Security** page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.  You can track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.  In this section of the lab, you do the following tasks:     - **Resolve known vulnerabilities in the WebSphere traditional application server**, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix that is documented in the security bulletin for this vulnerability.     - **Review the security posture and fix history of the WebSphere application server.**   After applying iFixes or Fixpaks, IBM Automation immediately updates the security information for that application server to show that the critical vulnerabilities are patched.        1.  In the browser, go to the **Security -&gt; Servers** dashboard in WebSphere Automation.      ![dashboard tWAS1](./lab1-media/media/image28.png)      You see that this server Risk Level is **10.0**, with **(+## more)** unresolved CVEs.       &gt;**Note:** Near the top of that list is the LOG4J vulnerability, known as CVE-2021-44228, with a critical score of **10**.          |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=50,50)   | TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered might be different than what is shown in the screen capture.        2.  If you have not already done so, check your email. A mail notification was sent showing new vulnerabilities for the registered application server.      ![](./lab1-media/media/image29.png)      |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=100,100)   | Information: In the email message, there is a link that redirects to the console to show more details on the vulnerability. However, due to network restrictions in the lab environment, this link does not work.          ### 4.4 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability  In this section, you review the details of the critical (10.0) **CVE-2021-44228** CVE and determine the appropriate remediation options to resolve the CVE.  You apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in **CVE-2021-44228**.  1.  Notice in the IBM Automation console that **tWAS 9.0.5.7** is vulnerable to **CVE-2021-44228**.      ![](./lab1-media/media/imagev3-32.png)  2.  Click **(+ \\ more)** to expand the list of unresolved CVEs.       IBM Automation also detects additional unresolved CVEs that are related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin.      ![](./lab1-media/media/imagev3-33.png)      As noted in the IBM security bulletin, which you explore next, there are three CVEs related to the LOG4J vulnerability. A subset is highlighted below in the list of Unresolved CVEs for this WebSphere Application Server.      ![](./lab1-media/media/imagev3-34.png)  3.  After viewing the complete list of unresolved CVEs for the 9057 server, close the **Unresolved CVEs** view.  4.  View the security bulletins for the **CVE-2021-44228** Log4J vulnerability.       a.  Click **CVE-2021-44228** link under the 9057 servers **Unresolved CVEs** column.      ![](./lab1-media/media/imagev3-35.png)      From the CVE Information page that is displayed, you can see important details about this CVE.      Here you can see the following details:      - Risk Level **Critical (10)**      - Date the vulnerability was detected in the \u201c**registered**\u201d server      - Number of days the 9057 WebSphere server was **exposed** to the vulnerability      - List of affected servers that are registered with IBM WebSphere Automation      - Link to the IBM security bulletin for the CVE      &gt; **Note:** The **Days Exposed** and **date detected** are expressed from the point of time that the server is registered with IBM WebSphere Automation.      b.  Click the **View** Link to view the IBM security bulletin for this CVE.      ![](./lab1-media/media/imagev3-36.png)      c.  The security bulletin is displayed in a new browser tab.      d.  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.      ![](./lab1-media/media/imagev3-37.png)      As you can see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips.      &gt; **Note:** The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046).      ![](./lab1-media/media/image32.png)      You can read the security bulletins from the **ibm.com/support** pages. You are prompted to log in by using your IBM ID to access the content:          5.  Return to the browser tab that contains the IBM WebSphere Automation dashboard. Then, return to the **Security** view.       ![](./lab1-media/media/imagev3-39.png)    ### 4.5 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability  Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced in IBM WebSphere Automation in version 1.4.  You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the **Modify WebSphere inventory** permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.  In this section, you leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as **CVE-2021-44228**.  There are a couple of additional components now included in the product to support this use case:    - **Fix manager**      The WebSphere Automation *fix manager* uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the `websphereSecure` custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.    - **Installation manager**      The WebSphere Automation *installation manager* communicates with the registered server by using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.  ### 4.5.1 Navigate to the Server and unresolved CVE to fix  Apply the recommended iFix to resolve the CVE-2021-44228 vulnerability.  1.  Notice in the IBM Automation console that **tWAS 9.0.5.7** is vulnerable to **CVE-2021-44228**.      ![CVE 2021 44228](./lab1-media/media/image30.png)       **Note:** The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046)       ![security bulletin info](./lab1-media/media/image32.png)       You fix it by applying the recommended iFix (PH42728).        2. Click **tWAS_9057_server** to view the list of CVEs and vulnerabilities.       ![](./lab1-media/media/image83.png)       The list displays both *resolved* and *unresolved* CVEs for the selected server. It also shows the **Risk Level** to identify the severity of the vulnerabilities, and the number of days the server was exposed to the vulnerability.       ![](./lab1-media/media/image84-a.png)  3. Click **CVE-2021-44228** to view the CVE information and affected servers.      ![](./lab1-media/media/image84.png)      On the CVE Information page for CVE-2021-44228, a list of **Affected Servers** is displayed along with the option to **Prepare fix**.       &gt;**DO NOT prepare fix yet.** You do that in the following steps.       ![](./lab1-media/media/image85.png)   ### 4.5.2 Prepare Fix   The *Fix Deployment* capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes.   Selection of the wanted iFix or published fix pack is exposed through the **Prepare fix** dialog, which can be found in the CVE details view. Select the target server to patch and the dialog shows all affected servers that are known to WebSphere Automation, and lets you select the desired fix.  After you select the fix, WebSphere Automation provides two options:     - **Fetch fix:**       If installation is deferred to a later time, then the **Fetch fix** option causes the fix to be downloaded and stored for later use.       This might be a preferred option for fix packs because they are significantly larger than interim fixes, especially for traditional WebSphere fix packs.    - **Fetch then install fix:**       This option automatically downloads the fix and then installs it after the download is complete.       Fetched fixes are stored within WebSphere Automation for immediate reuse.               &gt; Now you can download and install the recommended iFix for the CVE into the tWAS_9057_server.    1. Download the recommended iFix to resolve the CVE.      Next to each affected server, there is a link to **Prepare Fix**.       a. Click the **Prepare fix** link next to **tWAS_9057_server** for **CVE-2021-44228**.      ![](./lab1-media/media/image86.png)      b. From the **Select fix** page, select the **PH42728** iFix. Then, click **Fetch fix**.        |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image47.png?cropResize=50,50)   | IMPORTANT:  If the **PH42728** iFix is not listed under the **resolution** column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. WebSphere Automation only loads the meta-data for the unresolved CVEs of the registered servers.   WebSphere Automation does this by using a background process that spins up several threads. Because there are more unresolved CVEs than the number of threads loading the meta-data, it takes WebSphere Automation a couple of iterations to load all of the meta-data for the fixes.    Typically, the process completes within 8-10 minutes after the server is registered.  WebSphere Automation continues to load fix meta-data as new unresolved CVEs are detected for registered servers.      ![](./lab1-media/media/image87.png)       This action causes WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab.       The **Status** field automatically updates as the action progresses.       ![](./lab1-media/media/image88.png)      When the fix is successfully fetched from IBM Fix Central, the status changes to **Ready to Install**.      ![](./lab1-media/media/image89.png)   2. Install the fix to resolve the CVE.      After the fix is successfully fetched, the action to **Install the fix** is made available next to the affected server.      a. Click **Install fix** next to **tWAS_9057_server**.      ![](./lab1-media/media/image90.png)      b. When prompted to confirm the installation, click **Proceed**.      &gt; **Note:** For this lab, **Create backup** option should be set to **off**.      c. After installation starts, a new **fix record** is created, and the installation begins.      ![](./lab1-media/media/v51-005.png)      d. The installation can take 5 or 6 minutes to complete. Wait until you see the status change to **Installation complete**.      ![](./lab1-media/media/image92.png)       &gt; **TROUBLESHOOTING TIP**     &gt;      &gt; If the installation fails, click the **ID** of the action and view the `runbook.log` output file.      &gt;     &gt;  Common errors that are reported in the log are the `ssh key` and the `wsa-ansible secret not properly configured in the environment`.       &gt;     &gt; ![](./lab1-media/media/image93.png)     &gt;     &gt; ![](./lab1-media/media/image97.png)   **Congratulations!** You successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server.   In the next section of the lab, you review the updated security posture and fix history of the WebSphere server.      ### 4.6 View the security posture and Fix History of your WebSphere servers  ### 4.6.1 Fix history  Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations team fixes vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.  Therefore, it is vital to document the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days that servers were exposed.  A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities are detected, when and how they are fixed, and how many days that servers are exposed.  In this section, you review the security posture and fix history of the two traditional WebSphere servers that are used in the lab to demonstrate how WebSphere Automation manages the details, so you can handle your patching SLAs with ease.  Since you applied the PH42762 iFix, now you can examine the updated security posture of the 9057 WebSphere Application Server.  1.  View the **tWAS_9057_server** CVE Information.      a. From the **Security** view in the WebSphere Automation dashboard, click the **tWAS_9057_server** link located under the **Server** column.      ![](./lab1-media/media/imagev3-44.png)      b.  Select the **Information** tab.      ![](./lab1-media/media/imagev3-45.png)      c.  From the **Information** view, you can see the list of Installed iFixes for the 9057 server.      ![](./lab1-media/media/imagev3-46.png)      &gt; Notice that the **Fixed date** for the iFixes that are related to the Log4J vulnerability shows that they were installed moments ago.     &gt;      &gt; However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.      |                                                |                                                                                                                                                                                                                                                                                                                           |     | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |     | ![sign-info](./lab1-media/media/image4.png) | IBM WebSphere Automation reports ALL iFixes that were applied, regardless of when they were applied. However. It can only determine fix dates, number of days that the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere Application Server is registered with IBM WebSphere Automation. |  2.  View the **tWAS_9057_server** CVE Vulnerabilities details.      a.  From the **tWS_9057_server** view, select the **Vulnerabilities** tab.      ![](./lab1-media/media/imagev3-47.png)      b. From the list of CVEs, sort by **Status**, and display the **Resolved CVEs** on top.      ![](./lab1-media/media/imagev3-48.png)      The CVEs that are listed as **Resolved** are related to Log4J CVEs that were fixed by applying the iFix earlier; **CVE-2021-44228** being the most critical CVE listed.      As illustrated above, the **Vulnerabilities view** provides the details about when the vulnerability was detected in this specific server, and how many days the server was exposed to each vulnerability.  3.  View the **tWAS_9057_server** Fix History details.      a.  From the **tWS_9057_server** view, select the **Vulnerabilities** tab.      b. Select **Fix History**, as illustrated below:      ![](./lab1-media/media/imagev3-49.png)  4.  Notice the Fixes that were applied.      ![](./lab1-media/media/imagev3-50.png)      &gt;**Fix history** shows changes to the server. You can see the action that was taken, and in this case, the Fixes were **Installed**. Next to each Fix you can view the CVEs that were resolved by that Fix, and more importantly, the date that the Fix was applied that resolved specific vulnerabilities.  5.  You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers.      a.  Return to the **Security** view. Then, select the **CVEs** category.      ![](./lab1-media/media/imagev3-51.png)      &gt; Using this view, you can easily determine which servers are affected by specific CVEs.     &gt;       &gt; As an example, focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.     &gt;      &gt; This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.      b. View the **CVE-2021-44228** CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE.       ![](./lab1-media/media/imagev3-52.png)       In this section you learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to respond to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).      You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI.       You learned how to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.   **Congratulations!**  You completed the proactive CVE management lab for traditional WebSphere Application Servers.         Click to expand: Section 5 - Detect and trigger investigation of Application Memory Leak with IBM WebSphere Automation  ## 5.0 Detect and Address Application Memory Leak with IBM WebSphere Automation and Instana  In this lab, you are going to use a traditional WebSphere Application Server and a Liberty Server registered with WSA and monitored by Instana to drive a memory leak investigation.  ![Diagram Description automatically generated](./lab2-media/media/image2.png)  You are going to use a sample application and a script which is going to continuously add objects to the heap to create a memory leak event. Instana will detect such event and will initiate a communication with WSA to inform that a leak has been detected. Once that is done, WSA will open an investigation and begin gathering the necessary problem diagnostic information for that server. You can see the investigation is opened and the process which it goes through. These processes include:    - Memory leak detected    - Identifying server    - Collecting heap dump    - Analyzing heap dump    - Investigation complete  In the end of the investigation, WSA provides an analysis summary which indicates the likely potential root cause of the memory leak. In this case it is a vector inside the sample application which is being hosted by the servlet wrapper. WSA also allow you to simply download all the files that you need with your application development team or application vendor so that they could take the action to fix the application.  At the end of this lab, you will learn how WSA can automatically:    - detect memory leaks before they cause a crash    - gather problem determination (PD) information while the leak is in     progress    - analyze the PD info and produce a report which can be exported and     share with app development teams or app vendors.     ### 5.1 Installing and starting Instana agent  In this section, you install an Instana agent to the **STUDENT** workstation and start it.  In this lab, you wil install a Linux agent in the `student` VM, where the WebSphere Application Server used in this lab is installed.    Using the Instana UI, you can select options for installing the agent, such as the `agent mode`, `agent runtime`, and `installation mode`. Doing so, produces a curl command that you run from a Terminal window, to install the Linux agent.   In this lab, we have provided a simple Linux shell script that installs the Linux agent and configures a `WebSphere` infrastructure zone for monitoring WebSphere Application Server.   1.  Install the Instana Linux agent on the Student VM      a.  Open a new Terminal window.      b. Run the following script to install the instana agent          cd /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange          ./klp-install-instana-agent.sh      ![](./lab2-media/media/4310-install-instana-agant.png)       The Instana agent is installed in **/opt/instana/agent** directory.      The script also defined an Instana Infrastructure Zone for WebSphere by enabling the Instana `Hardware &amp; Zone plugin settings` as illustrated below:        ![Graphical user interface, text Description automatically  generated](./lab2-media/media/image24.png)      &gt; For reference purposes only, Instana's configuration file is located here: `/opt/instana/agent/etc/instana/configuration.yaml`       Lastly, the script restarted the Instana agent with the updated configuration.        ![](./lab2-media/media/4310-restarted-instana.png)   2. Login to the Instana UI      a.  From the web browser, open a new window and click the `Instana     bookmark` to access Instana page.      ![Graphical user interface, application, Word Description  automatically generated](./lab2-media/media/image21.png)       The login credentials are:       &gt; E-Mail: **admin@instana.local**       &gt; Password: **qJgN6hS6sE**  3.  Verify the Instana agent installation      &gt; Note: after the agent is started, it might take a few minutes for the agent to sync with Instana server.      a. Go back to `Instana administrative console` in the web browser,       b. Click on the `Infrastructure` icon on the left navigation bar.       You will see the `WebSphere` infrastructure zone that was configured when you installed the Instana agent using the Linux script.        ![](./lab2-media/media/4310-infrastructure-zone.png)      c. Click `Time Rage` dropdown button, select `Last 5 minutes` and click `Live`.      ![A screenshot of a computer Description automatically generated with medium confidence](./lab2-media/media/image28.png)      After a few minutes, you see that the infrastructure zone you defined is displayed.      ![A picture containing shape Description automatically  generated](./lab2-media/media/image29.png)      The Istana agent is now set to monitor the changes in 5 minutes interval, the agent installation is now completed.   ### 5.2 Configure WebSphere Automation integration with Instana and WebSphere Servers  WebSphere Automation (WSA) communicates with Instana to receive real-time Instana alerts.   WSA also accesses the VMs where registered WebSphere servers are hosted to collect problem diagnostic information.   To do so, a secure ssh connection must be configured between the Instana server and the VM hosting WebSphere Application Servers.   In this lab, you will run a simple Linux shell script that configures and validates the secure SSH connection,  1. Configure the secure ssh connection between Instana server and the Linux Student VM      a. Return to the Terminal window in the Student VM.      b. Run the following script that configures the secure ssh connection and restarts the Instana server.          cd /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange          ./klp-instana-setup.sh        c. Ensure the script completed with the `TEST PASSED` message.       When the script completes the ssh configuration, it tests the secure connection. If the connection is properly configured, the `TEST PASSED` message is displayed.       If the test passes, you can continue with the lab.      ![](./lab2-media/media/4310-setup-instana-ssh.png)   ### 5.3 Configure Instana for memory leak alert  This section describes the steps to configure Instana for the memory leak alert to be used by WebSphere Automation (WSA).    You will use the Instana administrative console UI to complete the following activities.  The actives include:     - create a custom payload   - create an alert channel   - create a custom event   - create an alert      1.  Create a custom payload.      Adding a custom payload to your alert notifications enables you to use Instana alerts more efficiently.      You can create a custom payload by using the Instana administrative console or using the Instana API, in the lab, you are using the Instana administrative console.      a. From the Instana page, go to **`Settings &gt; Team Settings`**\u00a0page,     under\u00a0**`Events &amp; Alerts`**. Then click\u00a0**`Custom Payload`**.      ![Graphical user interface, text, application, chat or text message  Description automatically generated](./lab2-media/media/image32.png)      b. In the\u00a0**`Key`**\u00a0field, type\u00a0**`PID`**, do not use any other value for the key. Set the\u00a0**`Value type`**\u00a0to\u00a0**`Dynamic`**. In     the\u00a0**`Value`**\u00a0field, click\u00a0**`Select Tag`**\u00a0and select\u00a0**`Internal -     Process ID`**, then click\u00a0**`Save`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image33.png)  2.  Gather the WSA information required to set up the Alert Channel.      a. From the Terminal window, run the following **oc** commands to         get the **Webhook URL**\u00a0for WebSphere Automation\u00a0installation.          oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443          oc project websphere-automation          oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak      Your outputs look like this       <p>[ibmuser@student ~]$ oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443</p> <p>Login successful.</p> <p>You have access to 66 projects, the list has been suppressed. You can list all projects with 'oc projects'</p> <p>Using project \"websphere-automation\".</p> <p>[ibmuser@student ~]$ oc project websphere-automation</p> <p>Already on project \"websphere-automation\" on server \"https://api.demo.ibmdte.net:6443\".</p> <p>[ibmuser@student ~]$ oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak</p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak</p>       The WebSphere Automation Webhook URL is: **https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak**, you will use it later.      b. Run the following oc command to get the token\u00a0for WebSphere     Automation\u00a0installation.          oc serviceaccounts get-token wsa-health-webhooks-apis-sa      The output is shown below, you will use the token value later, when you create the alert channel.        <p>[ibmuser@student ~]$ oc serviceaccounts get-token wsa-health-webhooks-apis-sa</p> <p>eyJhbGciOiJSUzI1NiIsImtpZCI6InJ1YTJ4VU1JdnRkemdlcFM1M0habGtTcXVuM1hlZlBrY19UUl82QWRWc0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3ZWJzcGhlcmUtYXV0b21hdGlvbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ3c2EtaGVhbHRoLXdlYmhvb2tzLWFwaXMtc2EtdG9rZW4tc3R3bW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NhLWhlYWx0aC13ZWJob29rcy1hcGlzLXNhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzcxNjBjZmYtMTUwNy00MWYyLWFlODgtYjg5MjcxZjJlNzlmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OndlYnNwaGVyZS1hdXRvbWF0aW9uOndzYS1oZWFsdGgtd2ViaG9va3MtYXBpcy1zYSJ9.TVQfRO6E2ZTa4BBSvVgiv-74gbhEG-BVOBu0WaUFG_FBRJsplT6qr_trcsrvyNL9BVrF3kGd4oCqCos8HQGoIO0wEt7DsyePEbIRwL_vn8Jyr_qBr7cHrbWhu4y6EMWCObDWQdZRUsJqtgSLxtTzYqSf6upo_uQczjD5waWLX3gZbeeh5GcyNctFaQPpp_neM6HY-gZJxCSm8o7XmNB1Zcxg-F6ehhdf-0uXDXGYuBKsouWpBatERwBoVL3JgWQTPDUeIJApH9EOlO9LDieb8gaJDbWVB4b1ZsIWdlJg_F5pbWbapRuM8aAlf0HOxCaV84zTifK7J5R2NBf9xxeqrCqMpeSxfR5_Heh9WIl1lviKVn3qeS6aktj6duyu_5lpHw6RQjArcUk5NCxfe7hGS64BaISEbNdfrcYTNqEKeiNmydEuX7PpJaJxHBkmYYbWnZ0BrMaqQ1kUlTcvACs5FsNmbBQ3MOt3hin8dDqC9A1mFA_KlD1Oa1suhuY0DB_8tGwhKsIxFxY9pbKXhmqRl__7oueFxuFxxfvPWanL0WzRsoTJShyhcO6K3oyZPJWC4Cr2I42qo_g_Lth7gBIYRdzFJ63xpNgGUDStTXXcMkfMnm8v-lo5qzsezdgYBb6l152zcS6dA7Ld3502zIpnMx6ZGQadDL8uOSZbK-2CRU0</p>   3.  Create an alert channel.      To create an alert channel by using the Instana administrative  console,      a.  On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**, click\u00a0**`Alert Channels`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image34.png)      b. Click\u00a0**`Add Alert Channel`**\u00a0and select\u00a0**`Generic Webhook`**.      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image35.png)      c. On the\u00a0Create Generic **Webhook Alert Channel**\u00a0page, enter the name as `WebSphere Automation Healing Webhook` in the\u00a0**`Name`**\u00a0field      d. Enter the\u00a0**`Webhook URL`**\u00a0you have for\u00a0WebSphere     Automation\u00a0installation.          https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak      ![Graphical user interface, text, application, email, Teams  Description automatically generated](./lab2-media/media/image36.png)      e. Under\u00a0**`Custom HTTP Request Headers`**, click\u00a0**`Add Header`**.      ![Graphical user interface, text, application, email, website Description automatically generated](./lab2-media/media/image37.png)      f. Create the following two `request headers`. Then click **`Test Channel`**.       Key Value Content-Type application/json Authorization Token value you get with the oc command in previous step         ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image38.png)       g. Be sure you clicked **`Test Channel`** to test the channel before you proceed.       You should see the message showing the channel was successfully triggered.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image39.png)  4.  After verifying the channel, click **`Create`** to create it.      The alert channel is created.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image40.png)  5.  Create a `custom event`      A Custom Event enables you to create issues or incidents based on an individual metric of any given entity.      To create a custom event by using the Instana administrative console:      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Events`**, then click **`New Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image41.png)      b. Create a custom event named \u201c**`Memory Usage High`**\u201d. Set its parameters as shown below.       **Note:** Refer to screenshot below!      `1. Event Details`       - Name: Memory Usage High       - Description: Memory usage over 80%       - Issue Severity: Warning       - Grace Period: 90 s      `2. Condition`       - Source: Built-in metrics       - Entity type: JVM       - Metric: Memory &gt; Used percentage       - Time window: 10 s       - Aggregation: max       - Operator: &gt;=       - Percentage: 80      `3. Scope`       -  Apply on (required): All available entities       ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image42.png)      c. Click **`Create`** to create the new custom event.  1.  Create an `alert`.      An Alert is raised when an event has triggered, such as high memory usage over 80% for some period.       To create an alert by using the Instana administrative console,      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Alerts`**, then click **`New Alert`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image43.png)      b. In the\u00a0**`Name`**\u00a0field, type a name for the alert as: **`WebSphere Automation Healing Memory Leak`**.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image44.png)      c. In the\u00a0**`Events`**\u00a0menu, select\u00a0**`Alert on Event(s)`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image45.png)      d. In the\u00a0**`Events`**\u00a0section, click\u00a0**`Add Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image46.png)      e. In the\u00a0`Add Events\u00a0window`, enter **`memory usage h`** in the search box and select\u00a0**`Memory Usage High`**. You can filter the list by using a keyword (for example,\u00a0leak) to help find the entry in the list.      Click\u00a0**`Add 1 Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image47.png)      f. Add two more events: **`Garbage collection activity high** (for JVM)` and **`Memory leak** (for JVM)`.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image48.png)      The event list updated:      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image49.png)      g.  In the\u00a0**`Scope`**\u00a0menu, select **`All available entities`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image50.png)      h.  Under\u00a0**`Alerting`**, click\u00a0**`Add Alert Channel`**, select the alert channel that you created previously. Then click\u00a0**`Add 1 Channel`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image51.png)      ![Graphical user interface, application Description automatically&gt; generated](./lab2-media/media/image52.png)      i. Click\u00a0**`Create`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image53.png)      The alert is created.       ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image54.png)    **Now the Instana configuration for memory leak alert is completed**    ### 5.4 WebSphere memory leak check with WebSphere Automation  In this section, you run a script to create memory leak incident for an application running in a WebSphere Application server instance which is already registered in WebSphere Automation. When WebSphere Automation detects the memory leak, it automatically conducts the analysis to identify the root cause.  1.  Run the following Linux shell script to install a memory leak application in WebSphere Application Server and restart the WebSphere application server.       a. From the Terminal window,     run the command below to install the memory leak app and restart the WebSphere application server:          cd /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange           ./klp-tWAS_configure_MLApp.sh   1.  Login to WebSphere Automation, if you are not already logged in.       a.  Open a Firefox web browser      ![Graphical user interface Description automatically  generated](./lab2-media/media/image9.png)      b.  Click WebSphere Automation bookmark      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image10.png)      c.  Click OpenShift authentication      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image11.png)      d.  Click **htpasswd.**      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image12.png)      e.  Enter Username and Password as: **ibmadmin** / **engageibm** and click **Log in**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image13.png)   3.  In the WebSphere Automation UI, click on the **`Health`** icon.      The `Health` section is where you view and analyze server health problems.       ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image55.png)      Since all the application are working fine at this time, you do not see anything in the Health page yet.      ![Graphical user interface, text, application Description   automatically generated](./lab2-media/media/image56.png)  4.  In this lab, you can also monitor the WebSphere application server     memory change in Instana.      a. In **Instana administration console**, click **`Infrastructure`** icon, click         **`Comparison Table`**, select **`JVMs`** from the dropdown, and click **`bootstrap WAS90.SERV1.`**      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image57.png)      As you can see, currently there is not any issue with the WAS server.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image58.png)  5. Set the `Time Range` to `Last 5 minutes` and click `Live` to see the current state      ![](./lab2-media/media/4310-set-live-5min.png)   6.  From the Terminal window, run the provided script which will run a sample memory leak application in WebSphere. Instana will immediately show the significant increase in JVM heap usage, which will create an application memory leak event.          /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange/klp-curl_MLAPP_add_was.sh      The script output is showing like this:       <p>[ibmuser@student ~]$ /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange/klp-curl_MLApp_add_was.sh</p> <p>Increased heap usage by 25MB</p> <p>Increased heap usage by 50MB</p> <p>Increased heap usage by 75MB</p> <p>Increased heap usage by 100MB</p> <p>Increased heap usage by 125MB</p> <p>Increased heap usage by 150MB</p> <p>Increased heap usage by 175MB</p> <p>Increased heap usage by 200MB</p> <p>Increased heap usage by 225MB</p> <p>Increased heap usage by 250MB</p> <p>Increased heap usage by 275MB</p> <p>Increased heap usage by 300MB</p> <p>Increased heap usage by 325MB</p>   7.  In the Instana page, you can see that the memory is increasing steadily, and one issue is detected.      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image59.png)  8.  Go back to the WebSphere Automation UI. You see that WebSphere Automation has received the Memory leak alert and activate its investigation on the issue.       Initially you might see the Server `Not identified yet` status and soon you see the server name is identified.       ![Graphical user interface, application Description automatically generated](./lab2-media/media/image60.png)      a. Click the **`Investigating`** link to view its details.      ![Graphical user interface, text Description automaticallygenerated](./lab2-media/media/image61.png)  9.  The Investigating section lists the problem, status, Server, Host     and Cell information, why the investigation is started and the     investigation history.       a. Click the **View history** dropdown to see current investigation activities      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image62.png)      The WSA memory leak investigation activities include:      - Memory leak detected     - Identifying server     - Collecting heap dump     - Analyzing heap dump     - Investigation complete      The screenshot below shows that the investigation is in process.      ![Graphical user interface, application Description automaticallygenerated](./lab2-media/media/image63.png)  10. If you check your email, you should have received a WSA notification like the following for the issue.      ![Graphical user interface, text, application, email Description automatically generated](./lab2-media/media/image64.png)  11. After a few minutes, the WebSphere Automation investigation is completed. You can see the analysis summary which points to the root cause of the issue.      You can also click **`Download all files`** to get the analysis     reports, heap dumps and WebSphere Automation runbooks on your workstation.      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image65.png)      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image66.png)      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image67.png)      ![Graphical user interface, text, application, email Description automatically generated](./lab2-media/media/image68.png)  12. Now WSA has successfully detected and analyzed WAS memory leak     issue, it has sent you another email to confirm that.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image69.png)  13. you can run a script to reduce the heap usage and then stop the WAS     server with the commands:          /home/ibmuser/WAS-Automation-LabFiles/lab2-MemoryLeak/techxchange/klp-curl_MLAPP_removeLast.sh          /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy%20%283%29/#summary","title":"Summary","text":"<p>Congratulations! You have completed the WebSphere Automation Memory Leak Detection lab.</p> <p>With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.</p> <p>IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.</p> <p>IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.</p> <p>To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/","title":"Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#proactive-cve-protection-for-websphere-with-ibm-websphere-automation","title":"Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":"<p>Last updated: March 2023</p> <p>IBM WebSphere Automation version 5.1</p> <p>Duration: 90 mins</p> <p>Need support? </p> <ul> <li> <p>Kevin Postreich - kevinlp@us.ibm.com</p> </li> <li> <p>Yi Tang - yitang@us.ibm.com</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#introduction-to-websphere-automation","title":"Introduction to WebSphere Automation","text":"<p>IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks.</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur.</p> </li> <li> <p>Augment the operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth.</p> <p>IBM WebSphere Automation is a stand-alone product that runs on RedHat OpenShift. Entitlement to RedHat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#business-context","title":"Business Context","text":"<p>You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below.</p> <p>Today (as-is):</p> <ol> <li> <p>IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin.</p> </li> <li> <p>You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions.</p> </li> <li> <p>Generally, WAS inventory is maintained in spreadsheets.</p> </li> <li> <p>Based on that, you check if this CVE applies to your managed inventory (Spreadsheet)</p> </li> <li> <p>You determine if an APAR / Fix Pack upgrade should be applied to    existing environment</p> </li> <li> <p>You deploy the fix to the impacted environments</p> </li> <li> <p>You update the WAS inventory (Spreadsheet) and provide up-to-date    reports to audit and compliance teams</p> </li> </ol> <p>As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc</p> <p></p> <p>Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help!</p> <p>You would like to have:</p> <ul> <li> <p>Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).</p> </li> <li> <p>Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.</p> </li> <li> <p>Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.</p> </li> <li> <p>Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.</p> </li> <li> <p>Fix History: A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues</p> </li> <li> <p>Automated fix installation of Fixpaks and iFixes to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard. </p> </li> </ul> <p>In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance.</p> <p>At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. </p> <p>You will gain the necessary insights into Fix History to help operations teams demonstrate they are meeting patching SLAs, which are very common in large enterprises. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.</p> <p>You will use the one-click Fix Deployment capability of WebSphere Automation 1.4 to automatically determine which APARs and interim fixes to install to resolve a specific vulnerability, and to download and deploy the fixes. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#accessing-the-environment","title":"Accessing the environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://techzone.ibm.com/my/reservations/create/63867b6a4cd2a3001961ea2c</p> <ol> <li> <p>Access the lab environment from your web browser. </p> <p>a. When the demo environment is provisioned, click on the environment tile to open its details view. </p> <p>b. Click on the Published Service link which will display a Directory listing </p> <p>c. Click on the \"vnc.html\" link to open the lab environment through the noVNC interface. </p> <p></p> <p>d. Click the Connect button </p> <p></p> <p>e. Enter the password as:  passw0rd. Then click the Send Credentials button to access the lab environment. </p> <p>Note: That is a numeric zero in passw0rd  </p> <p></p> <p>IBM WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs.</p> <p></p> </li> <li> <p>The Published Service provides access to the STUDENT VM through the noVNC interface for the lab environment. </p> <p>All the WebSphere images and iFixes required for the lab are pre-installed on the VM:</p> <ul> <li> <p>/opt/IBM/WebSphere/Liberty20009/</p> </li> <li> <p>/opt/IBM/WebSphere/AppServer9057/</p> </li> </ul> <p></p> </li> <li> <p>Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.)</p> <p>The login credentials for the STUDENT\u201d image is:</p> <ul> <li> <p>User ID: ibmuser</p> </li> <li> <p>Password: engageibm</p> </li> </ul> <p></p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#tips-for-working-in-the-lab-environment","title":"Tips for working in the lab environment","text":"<ol> <li> <p>You can resize the viewable area using the noVNC Settings options to resize the virtual desktop to fit your screen.</p> <p>a. From the environemnt VM, click on the twisty on the noNC control pane to open the menu.  </p> <p></p> <p>b. To increase the visible area, click on <code>Settings &gt; Scaling Mode</code> and set the value to <code>Remote Resizing</code></p> <p></p> </li> <li> <p>You can copy / paste text from the lab guide into the lab environment using the clipboard in the noVNC viewer. </p> <p>a. Copy the text from the lab guide that you want to paste into the lab environment</p> <p>b. Click the Clipboard icon and paste the text into the noVNC clipboard</p> <p></p> <p>c. Paste the text into the VM, such as to a terminal window, browser window, etc. </p> <p>d. Click on the clipboard icon again to close the clipboard</p> <p>NOTE: Sometimes pasting into a Terminal window in the VM does not work consistently. </p> <p>In this case you might try again, or open another Terminal Window and try again, or  paste the text into a Text Editor in the VM, and then paste it into the Terminal window in the VM. </p> </li> <li> <p>An alternative to using the noVNC Copy / Paste option, you may consider opening the lab guide in a web browser inside of the VM. Using this method, you can easily copy / paste text from the lab guide wihout having to use the noVNC clipboard. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#how-ibm-websphere-automation-automatically-manages-your-websphere-and-liberty-server-security-posture","title":"How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture","text":"<p>WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation. </p> <p>The WebSphere Automation vulnerability manager makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers using the WebSphere Automation UI.</p> <p>When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation CVE/PSIRT monitor detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.</p> <p>After defining an exposure mitigation plan, administrators then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#clone-the-git-repository-used-for-this-lab-and-explore-the-contents","title":"Clone the Git repository used for this lab and explore the contents","text":"<ol> <li> <p>Clone the GitHub repo with the lab artifacts, then run the following command on your terminal:</p> <p>a. Open a Terminal window on the VM, and ensure you are in the home directory of the user \u201cibmuser\u201d</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> <p>c.  Navigate to the cloned repo directory for this lab</p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> <p>d. Add execute permission to the shell scripts</p> <pre><code>chmod 755 *.sh\n</code></pre> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#required-websphere-automation-setup","title":"REQUIRED: WebSphere Automation setup","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation. You will do these steps in this section of the lab using a shell script, which will streamline the setup process.  </p> <ul> <li>Create the ssh key</li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the wsa-ansible secret that contains the key</li> <li>Create the known_hosts file</li> <li>Create the wsa-secure-fixcentral-creds secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <p>Fist, you need to verify that IBM WebSphere Automation is in the \"Ready\" state. </p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#ensure-websphere-automation-is-ready-for-use","title":"Ensure WebSphere Automation is \"Ready\" for use","text":"<ol> <li> <p>Login to OpenShift CLI</p> <p>a. Open a new Terminal window in the VM</p> <p>b.  Type <code>oc login -u ibmadmin -p engageibm</code> to login to OpenShift. </p> <p>Use the following credentials to login: </p> <p>username: ibmadmin</p> <p>password: engageibm</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation is READY in your environment. </p> </li> </ol> <p>Note: The output must state that the WSA resource is ready before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#use-the-provided-shell-script-to-setup-websphere-automation","title":"Use the provided shell script to setup WebSphere Automation","text":"<p>In this section, you run a shell script that performs the setup steps noted above, which are required to use the Fix Deployment features in IBM WebSphere Automation.  </p> <ol> <li> <p>Ensure you are in directory where the shell scripts are located. </p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/lab1-CVE\n</code></pre> </li> <li> <p>Run the shell script</p> <pre><code>./wsa-setup.sh\n</code></pre> </li> </ol> <p>The shell script is interactive, and requires keyboard input. Respond to the prompts as illustrated below: </p> <pre><code>a.  Type \"**passw0rd**\" when prompted for a password for the ssh-keygen password. (Note the zero)\n\n&gt; **Note:** Re-enter SAME passphrase again: **passw0rd**\n</code></pre> <p></p> <pre><code>b. Type \"**yes**\" when prompted to continue connecting for the **ssh-copy-key** command\n\n![](./lab1-media/media/v51-002.png)\n\nc. Type \"**engageibm**\" when prompted for the password for \"ibmuser\" on the ssh-copy-key command\n\n![](./lab1-media/media/v51-003.png)\n\n- The script will now run to completion without any further interaction.\n</code></pre> <ol> <li> <p>When the script completes, verify the \"Test-Connection\" Ansible playbook ran successfully, as illustrated in the console output. </p> <p></p> <p></p> <p>What if the script FAILS?</p> <p>If the script completed with \"TEST FAILED\", the likely cause is  incorrect input was entered for one or more of the input prompts. </p> <p>The ssh-key passphrase MUST be set to \"passw0rd\", as that is the password that we code into the OCP secret. </p> <p>RE-RUN the script again. Respond to the input prompts carefully, according to the lab guide illustrations shown above. </p> <p>Note: you can also run the \"oc logs --tail ...\" command that is shown on the console output, which is the entire log output from the ansible test-connection playbook. That log may provide additional insights into the error. </p> </li> </ol> <p>You have now completed the WebSphere Automation setup procedures</p> <p>If the wsa-setup.sh script completed with TEST_PASSED, you can proceed with the lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#part-1-receiving-vulnerability-notifications","title":"Part 1: Receiving vulnerability notifications","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#accessing-the-websphere-automation-ui","title":"Accessing the WebSphere Automation UI","text":"<p>A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications.</p> <p>WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage.</p> <p>For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.</p> <ol> <li> <p>On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \"Secure Connection Failed\" or  \"502 Gateway Error\" accessing the WebSphere Automation URL, please wait a few minutes and retry. </p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/zen/#/homepage</p> <p></p> <p></p> </li> <li> <p>On the login page, select the OpenShift authentication as the    authentication type.</p> <p>Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. </p> <p></p> <p>Note: If necessary, accept all the warnings and certificates.  Depending on your browser, you might have to scroll down to permit  access.</p> <p></p> </li> <li> <p>Select htpasswd as the login selection</p> <p></p> <p></p> </li> <li> <p>Enter ibmadmin as username and engageibm as password. And click Log In.</p> <p></p> <p></p> <p>If the \"IBM Cloudpak | Administration\" page appears, navigate to the IBM Automation page using the sub-steps below. Otherwise continue with the next step, as you should already be at the IBM Automation page.  </p> <p></p> <p>a. In the upper right corner, click on the cloudpak switcher icon</p> <p></p> <p>b. Select IBM Automation (WebSphere Automation) from the menu</p> <p></p> </li> <li> <p>At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>View the Application Runtimes that have been registered with IBM Automation</p> <p>a. Click on theNavigation Menu icon located at the upper left corner of the page</p> <p></p> <p>b. Click Operate, and then click Application runtimes.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation</p> <p></p> <p></p> </li> <li> <p>The Application runtimes \u2013 Security page appears. There should be no data since there not any WebSphere / Liberty servers registered yet.</p> IMPORTANT:  If any of the labels on the page don't display properly, refresh the browser window using the web browser refresh icon.   For example: The label for the Fix management tab may display as !Fix management! the first time. Refreshing the browser window will result in the labels being displayed correctly.   Note: This is only a one-time action. <p></p> <p></p> </li> <li> <p>Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs.</p> <p>a. Select the Notifications menu item from the navigation list.</p> <p>b. Click on the Email addresses tab, to add your email address where notifications of new CVEs will be delivered</p> <p></p> <p></p> </li> <li> <p>The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities.</p> <p>a. Click the Add button</p> <p>b. Enter your email address</p> <p>c. Click Save</p> <p></p> </li> </ol> <p>Great! Your email is configured to receive security notifications.</p> <p>In the next section, you will register servers to WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#part-2-getting-configuration-parameters-needed-to-register-websphere-liberty-servers-to-ibm-automation","title":"PART 2: Getting configuration parameters needed to register WebSphere / Liberty servers to IBM Automation","text":"<p>Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service.</p> <p>To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details:</p> <ul> <li> <p>URL: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.</p> </li> <li> <p>API Key: The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process.</p> </li> <li> <p>Usage metering certificate: The certificate that contains the public key. This key allows a Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.</p> </li> </ul> <p>In this section, you will get these configuration parameters that will be used to register application servers.</p> <ol> <li> <p>Return to the desktop and open a new terminal window.</p> <p></p> <p></p> </li> <li> <p>Login to the OpenShift Cluster using the oc CLI command shown below, if you are not already logged in:</p> <pre><code>oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443\n</code></pre> <p></p> <p></p> </li> <li> <p>Make sure that the project you are working on is websphere-automation:</p> <pre><code>oc project websphere-automation\n</code></pre> <p></p> <p></p> </li> <li> <p>Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file  \u201c/opt/IBM/WebSphere/metering-url.txt\u201d</p> <pre><code>echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi &gt; /opt/IBM/WebSphere/metering-url.txt\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the URL was captured.</p> <pre><code>cat /opt/IBM/WebSphere/metering-url.txt\n</code></pre> <p></p> <p></p> </li> <li> <p>Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d</p> <pre><code>oc -n websphere-automation get secret wsa-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.wsa-secure-metering-apis-sa}' | base64 -d &gt; /opt/IBM/WebSphere/api-key.txt; echo &gt;&gt; /opt/IBM/WebSphere/api-key.txt\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the api-key (token) was captured.</p> <pre><code>cat /opt/IBM/WebSphere/api-key.txt\n</code></pre> <p></p> <p></p> </li> <li> <p>Finally, get the Server certificate that is used for SSL handshake between the Liberty servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d</p> <pre><code>oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d &gt; /opt/IBM/WebSphere/cacert.pem\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the api-key (token) was captured.</p> <pre><code>cat /opt/IBM/WebSphere/cacert.pem\n</code></pre> <p></p> </li> </ol> <p>Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation.</p> For more information:  For additional details, view the section titled: Setting up security monitoring in the WebSphere Automation on-line documentation, or download it as a PDF from this URL: https://www.ibm.com/docs/en/ws-automation <p>In the next section, you register your first server in WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#part-3-working-with-traditional-websphere-servers-with-ibm-automation-security-vulnerabilities","title":"Part 3: Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities","text":"<p>You can view the security vulnerability status of each server in your inventory from the Security page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.</p> <p>To set up security monitoring, add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. </p> <p>You can then track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.</p> <p>To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. </p> <p>In Part 3 of the lab, you will perform the following task for WebSphere Traditional servers in IBM Automation. </p> <ol> <li> <p>Register a WebSphere traditional application server (tWAS), version 9.0.5.7 to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in the previous section of the lab. </p> <p>Once registered, you will immediately see the list of all unresolved CVEs and applied iFixes for the server. </p> </li> <li> <p>Resolve the known Log4J vulnerabilities in the WebSphere traditional application server, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix documented in the security bulletin for this vulnerability. </p> <p>Once the iFix is applied, IBM Automation immediately updates the security information for that application server, showing that the critical Log4J vulnerabilities have been patched. </p> </li> </ol> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#31-register-traditional-websphere-twas-v9057","title":"3.1 Register traditional WebSphere (tWAS) v9.0.5.7","text":"<p>In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service.</p> <ol> <li> <p>First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.7 server. Return to the terminal window and execute the command below:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Configure usage-metering using the wsadmin script below:</p> <p>The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters.</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\n</code></pre> <p>The script should run successfully as illustrated below.</p> <p></p> <p></p> <p>Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. </p> <p></p> </li> <li> <p>Go back to the browser, navigate to the Security -&gt; Servers dashboard, and confirm that the tWAS v9.0.5.7 server was registered in IBM Automation.</p> <p>Note: It may take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI. </p> <p></p> <p>You should see that this server Risk Level is 10.0, with (+## more) unresolved CVEs. </p> <p>Note: Somewhere at the top of that list is the much talked about LOG4J vulnerability, known as CVE-2021-44228, with a critical score of 10.  </p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. <p></p> </li> <li> <p>Check your email. A mail notification was sent showing new vulnerabilities for the registered application server.</p> <p></p> Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#32-review-cve-2021-44228-to-understand-the-remediation-options-for-the-log4j-vulnerability","title":"3.2 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability","text":"<p>In this section, you will review the details of the critical (10.0) CVE-2021-44228 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>In this lab, you will apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> </li> <li> <p>Click on (+ \\&lt;NUMBER&gt; more) to expand the list of unresolved CVEs. </p> <p>IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin.</p> <p></p> <p>As noted in the IBM security bulletin, which you will explore next, there are three CVEs related to the LOG4J vulnerability. A subset are highlighted below in the list of Unresolved CVEs for this WebSphere server.</p> <p></p> </li> <li> <p>After viewing the complete list of unresolved CVEs for the 9057 server, close the \u201cUnresolved CVEs\u201d view.</p> </li> <li> <p>View the security bulletin(s) for the CVE-2021-44228 Log4J vulnerability</p> <p>a.  Click on CVE-2021-44228 link under the 9057 servers Unresolved CVEs column</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level \u201cCritical (10)</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the 9057 WebSphere server has been \u201cexposed\u201d to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation.</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> <p>b.  Click on the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>c.  The security bulletin is displayed in a new browser tab.</p> <p>d.  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046)</p> <p></p> <p>You can read the security bulletins from the ibm.com/support pages. You may be prompted to login using your IBM ID to access the content:</p> <p>https://www.ibm.com/support/pages/node/6525706</p> </li> <li> <p>Return to the Browser tab that contains the IBM WebSphere Automation dashboard. Then return to the \u201cSecurity\u201d view</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#33-update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"3.3 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced into IBM WebSphere Automation in version 1.4</p> <p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you will leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <p>There are a couple of additional components now included in the product to support this use case. </p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the websphereSecure custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#331-navigate-to-the-server-and-unresolved-cve-to-fix","title":"3.3.1 Navigate to the Server and unresolved CVE to fix","text":"<p>OK, let's apply the recommended iFix to resolve the CVE-2021-44228 vulnerability! </p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p>You will fix it by applying the recommended iFix. (PH42728)</p> <p></p> </li> <li> <p>Click on tWAS_9057_server to view the list of CVEs / vulnerabilities</p> <p></p> <p>The displayed list shows both \"resolved\" and \"unresolved\" CVEs for the selected server. It also shows the \"Risk Level\" to identify the severity of the vulnerabilities, and the number of days the server has been exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click on CVE-2021-44228 to view the CVE information and affected servers</p> <p></p> <p>On the CVE Information page for CVE-2021-44228, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You will do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#332-prepare-fix","title":"3.3.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Simply select the target server to patch and the dialog shows all the affected servers known to WebSphere Automation, and lets you select the wanted fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation should be deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This can be preferable for fix packs because those are significantly larger than interim fixes, especially for traditional WebSphere fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>The Fetch then install fix option automatically downloads the fix and then installs it after the download is complete. </p> <p>Previously fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you will download and install the recommended iFix for the CVE into the tWAS_9057_server    </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE</p> <p>Next to each affected server, there is an option to \"Prepare Fix\". </p> <p>a. Click the Prepare fix link next to tWAS_9057_server for CVE-2021-44228</p> <p></p> <p>b. From the Select fix page, select the PH42728 iFix. Then click the Fetch fix button. </p> IMPORTANT:  If the PH42728 iFix is not listed under the \"resolution\" column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. And, WSA only loads the meta-data for the unresolved CVEs of the registered server(s).   WSA does this using a background process that spins up several threads. Because there are more unresolved CVEs than number of threads loading the meta-data,  it will take a WSA a couple of iterations to load all of the meta-data for the fixes.    Typically, the process will complete within 8-10 minutes after the server has been registered with WebSphere Automation.  WSA will continue to load fix meta-data as new unresolved CVEs are detected for registered servers. <p></p> <p>This action will cause WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix has been successfully fetched from IBM Fix Central, the status will change to Ready to Install.</p> <p></p> </li> <li> <p>Install the fix to resolve the CVE</p> <p>Once the fix has been successfully fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click on the Install fix action next to the tWAS_9057_server    </p> <p></p> <p>b. When prompted to confirm the installation, click Proceed</p> <p>Note: For this lab, \"Create backup\" option should be set to \"off\".</p> <p>c. Once the installation starts, a new \"**fix record\" is created, and the installation will begin.</p> <p></p> <p>d. The installation may take 5 or 6 minutes to complete. Wait until you see the status change to \"Installation complete\"</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click on the ID of the action, and view the runbook.log output file. </p> <p>Common errors we have seen reported in the log is the ssh key and/or the wsa-ansible secret not properly configured in the environment.  </p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server. </p> <p>In the next section of the lab, you will review the updated security posture and fix history of the WebSphere server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#34-view-the-security-posture-and-fix-history-of-your-websphere-servers","title":"3.4 View the security posture and Fix History of your WebSphere servers","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#341-fix-history","title":"3.4.1 Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations teams fix vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to be able to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> <p>In this section, you will review the security posture and fix history of the two traditional WebSphere servers used in the lab to demonstrate how WebSphere Automation manages the details so you can handle your patching SLAs with ease.</p> <p>Now that you have applied the PH42762 iFix, let's examine the updated security posture of the 9057 WebSphere server.</p> <ol> <li> <p>View the tWAS_9057_server CVE Information</p> <p>a. From the Security view in the WebSphere Automation dashboard, click on the tWAS_9057_server link located under the Server column</p> <p></p> <p>b.  Select the Information tab</p> <p></p> <p>c.  From the Information view, you can see the list of Installed iFixes for the 9057 server.</p> <p></p> <p>Notice that the Fixed date for the iFixes related to the Log4J vulnerability show that they were installed moments ago.</p> <p>However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.</p> IBM WebSphere Automation reports ALL iFixes that have been applied, regardless of when they were applied. However. It can only determine fix dates, number of days the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere server is registered with IBM WebSphere Automation. </li> <li> <p>View the tWAS_9057_server CVE Vulnerabilities details</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab</p> <p></p> <p>b. From the list of CVEs, sort by Status, and display the Resolved CVEs on top</p> <p></p> <p>The CVEs that are listed as Resolved are all the related Log4JCVEs that were fixed by applying the iFix moments ago; CVE-2021-44228, being the most critical CVE listed.</p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server has been exposed to each vulnerability.</p> </li> <li> <p>View the tWAS_9057_server Fix History details</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab</p> <p>b. Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice the Fixes that have been applied</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were \u201cInstalled\u201d. Next to each Fix you can view the CVEs that were resolved by that Fix, and very importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> <p>Having this record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers</p> <p>a.  Return to the Security view. Then select on the CVEs category</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, let\u2019s focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b. View the CVE-2021-44228 CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE. </p> <p></p> <p>In this section you have learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to be responsive to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).</p> <p>You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI. </p> <p>You learned how to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#35-optional-uninstall-the-latest-fix-that-was-applied","title":"3.5 Optional - Uninstall the latest fix that was applied","text":"<p>With WebSphere Automation, you can uninstall the most recently applied fix for WebSphere and Liberty servers using the UI. </p> <p>The server installation with the fix that you want to remove must have a fix management record with a successfully installed fix package (that is, an \"Install\" action with a \"Succeeded\" status).</p> <ol> <li> <p>View the Fix record for the 9057 server</p> <p>a. Return to the Security view, and click on the 9057 server </p> <p></p> <p>b. Click the Fix Management tab, and note the fix record for the installed package \"IFPH43148\". This is the fix package you installed to resolve the CVE-2021-44228 CVE. </p> <p>c. Note the fix record status:  - Action: Install - Status: Succeeded</p> <p></p> <p>Since the \"Install\" fix record for the IFPH3148 package is in the \"Succeeded\" state, you can use the WebSphere Automation UI to Uninstall the fix. </p> </li> <li> <p>Uninstall this latest installed fix for the 9057 server</p> <p>a. From the Fix Management view for the 9057 server, click on the \"Uninstall latest package\" link. </p> <p></p> <p>b. Review the details. Then click \"Uninstall\" to uninstall the fix package.</p> <p></p> <p>c. When asked if you want to create a backup, select \"OFF\". Then click the Proceed button to begin the Uninstallation of the package. </p> <p></p> <p>d. A new \"Fix Management\" record is created, and the \"Uninstall\" action is started. </p> <p></p> <p>e. After a few moments, the status of the \"Uninstall\" fix record  changes to Succeeded. </p> <p>The fix package has successfully been uninstalled from the 9057 WebSphere server. </p> <p></p> </li> <li> <p>View the CVE-2021-44228 CVE in the Servers view, and note that the 9057 server is once again vulnerable to this CVE. </p> <p>a. Click on the CVEs tab</p> <p></p> <p>b. Select the CVE-2021-44228 CVE</p> <p></p> <p>c. Scroll down to the Affected Servers section in the view. </p> <p>Note that the 9057 WebSphere server is once again vulnerable to the CVE, as the fix package for the CVE as been removed from the server. </p> <p></p> </li> <li> <p>Return to the Application Runtimes Security view in WebSphere Automation     </p> <p></p> </li> </ol> <p>Congratulations!  You have completed the proactive CVE management lab for traditional WebSphere Application Servers.      </p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#part-4-working-with-websphere-liberty-servers-in-ibm-automation","title":"Part 4: Working with WebSphere Liberty servers in IBM Automation","text":"<p>Registering WebSphere Liberty servers with IBM automation requires that they also register to the usage metering service as WebSphere traditional application servers. While the requirement is the same, the process in which WebSphere Liberty servers register with the metering service is quite different than WebSphere traditional. </p> <p>In Part 4 of the lab, you will perform the following task for WebSphere Liberty servers with IBM Automation. </p> <ol> <li> <p>Register a WebSphere Liberty to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in Part 2 of the lab. </p> <p>Once registered, you will immediately see the list of all unresolved CVEs and applied iFixes for the server. </p> </li> <li> <p>Resolve an identified vulnerabilities in the WebSphere Liberty server, by applying the appropriate iFix documented in the security bulletin for this vulnerability. </p> <p>Liberty servers on the distributed platform are not vulnerable to the well-known log4J vulnerabilities. However, you will resolve a critical vulnerability in the WebSphere Liberty server. </p> <p>Once the iFix is applied, IBM Automation immediately updates the security information for that Liberty application server, showing that the critical vulnerability has been patched.  </p> </li> <li> <p>Review the security posture and Fix History of the WebSphere servers.</p> <p>Once you have patched one of the Liberty servers, view the Fix History and security posture as it relates to resolved and unresolved CVEs. Here you see the Risk Level for the servers, how long servers are exposed to vulnerabilities, and when CVEs were resolved.  </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#41-configuring-liberty-server-v20009","title":"4.1 Configuring Liberty server v20.0.0.9","text":"<p>In this section, you configure Liberty Server version 20.0.0.9 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it.</p> <ol> <li> <p>Create a new Liberty server, version 20.0.0.9, using the command below:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file:</p> <pre><code>sudo \\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> <p>When prompted for the password for ibmuser, enter: engageibm</p> <p></p> </li> <li> <p>Start the Liberty server:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection:</p> <p>The command below will import the \u201ccacert.pem\u201d file, that you saved in part 2 of the lab, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation.</p> <pre><code>keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\n</code></pre> <p></p> <p></p> </li> <li> <p>Configure the usage metering in the new server. This is configured in the Liberty server.xml file.</p> <p>a. Open the server.xml file using the \u201cgedit\u201d editor</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> <p>b.  Add the usageMetering-1.0 feature to the existing features in the &lt;featureManager&gt; element, as illustrated below:</p> <pre><code>&lt;feature&gt;usageMetering-1.0&lt;/feature&gt;\n</code></pre> <p> </p> <p>c.  In the server.xml file, add the usageMetering element below:</p> <pre><code>&lt;usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and Close the server.xml file.</p> <p></p> </li> <li> <p>Create a bootstrap.properties file for the Liberty server that contains the variable values for  metering_url and api_key that are defined in the server.xml file. Using variables will make it easier to add the configuration to the Liberty server. </p> <pre><code>echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" &gt;&gt; /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n\necho \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" &gt;&gt; /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n</code></pre> </li> <li> <p>Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables</p> <pre><code>cat /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n</code></pre> <p>The metering-url and api-key variables should have values as illustrated below. </p> <p></p> <p> </p> </li> <li> <p>Restart the Liberty server so that it can be initialized with the bootstrap.properties file. </p> <p>Note: Use the --clean option when starting the Liberty server, to clear any cached data. </p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\n\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server --clean\n</code></pre> <p></p> <p></p> </li> <li> <p>View the Liberty server \u201cmessages.log\u201d file and find the message indicating that the server was registered to the metering service.  </p> <pre><code>tail /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/logs/messages.log\n</code></pre> <p></p> <p> </p> <p>The Liberty009 server is now successfully registered with IBM Automation and should be displayed in the IBM Automation Dashboard under Application runtimes &gt; Security - Servers.</p> <p></p> </li> <li> <p>Go back to the browser, navigate to the Security -&gt; Servers dashboard, and confirm that the Liberty_20009_server was registered in IBM Automation</p> <p></p> <p></p> IMPORTANT:  If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly.  1. Review the server.xml configuration.  \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering-1.0 feature is included in the list of features.  2. Review the bootstrap.properties file \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering url is CORRECT. No additional characters or spaces.  \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. <p>If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI.</p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. <p>The dashboard shows that this server is vulnerable for some unresolved CVEs.</p> <p></p> </li> <li> <p>Click on the \u201c+2 more\u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693.</p> <p>Note that the +2 could be different if additional CVEs have been discovered since the time of this writing. </p> <p></p> <p></p> <p>a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693</p> <p></p> <p></p> </li> <li> <p>Check your email that you registered with IBM automation for a notification of new vulnerability. </p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#42-review-cve-2020-10693-to-understand-the-remediation-options-for-the-vulnerability","title":"4.2 Review CVE-2020-10693 to understand the remediation options for the vulnerability","text":"<p>In this section, you will review the details of the critical CVE-2020-10693 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>In this lab, you will apply the iFix that is documented in the IBM security bulletin to resolve the vulnerability in the Liberty 20009 server, as reported in CVE-2020-10693.</p> <ol> <li> <p>View the CVE information for CVE-2020-10963</p> <p>a. Click the Liberty_2009_server link under the \"Server\" column to see CVE and Fix History for this Liberty server</p> <p></p> <p>b. Click on CVE-2020-10693 CVE located in the Vulnerabilities &gt; CVEs view</p> <p></p> <p>c.  The CVE information page for CVE-2020-10693 is displayed.</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level \u201cMedium (5.3)\u201d</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the Liberty server has been \u201cexposed\u201d to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation.</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> </li> <li> <p>Click on the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>The security bulletin is displayed in a new browser tab.</p> </li> <li> <p>From the Web Browser, review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2020-10693</p> <p></p> <p></p> <p>In the next section of the lab, you will apply the Interim Fix PH29942 to remediate the unresolved CVE.</p> </li> <li> <p>When you finish reviewing the security bulletin, return to the Browser tab that contains the IBM WebSphere Automation dashboard. Then return to the \u201cSecurity\u201d view</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#43-update-liberty-server-v20009-to-fix-the-vulnerability","title":"4.3 Update Liberty server v20.0.0.9 to fix the vulnerability","text":"<p>Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced into IBM WebSphere Automation in version 1.4</p> <p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you will leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to resolve one vulnerability in the Liberty Server v20.0.0.9. </p> <p>There are a couple of additional components now included in the product to support this use case. </p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the websphereSecure custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#431-navigate-to-the-server-and-unresolved-cve-to-fix","title":"4.3.1 Navigate to the Server and unresolved CVE to fix","text":"<p>OK, let's apply the recommended iFix to resolve the CVE-2020-10693 vulnerability in the Liberty server. </p> <ol> <li> <p>Notice in the IBM Automation console that Liberty20009_server is vulnerable to CVE-2020-10693.</p> <p></p> </li> <li> <p>Expand the list of unresolved CVEs. Notice CVE-2020-10693 is listed.  </p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2020-10693 </p> <p></p> <p>Now, you will fix it by applying the recommended iFix. (PH29942)</p> <p></p> </li> <li> <p>Click on Liberty_20009_server to view the list of CVEs / vulnerabilities</p> <p></p> <p>The displayed list shows both \"resolved\" and \"unresolved\" CVEs for the selected server. It also shows the \"Risk Level\" to identify the severity of the vulnerabilities, and the number of days the server has been exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click on CVE-2020-10693 to view the CVE information and affected servers</p> <p></p> <p>On the CVE Information page for CVE-2020-10693, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You will do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#432-prepare-fix","title":"4.3.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Simply select the target server to patch and the dialog shows all the affected servers known to WebSphere Automation, and lets you select the wanted fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation should be deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This can be preferable for fix packs because those are significantly larger than interim fixes, especially for traditional WebSphere / Liberty fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>The Fetch then install fix option automatically downloads the fix and then installs it after the download is complete. </p> <p>Previously fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you will download and install the recommended iFix for the CVE into the Liberty_20009_server    </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE</p> <p>Next to each affected server, there is an option to \"Prepare Fix\". </p> <p>a. Click the Prepare fix link next to Liberty_20009_server </p> <p></p> <p>b. From the Select fix page, select the PH29942 iFix. Then click the Fetch fix button. </p> <p></p> <p>This action will cause WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix has been successfully fetched from IBM Fix Central, the status will change to Ready to Install.</p> <p></p> </li> <li> <p>Install the fix to resolve the CVE</p> <p>Once the fix has been fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click on the Install fix action next to the Liberty_20009_server    </p> <p></p> <p>b. When prompted to confirm the installation, click Proceed</p> <p></p> Alert: In this lab environment, when the Install Fix action is initiated, a pop-up error dialog may be displayed that may be ignored!  If the \"Status\" field has not changed to \"Failed\", let the installation proceed to completion. <p>c. The installation may take 5 or 6 minutes to complete. Wait until you see the status change to \"Installation complete\"</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click on the ID of the action, and view the runbook.log output file. </p> <p>Common errors we have seen reported in the log is the ssh key and/or the wsa-ansible secret not properly configured in the environment.  </p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully applied the iFix to resolve the critical CVE on the Liberty_20009_server. </p> <p>In the next section of the lab, you will review the updated security posture and fix history of the Liberty server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#44-view-the-security-posture-and-fix-history-of-your-liberty-server","title":"4.4 View the security posture and Fix History of your Liberty server","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#441-fix-history","title":"4.4.1 Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations teams fix vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to be able to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> <p>In this section, you will review the security posture and fix history of the two traditional WebSphere servers used in the lab to demonstrate how WebSphere Automation manages the details so you can handle your patching SLAs with ease.</p> <p>Now that you have applied the PH29942 iFix, let\u2019s examine the updated security posture of the Liberty server.</p> <ol> <li> <p>View the Liberty_20009_server CVE Information</p> <p>a.  From the Security view in the WebSphere Automation dashboard, click on the Liberty_20009_server link located under the Server column</p> <p></p> <p>b.  Select the Information tab</p> <p></p> <p>c. From the Information view, you can see the list of Installed iFixes for the Liberty server.</p> <p></p> <p>Notice that the Fixed date for the iFixes related to the vulnerability show that it was fixed moments ago.</p> <p></p> <p>Information:</p> <p>IBM WebSphere Automation reports ALL iFixes that have been applied, regardless of when they were applied. However. It can only determine fix dates, number of days the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere server is registered with IBM WebSphere Automation.</p> <p>If the servers already had iFixes installed prior to being registered to IBM WebSphere Automation, they would be listed, but the installed date in not known and will be blank.</p> </li> <li> <p>View the Liberty_20009_server CVE Vulnerabilities details</p> <p>a.  From the Liberty_20009_server view, select the Vulnerabilities tab</p> <p></p> <p>b.  From the list of CVEs, sort by Status, and display the Resolved CVEs on top. The CVE-2020-10693 is now Resolved.</p> <p></p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server has been exposed to each vulnerability.</p> </li> <li> <p>View the Liberty_20009_server Fix History details</p> <p>a.  From the Liberty_20009_server view, select the Vulnerabilities tab</p> <p>b.  Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice there is now a record that shows that the iFix has been installed, and the date te server was patched.</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were \u201cInstalled\u201d. Next to each Fix you can view the CVEs that were resolved by that Fix, and very importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> <p>Having this record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers</p> <p>a.  Return to the Security view. Then select on the CVEs category</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, let\u2019s focus on CVE-2020-10693. This is the CVEs that was fixed in the Liberty when you applied the iFix moments ago.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b.  Locate and view the CVE-2020-10693 CVE from the current view. Sort the list of CVEs by Fixed Servers, which will list the CVEs that have been applied to the Liberty server at the top of the list.</p> <p></p> </li> <li> <p>Identify the Liberty servers that this CVE has been resolved, and potentially still unresolved.</p> <p>a. From the CVE view, filter by CVE: CVE-2020-10693</p> <p></p> <p>a.  Click on the CVE-2020-10693 link under the CVE column</p> <p></p> <p>b.  Note the Liberty_20009_server Vulnerability Status is \u201cResolved\u201d.</p> <p></p> <p>In this section you have learned how easy IBM Automation makes it for your Information technology operations teams to be responsive to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA.</p> <p>You learned how to demonstrate when the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#summary","title":"Summary","text":"<p>Congratulations! You have completed the WebSphere Automation lab.</p> <p>With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.</p> <p>IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.</p> <p>IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.</p> <p>To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#appendix-1-manual-installation-of-websphere-ifix-to-resolve-cve","title":"Appendix 1: Manual installation of WebSphere iFix to resolve CVE","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Now, you will fix it by applying the appropriate iFix.</p> <p></p> </li> <li> <p>Expand the list of unresolved CVEs. IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin. </p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p></p> <p>You can read the security bulletin here. You may be prompted to login using your IBM ID to access the content: </p> <p>https://www.ibm.com/support/pages/security-bulletin-multiple-vulnerabilities-apache-log4j-affect-ibm-websphere-application-server-and-ibm-websphere-application-server-liberty-cve-2021-4104-cve-2021-45046</p> <p>Now, you will fix it by applying the appropriate iFix. (PH42762)</p> <p></p> </li> <li> <p>First, stop the server, wait until it has stopped:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Run the following script to install the iFix:</p> <pre><code>sudo /iFix/PH42762-LOG4J/imcl_ifix_install.sh 9057\n</code></pre> <p>When prompted for the password for the ibmadmin user, enter: engageibm</p> <p></p> <p></p> </li> <li> <p>Start the server once the iFix installation has completed:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 were removed from the unresolved CVEs list for the tWAS 9.0.5.7 server.</p> <p></p> <p></p> </li> <li> <p>Also, you can see on the right under \u201cApplied iFixes\u201d the PH42762 fix is now listed as applied. </p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)","text":"<p>You can remove the iFix that was applied to confirm that the CVE-2021-44228 shows up in the unresolved CVE list.</p> <ol> <li> <p>Stop the server:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Uninstall the iFix:</p> <pre><code>sudo /iFix/PH42762-LOG4J/imcl_ifix_uninstall.sh 9057\n</code></pre> <p>When prompted for the password for the ibmadmin user, enter: engageibm</p> <p></p> </li> <li> <p>Start the server:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 are once again listed as unresolved CVEs for the tWAS 9.0.5.7 server.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#appendix-2-manual-installation-of-liberty-ifix-to-resolve-cve","title":"Appendix 2: Manual installation of Liberty iFix to resolve CVE","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#update-liberty-server-v20009-to-fix-the-vulnerability","title":"Update Liberty server v20.0.0.9 to fix the vulnerability","text":"<p>In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#updating-configurations","title":"Updating configurations","text":"<p>Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info.</p> <p>We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. </p> <p>This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE.</p> <ol> <li> <p>Edit the server.xml, using the command below:</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> </li> <li> <p>Comment out the beanValidation-2.0 feature:</p> <pre><code>&lt;!-- &lt;feature&gt;beanValidation-2.0&lt;/feature&gt; --&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and close the server.xml file.</p> <p></p> </li> <li> <p>Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically.</p> <p></p> <p>Great, you removed the vulnerability by updating the configuration.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#resolve-the-issue-by-applying-an-ifix","title":"Resolve the issue By Applying an iFix","text":"<p>However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability.</p> <ol> <li> <p>First, add back the beanValidation feature:</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> </li> <li> <p>Uncomment the beanValidation-2.0 feature:</p> <pre><code>&lt;feature&gt;beanValidation-2.0&lt;/feature&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and Close the server.xml file.</p> <p></p> </li> <li> <p>Back to the browser, make sure the vulnerability shows up again.</p> <p></p> <p></p> <p>Next, resolve the CVE by applying the recommended iFix (PH29942) documented in the security bulletin for this vulnerability. </p> <p></p> </li> <li> <p>You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server.</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\n</code></pre> </li> <li> <p>Now, apply the iFix, by running the following command.</p> <p>Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM.</p> <pre><code>sudo /iFix/PH29942/imcl_ifix_install.sh 20009\n</code></pre> <p>When prompted for the password for ibmuser, enter: engageibm</p> <p></p> <p></p> </li> <li> <p>Great, the iFix was applied. Now, start the server again:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\n</code></pre> </li> <li> <p>Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.</p> <p></p> <p></p> <p></p> </li> <li> <p>Note that the IBM Automation dashboard shows the iFix PH29942 has been applied to the Liberty_20009_server.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20Copy/#appendix-3-manual-setup-for-websphere-automation","title":"APPENDIX 3: Manual Setup for WebSphere Automation","text":"<p>This sectin is for reference only. </p> <p>The lab instructions include steps to run a provided shell script which automates the manual configuration steps below. </p> <ol> <li> <p>Create the ssh key that is used for secure communication between WebSphere Automation and the WebSphere servers</p> <pre><code>cd /home/ibmuser\n\nssh-keygen -f ~/.ssh/wsa\n</code></pre> <p>a. When prompted, enter the password as: passw0rd </p> <p>Note: That is a numeric zero in passw0rd</p> <p>This is the password you are assigning for the new ssh key that is being reated</p> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-ssh-linux-unix</p> </li> <li> <p>Copy the ssh key over to the WAS server to be monitored. In this lab the following command is used:</p> <pre><code>ssh-copy-id -i ~/.ssh/wsa ibmuser@student.demo.ibmdte.net\n</code></pre> <p>a. When prompted to continue connection, type <code>yes</code></p> <p>b. When prompted for the password for ibmuser@student.demo.ibmdte.net, type <code>engageibm</code> as the password. </p> <p>Ensure the message indicates that 1 key was added to the users key store. </p> <p>Note This password is for the operating system user: \"ibmuser\" so that the ssh key can be securly copied.  </p> <p></p> </li> <li> <p>Test the login to the WAS server from the WebSphere Automation server via ssh key with the key passphrase from the ssh key, which is passw0rd </p> <pre><code>ssh -i ~/.ssh/wsa ibmuser@student.demo.ibmdte.net\n</code></pre> <p></p> <p>a. Type <code>whoami</code> from the command line and verify the user is ibmuser</p> <p></p> <p>b. Type <code>exit</code> from the command line to close the ssh connection</p> <p></p> </li> <li> <p>Create the wsa-ansible secret that contains the key</p> <pre><code>oc create secret generic wsa-ansible \\\n--from-literal=ansible_user=ibmuser \\\n--from-literal=ansible_port=22 \\\n--from-file=ssh_private_key_file=/home/ibmuser/.ssh/wsa \\\n--from-literal=ssh_private_key_password=passw0rd\n</code></pre> <p>Note: The \"wsa-ansible\" secret contains the connection information required for WebSphere Automation to connect to the WebSphere server used in this lab. This connection is required for WebSphere Automation to ssh into WebSphere and execute Ansible playbooks to install WebSphere iFixes and Fixpacks. </p> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-websphere-automation-ssh</p> </li> <li> <p>Create a known-hosts file which will configure WebSphere Automation with a list known hosts and their public keys that WebSphere Automation will trust. </p> <pre><code>ssh-keyscan student.demo.ibmdte.net &gt;&gt; /home/ibmuser/wsa_known_hosts\n</code></pre> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-websphere-automation-ssh</p> </li> <li> <p>Create the wsa-ansible_known_hosts configMap, using the known-hosts file you just created. </p> <pre><code>oc create configmap wsa-ansible-known-hosts --from-file=known_hosts=/home/ibmuser/wsa_known_hosts\n</code></pre> <p></p> </li> <li> <p>Test the ssh connection from IBM WebSphere Automation to WAS environment, using the following commands: </p> <pre><code>MANAGER_POD=$(oc get pod -l app.kubernetes.io/component=runbook-manager -o name | head -n 1)\n\noc rsh $MANAGER_POD runcli testConnection student.demo.ibmdte.net linux\n</code></pre> <p>a. Run the <code>oc log</code> command that is outputted from the \"oc rsh\" command. </p> <p>Example:     oc logs --tail=100 -l job-name=test-connection-######     </p> <p>Note: Run the command multiple times until you see the exected output as shown below. At first, you will see messages \"waiting to start\", which can take a minute or two.    </p> <p></p> <p>b. A successful connection should look similar to this output: </p> <p></p> <p></p> </li> <li> <p>Verify the Kubernetes secret named wsa-secure-fixcentral-creds has been created in the lab environment. </p> <pre><code>oc get secret | grep wsa-secure-fixcentral-creds\n</code></pre> <p>Note: This secret contains the information required for WebSphere Automation to access IBM Fix Central to fetch WebSphere and Libery fixes.   </p> <p>Note: The wsa-secure-fixcentral-creds secret has already been created for you in the lab environment. </p> <p> </p> <p>When the secret is created, WebSphere Automation strarts two additional pods in OpenShift that are responsible for downloading WebSphere and Liberty fixes from IBM Fix Central and installing the fixes into WebSphere and Liberty servers that are registered with WebSphere Automation.  </p> <ul> <li>wsa-secure-fix-manager-*</li> <li>wsa-secure-installation-manager-*</li> </ul> </li> <li> <p>Ensure the following two pods mentioned above are created and started, using the oc get pods command below: </p> <ul> <li>wsa-secure-fix-manager-*</li> <li>wsa-secure-installation-manager-*</li> </ul> <p> </p> <pre><code>oc get pods | grep '\\&lt;fix\\&gt;\\|installation'\n</code></pre> <p>Note: These pods are only created and started once the wsa-secure-fixcentral-creds secret is created in the OCP cluster. If the credentials in the secret are updated, the wsa-secure-fix-manager-* pod will automatically be restarted by OpenShift based on the updated credentials. </p> <p></p> <p>The wsa-secure-fix-manager-* pod is responsible for downloading the fixpaks and iFixes from IBM Fix Central, using the credentials you provided in the wsa-secure-fixcentral-creds secret. </p> <p>The wsa-secure-installation-manager-* pod is responsible for running the Ansible playbooks to install the fixpaks or iFixes into the registered WebSphere or Liberty servers. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#websphere-proactive-cve-protection-and-memory-leak-remediation-observed-by-instana","title":"WebSphere proactive CVE protection and memory leak remediation observed by Instana","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#introduction-to-ibm-websphere-automation","title":"Introduction to IBM WebSphere Automation","text":"<p>IBM WebSphere Automation focuses on delivering value to existing WebSphere Application Server (WAS) environments by helping administrators reduce the cost, effort and risk of addressing common vulnerabilities, automating tasks and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>In conversations with customers, the same three concerns repeatedly come up. Organizations must keep their IT estate secure, compliant amd resilient to disruption, they must keep it running optimally, and they must reduce costs and maximize ROI.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks. It provides the following benefits:</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhanced remediation capabilities with insights and recommendations improve the speed and depth of understanding outages and anomalies as they occur.</p> </li> <li> <p>Augmented operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>With WebSphere Automation, security, business efficiency and resilience become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, while laying a solid automation foundation to support future growth.</p> <p>IBM WebSphere Automation is a stand-alone product that runs on Red Hat OpenShift. Entitlement to Red Hat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>You can deploy it virtually anywhere through containers that are supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that is designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#accessing-the-lab-environment","title":"Accessing the lab environment","text":"<p>An environment is provisioned for you for this lab session. The instructor or lab proctor can provide details for accessing the lab environment.</p> <p>The lab environment contains seven Linux VMs. </p> <p>Note: The <code>Student</code> VM is the only VM that you access directly in the lab environment.</p> <p></p> <p></p> <p>The Linux <code>Student</code> VM is the only VM that you directly interact.  The remaining VMs are the RedHat OpenShift Cluster VMs that hosts the  IBM WebSphere Automation solution.    </p> <ol> <li> <p>Access the <code>Student</code> VM in the lab environment, from your web browser. </p> <p>On the <code>Student</code> tile, click the <code>CentOS</code> screen logo to open the lab environment. </p> <p></p> </li> <li> <p>If a login screen is displayed, log in with the following credentials:</p> <p>User ID <code>ibmuser</code> </p> <p>Password <code>engageibm</code>.</p> </li> <li> <p>The desktop opens, which contains all the programs that you use (Firefox web browser, Terminal, File Explorer) during the session.</p> </li> </ol> <p></p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#tips-for-working-in-the-lab-environment","title":"Tips for working in the lab environment","text":"<ol> <li> <p>The UI allows you to fit the viewing area to fit the browser window size that you are using.</p> <p></p> </li> <li> <p>You can copy and paste text from the lab guide into the lab environment by using <code>Send Text</code> clipboard. </p> <p>)</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#10-set-up-ibm-websphere-automation-in-the-lab-environment","title":"1.0 Set up IBM WebSphere Automation in the lab environment","text":"<ol> <li> <p>Log in to the Student VM. You see the Desktop, which contains all the programs that you use (browsers, terminal) in this session.</p> <p>The login credentials for the STUDENT image are:</p> <p>User ID: ibmuser</p> <p>Password: engageibm</p> </li> </ol> <p></p> <ol> <li> <p>Clone the GitHub repo to download the lab artifacts and Linux shell scripts that are used in the lab. Then, set execute permissions for the scripts. </p> <p>a. Open a Terminal window on the VM, and ensure that you are in the home directory of the user, ibmuser:</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the Terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> <p>c. Add execute permissions to the shell sctipts in the cloned repository</p> <pre><code>find ./WAS-Automation-LabFiles -name \"*.sh\" -exec chmod +x {} \\;\n</code></pre> <p>d.  Verify the shell scripts are now executable in the two lab directories:</p> <pre><code>ls -l /home/ibmuser/WAS-Automation-LabFiles/techxchange/*\n</code></pre> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#11-overview-configuring-websphere-automation","title":"1.1 Overview - Configuring WebSphere Automation","text":"<p>The Fix Deployment capability of WebSphere Automation delivers determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation.  </p> <p>You run a Linux shell script, which automates the setup process. The script performs the following tasks:</p> <ul> <li>Create the <code>ssh key</code></li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the <code>wsa-ansible</code> secret that contains the key</li> <li>Create the <code>known_hosts</code> file</li> <li>Create the <code>wsa-secure-fixcentral-creds</code> secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <p>First, you must verify that IBM WebSphere Automation is in the \"Ready\" state. </p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#12-ensure-websphere-automation-is-ready-for-use","title":"1.2 Ensure WebSphere Automation is \"Ready\" for use","text":"<ol> <li> <p>Log in to Red Hat OpenShift CLI:</p> <p>a. Open a new Terminal window in the VM.</p> <p>b. Type <code>oc login -u ocadmin -p ibmrhocp</code> to log in to Red Hat OpenShift. </p> <p>Use the following credentials to log in: </p> <p>username: ocadmin</p> <p>password: ibmrhocp</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure that you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation ready in your environment. </p> </li> </ol> <p>Note: The output must indicate that the WSA resource <code>READY</code> state is <code>True</code> before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#13-use-the-provided-shell-script-to-setup-websphere-automation","title":"1.3 Use the provided shell script to setup WebSphere Automation","text":"<p>In this section, you run a shell script that performs the setup steps noted above, which are required to use the Fix Deployment features in IBM WebSphere Automation. </p> <ol> <li> <p>Ensure you are in directory where the shell scripts are located. </p> <pre><code>cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab1-CVE\n</code></pre> </li> <li> <p>Run the shell script to configure WebSphere Automation:</p> <pre><code>./wsa-setup.sh\n</code></pre> <p>Note: The script runs without any user interaction.  </p> </li> <li> <p>When the script completes, verify that the test-connection Ansible playbook ran successfully, as illustrated in the console output. </p> <p>You should see the message TEST PASSED, which indicates that WebSphere automation is properly configured. </p> <p></p> <p></p> <p>What if the script FAILS?</p> <p>If the script completed with \"TEST FAILED\", contact the lab instructor. </p> <p>Then, RE-RUN the script again. </p> <p>Note: you can also run the <code>oc logs --tail</code> command that is shown in the console output, which displays the entire log output from the ansible playbook. That log might provide additional insights into the error. </p> </li> </ol> <p>You have now completed the WebSphere Automation setup procedures</p> <p>If the <code>wsa-setup.sh</code> script completed with TEST PASSED, you can proceed with the lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#continue-the-lab-by-expanding-the-sections-below-as-you-progress","title":"Continue the lab by expanding the sections below, as you progress","text":""},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#section-2-accessing-the-websphere-automation-ui","title":"Section 2 - Accessing the WebSphere Automation UI","text":"Click to expand: Section 2  - Accessing the WebSphere Automation UI  ## 2.0 Accessing the WebSphere Automation UI  A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers.   For this lab, WebSphere Automation is pre-installed on an OpenShift cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.  1.  On the *Student VM*, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):       https://cp-console.apps.ocp.ibm.edu/oidc/login.jsp#/homepage       ![opening browser](./lab1-media/media/image10.png)        2.  On the `Log in to IBM Cloud Pak` page, select the **`OpenShift authentication`** as the authentication type. Then click `Log in`      ![openshift authentication](./lab1-media/media/image11.png)      **Note:** If necessary, accept all the browser security warnings and certificates. In Firefox, click **Advanced**, and then scroll down and click **Accept the risk and continue**.         3.  Enter **`ocadmin`** as username and **`ibmrhocp`** as password. And click **`Log In`**.      ![login page](./lab1-media/media/image13.png)         4.  At this point, you should be at the ***IBM Automation Welcome page***       ![welcome page](./lab1-media/media/image14.png)        5.  View the Application Runtimes that are registered with IBM Automation.      a. Click the menu icon in the upper left corner of the page.        ![notification config](./lab1-media/media/image15.png)      b. Click **`Operate`**, and then select **`Application runtimes`**.      Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that are registered with IBM Automation.        ![notification config](./lab1-media/media/image16.png)          6. The **Application runtimes \u2013 Security** page appears. There is no data displayed because no WebSphere or Liberty servers are registered yet.      ![notification config](./lab1-media/media/image16a.png)        ###  2.1 Receiving security &amp; event notifications via email  &gt; **Note: In this lab environment, we have not configured email notifications.**  Notifications are sent to a list of email addresses when a change is detected in the security or health status of one or more servers that WebSphere Automation monitors.  For security monitoring, email notifications are sent when a new security bulletin is published that affects your server inventory, when a newly tracked server is vulnerable to one or more existing CVEs, or when a security fix is successfully applied to a managed server.   For server health monitoring, email notifications are sent when an investigation into a server health issue is started, when an investigation successfully completes, or when an investigation fails to complete.   **Reference:** To review the information that is included in each email, see Example notification contents in the IBM WebSphere Automation documentation:   https://www.ibm.com/docs/en/ws-automation?topic=notifications-example-notification-contents"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#section-3-register-websphere-application-server-with-ibm-websphere-automation","title":"Section 3 - Register WebSphere Application Server with IBM WebSphere Automation","text":"Click to expand: Section 3  - Register WebSphere Application Server with IBM WebSphere Automation   ## 3.0 Register WebSphere Application Server with IBM WebSphere Automation   In this section, you run a Linux shell script to automatically register a WebSphere Application Server to IBM WebSphere Automation.   The Linux shell script obtains the necessary information as described below. Then, the script runs a `wsadmin` script to register the WebSphere Application Server.    WebSphere Application Servers and WebSphere Liberty servers are added to WebSphere Automation by registering them with the *usage metering* service.  To register your application servers with the usage metering service, it requires the following usage metering details. The script you  run gathers this information.     - **URL**: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.    - **API Key**: The token that is used to authenticate the WebSphere Application Server and Liberty servers during the registration process.    - **Usage metering certificate**: The certificate that contains the public key. This key allows a WebSphere Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.  In this section, you run the `register-was-server.sh` script to register a WebSphere Application Server, version 9.0.5.7.    1.  Minimize the browser window and open a new terminal window.       ![open terminal](./lab1-media/media/image20.png)   2. Run the `register-was-server.sh` script to register the WebSphere server with IBM WebSphere Automation      a. Change directory to the location of the script:          cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab1-CVE      b. Run the script, passing in the parameter `9057` to register the WebSphere version 9.0.5.7 server in this lab environment.           ./register-was-server.sh 9057          ![](./lab1-media/media/4310-register-server.png)      Once the script completes, you see the message indicating that the WebSphere server was successfully registered.      ![](./lab1-media/media/4310-server-registered-message.png)      At this point, the newly registered server is automatically added to the WebSphere Automation dashboard in the UI.    3. View the newly registered WebSphere server in WebSphere Automation Dashboard      a. Open the browser in the VM, and go to the tab where the WebSphere Automation dashboard is displayed.       &gt; Note: the URL is: https://cpd-websphere-automation.apps.ocp.ibm.edu/websphereauto/security      c. From the WebSphere Automation **`Security`** dashboard, confirm that the tWAS v9.0.5.7 server is registered in IBM Automation.      &gt; Note: It might take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI.       ![](./lab1-media/media/image28.png)       <pre><code>&lt;br/&gt;\n</code></pre>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#section-4-proactive-cve-protection-for-websphere-with-ibm-websphere-automation","title":"Section 4 - Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":"Click to expand: Section 4 - Proactive CVE protection for WebSphere with IBM WebSphere Automation   ## 4.0 Proactive CVE protection for WebSphere Application Server    ### 4.1 Business Context for this scenario  You are a WebSphere Administrator, part of a WebSphere Operations Team that is responsible for maintaining security compliance of the WebSphere estate in the enterprise.   A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is often a very manual and time consuming process.    ![](./lab1-media/media/image2.png)   This is where **IBM WebSphere Automation** can help\\!  With WebSphere Automation, you have:    - **Management dashboard:** A Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).    - **Automated vulnerability tracking:** Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.    - **Contextual notifications:** Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.    - **Shared, live visibility to key stakeholders:** WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.    - **Fix History:** A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues    - **Automated fix installation of Fixpaks and iFixes** to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard.   In this section, you use the IBM WebSphere Automation to demonstrate its powerful capabilities for proactive CVE protection for WebSphere.    ![](./lab1-media/media/image3.png)    ### 4.2 How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture   WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation.   The WebSphere Automation *vulnerability manager* makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers by using the WebSphere Automation UI.  When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation *CVE/PSIRT monitor* detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.  After defining an exposure mitigation plan, administrators can then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.      ### 4.3 Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities  You can view the security vulnerability status of each server in your inventory from the **Security** page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.  You can track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.  In this section of the lab, you do the following tasks:     - **Resolve known vulnerabilities in the WebSphere traditional application server**, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix that is documented in the security bulletin for this vulnerability.     - **Review the security posture and fix history of the WebSphere application server.**   After applying iFixes or Fixpaks, IBM Automation immediately updates the security information for that application server to show that the critical vulnerabilities are patched.        1.  In the browser, go to the **Security -&gt; Servers** dashboard in WebSphere Automation.      ![dashboard tWAS1](./lab1-media/media/image28.png)      You see that this server Risk Level is **10.0**, with **(+## more)** unresolved CVEs.       &gt;**Note:** Near the top of that list is the LOG4J vulnerability, known as CVE-2021-44228, with a critical score of **10**.          |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=50,50)   | TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered might be different than what is shown in the screen capture.        ### 4.3.1 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability  In this section, you review the details of the critical (10.0) **CVE-2021-44228** CVE and determine the appropriate remediation options to resolve the CVE.  You apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in **CVE-2021-44228**.  1.  Notice in the IBM Automation console that **tWAS 9.0.5.7** is vulnerable to **CVE-2021-44228**.      ![](./lab1-media/media/imagev3-32.png)    2.  View the security bulletins for the **CVE-2021-44228** Log4J vulnerability.       a.  Click **CVE-2021-44228** link under the 9057 servers **Unresolved CVEs** column.      ![](./lab1-media/media/imagev3-35.png)      From the CVE Information page that is displayed, you can see important details about this CVE.      Here you can see the following details:      - Risk Level **Critical (10)**      - Date the vulnerability was detected in the \u201c**registered**\u201d server      - Number of days the 9057 WebSphere server was **exposed** to the vulnerability      - List of affected servers that are registered with IBM WebSphere Automation      - Link to the IBM security bulletin for the CVE      &gt; **Note:** The **Days Exposed** and **date detected** are expressed from the point of time that the server is registered with IBM WebSphere Automation.      ![](./lab1-media/media/4310-cve-44228.png)      b.  Click the **View** Link to view the IBM security bulletin for this CVE.      ![](./lab1-media/media/imagev3-36.png)      c.  The security bulletin is displayed in a new browser tab.      d. Close the `site cookies` dialog box, if diplayed      e  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.      ![](./lab1-media/media/imagev3-37.png)      As you can see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips.      &gt; **Note:** The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046).      ![](./lab1-media/media/image32.png)      You can also acess the security bulletins from the **ibm.com/support** pages. You are prompted to log in by using your IBM ID to access the content from the IBM Support site.         3. Close the browser tab containing the security bulletin      4.  Return to the browser tab that contains the `IBM WebSphere Automation dashboard`. Then, return to the **`Security`** view.       ![](./lab1-media/media/imagev3-39.png)    ### 4.3.2 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability  Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced in IBM WebSphere Automation in version 1.4.  You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the **Modify WebSphere inventory** permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.  In this section, you leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as **CVE-2021-44228**.  There are a couple of additional components now included in the product to support this use case:    - **Fix manager**      The WebSphere Automation *fix manager* uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the `websphereSecure` custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.    - **Installation manager**      The WebSphere Automation *installation manager* communicates with the registered server by using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.  ### 4.3.2.1 Navigate to the Server and unresolved CVE to fix  Apply the recommended iFix to resolve the CVE-2021-44228 vulnerability.  1.  Notice in the IBM Automation console that **tWAS 9.0.5.7** is vulnerable to **CVE-2021-44228**.      ![CVE 2021 44228](./lab1-media/media/image30.png)       **Note:** The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046)       ![security bulletin info](./lab1-media/media/image32.png)       You fix it by applying the recommended iFix (PH42728).        2. Click **tWAS_9057_server** to view the list of CVEs and vulnerabilities.       ![](./lab1-media/media/image83.png)       The list displays both *resolved* and *unresolved* CVEs for the selected server. It also shows the **Risk Level** to identify the severity of the vulnerabilities, and the number of days the server was exposed to the vulnerability.       ![](./lab1-media/media/image84-a.png)  3. Click **CVE-2021-44228** to view the CVE information and affected servers.      ![](./lab1-media/media/image84.png)      On the CVE Information page for CVE-2021-44228, a list of **Affected Servers** is displayed along with the option to **Prepare fix**.       &gt;**DO NOT prepare fix yet.** You do that in the following steps.       ![](./lab1-media/media/image85.png)   ### 4.3.2.2 Prepare Fix   The *Fix Deployment* capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes.   Selection of the wanted iFix or published fix pack is exposed through the **Prepare fix** dialog, which can be found in the CVE details view. Select the target server to patch and the dialog shows all affected servers that are known to WebSphere Automation, and lets you select the desired fix.  After you select the fix, WebSphere Automation provides two options:     - **Fetch fix:**       If installation is deferred to a later time, then the **Fetch fix** option causes the fix to be downloaded and stored for later use.       This might be a preferred option for fix packs because they are significantly larger than interim fixes, especially for traditional WebSphere fix packs.    - **Fetch then install fix:**       This option automatically downloads the fix and then installs it after the download is complete.       Fetched fixes are stored within WebSphere Automation for immediate reuse.               &gt; Now you can download and install the recommended iFix for the CVE into the tWAS_9057_server.    1. Download the recommended iFix to resolve the CVE.      Next to each affected server, there is a link to **`Prepare Fix`**.       a. Click the **`Prepare fix`** link next to **tWAS_9057_server** for **CVE-2021-44228**.      ![](./lab1-media/media/image86.png)      b. From the **Select fix** page, select the **`PH42728`** iFix. Then, click **`Fetch fix`**.        |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image47.png?cropResize=50,50)   | IMPORTANT:  If the **PH42728** iFix is not listed under the **resolution** column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. WebSphere Automation only loads the meta-data for the unresolved CVEs of the registered servers.   WebSphere Automation does this by using a background process that spins up several threads. Because there are more unresolved CVEs than the number of threads loading the meta-data, it takes WebSphere Automation a couple of iterations to load all of the meta-data for the fixes.    Typically, the process completes within 8-10 minutes after the server is registered.  WebSphere Automation continues to load fix meta-data as new unresolved CVEs are detected for registered servers.      ![](./lab1-media/media/image87.png)       This action causes WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab.       The **Status** field automatically updates as the action progresses.       ![](./lab1-media/media/image88.png)      When the fix is successfully fetched from IBM Fix Central, the status changes to **Ready to Install**.      ![](./lab1-media/media/image89.png)   2. Stop the WebSphere Application Server:       a. Return to a Terminal window in the VM      b. Run the `stopServer.sh` command below           /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server -username wasadmin -password wasadmin      ![](./lab1-media/media/image89-1.png)          |         |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=50,50)   | TIP: IBM WebSphere Automation will attempt to stop the WebSphere Application Server, if the credentials areprovided in the `soap.client.props` file. <p> However, in this lab environment, the WebSphere credentials are not stored, and you must manually stop the WebSphere Application Server in order for IBM WebSphere Automation to apply the iFix that was downloaded.     3. Verify the WebSphere Application Server is stopped, using the command below:           /opt/IBM/WebSphere/AppServer9057/bin/serverStatus.sh tWAS_9057_server -username wasadmin -password wasadmin      ![](./lab1-media/media/image89-2.png)    4. Install the fix to resolve the CVE.      After the fix is successfully fetched, the action to **Install the fix** is made available next to the affected server.      a. Click **Install fix** next to **tWAS_9057_server**.      ![](./lab1-media/media/image90.png)      b. When prompted to confirm the installation, click **Proceed**.      &gt; **Note:** For this lab, **Create backup** option should be set to **off**.      c. After installation starts, a new **fix record** is created, and the installation begins.      ![](./lab1-media/media/v51-005.png)      d. The installation can take 5 or 6 minutes to complete. Wait until you see the status change to **Installation complete**.      ![](./lab1-media/media/image92.png)       &gt; **TROUBLESHOOTING TIP**     &gt;      &gt; If the installation fails, click the **ID** of the action and view the `runbook.log` output file.      &gt;     &gt;  Common errors that are reported in the log are the `ssh key` and the `wsa-ansible secret not properly configured in the environment`.       &gt;     &gt; ![](./lab1-media/media/image93.png)     &gt;     &gt; ![](./lab1-media/media/image97.png)   5. Restart the WebSphere Application Server:       a. Return to a Terminal window in the VM      b. Run the `startServer.sh` command below           /opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server      ![](./lab1-media/media/image89-3.png)           |        |           |       | ------------- |:-------------|     | ![](./lab1-media/media/image4.png?cropResize=50,50)   | TIP: IBM WebSphere Automation will START WebSphere Application Servers after it installs a fix, if and only if, IBM WebSphere Automation Stopped the server. </p><p> However, in this lab, you manually stopped WebSphere Application Server, so WebSphere Automation did NOT restart it.            **Congratulations!** You successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server.   In the next section of the lab, you review the updated security posture and fix history of the WebSphere server.      ### 4.3.3 View the security posture and Fix History of your WebSphere servers  ### Fix history  Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations team fixes vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.  Therefore, it is vital to document the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days that servers were exposed.  A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities are detected, when and how they are fixed, and how many days that servers are exposed.  In this section, you review the security posture and fix history of the two traditional WebSphere servers that are used in the lab to demonstrate how WebSphere Automation manages the details, so you can handle your patching SLAs with ease.  Since you applied the PH42762 iFix, now you can examine the updated security posture of the 9057 WebSphere Application Server.  1.  View the **tWAS_9057_server** CVE Information.      a. From the **Security** view in the WebSphere Automation dashboard, click the **tWAS_9057_server** link located under the **Server** column.      ![](./lab1-media/media/imagev3-44.png)      b.  Select the **Information** tab.      ![](./lab1-media/media/imagev3-45.png)      c.  From the **Information** view, you can see the list of Installed iFixes for the 9057 server.      ![](./lab1-media/media/imagev3-46.png)      &gt; Notice that the **Fixed date** for the iFixes that are related to the Log4J vulnerability shows that they were installed moments ago.     &gt;      &gt; However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.      |                                                |                                                                                                                                                                                                                                                                                                                           |     | ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |     | ![sign-info](./lab1-media/media/image4.png) | IBM WebSphere Automation reports ALL iFixes that were applied, regardless of when they were applied. However. It can only determine fix dates, number of days that the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere Application Server is registered with IBM WebSphere Automation. |  2.  View the **tWAS_9057_server** CVE Vulnerabilities details.      a.  From the **tWS_9057_server** view, select the **Vulnerabilities** tab.      ![](./lab1-media/media/imagev3-47.png)      b. From the list of CVEs, sort by **Status**, and display the **Resolved CVEs** on top.      ![](./lab1-media/media/imagev3-48.png)      The CVEs that are listed as **Resolved** are related to Log4J CVEs that were fixed by applying the iFix earlier; **CVE-2021-44228** being the most critical CVE listed.      As illustrated above, the **Vulnerabilities view** provides the details about when the vulnerability was detected in this specific server, and how many days the server was exposed to each vulnerability.  3.  View the **tWAS_9057_server** Fix History details.      a.  From the **tWS_9057_server** view, select the **Vulnerabilities** tab.      b. Select **Fix History**, as illustrated below:      ![](./lab1-media/media/imagev3-49.png)  4.  Notice the Fixes that were applied.      ![](./lab1-media/media/imagev3-50.png)      &gt;**Fix history** shows changes to the server. You can see the action that was taken, and in this case, the Fixes were **Installed**. Next to each Fix you can view the CVEs that were resolved by that Fix, and more importantly, the date that the Fix was applied that resolved specific vulnerabilities.  5.  You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers.      a.  Return to the **Security** view. Then, select the **CVEs** category.      ![](./lab1-media/media/imagev3-51.png)      &gt; Using this view, you can easily determine which servers are affected by specific CVEs.     &gt;       &gt; As an example, focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.     &gt;      &gt; This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.      b. View the **CVE-2021-44228** CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE.       ![](./lab1-media/media/imagev3-52.png)       In this section you learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to respond to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).      You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI.       You learned how to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.        **Congratulations!**  You completed the proactive CVE management lab for traditional WebSphere Application Servers.        </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#section-5-detect-and-trigger-investigation-of-application-memory-leak-with-ibm-websphere-automation","title":"Section 5 - Detect and trigger investigation of Application Memory Leak with IBM WebSphere Automation","text":"Click to expand: Section 5 - Detect and trigger investigation of Application Memory Leak with IBM WebSphere Automation  ## 5.0 Detect and Address Application Memory Leak with IBM WebSphere Automation and Instana  In this lab, you are going to use a traditional WebSphere Application Server registered with IBM WebSphere Automation (WSA), and monitored by Instana to drive a memory leak investigation.  You will learn how WSA can automatically:    - detect memory leaks before they cause a JVM crash    - gather problem determination (PD) information while the leak is in     progress    - analyze the Problem Determination info and produce a report which can be exported and shared with application development teams or application vendors.   ![Diagram Description automatically generated](./lab2-media/media/image2.png)  You will use a sample application which continuously adds objects to the JVM heap to create a memory leak event.  Instana will detect the event and initiate communication with WebSphere Automation to inform that a leak has been detected.   Then WebSphere Automation opens an investigation and gathers the necessary problem diagnostic information for that server.    You will see the investigation is opened and progresses though its investigation proess. These processes include:    - Memory leak detected    - Identifying server    - Collecting heap dump    - Analyzing heap dump    - Investigation complete  Upon completing the investigation, WSA provides an analysis summary which indicates the likely potential root cause of the memory leak.   In this lab, the root cause is a vector, growing unbounded, in the sample application which is being hosted by the servlet wrapper.   WSA also allows you to download all the files that you need to share with your application development team or application vendor, so that they could take the action to remediate the memory leak in the application.    ### 5.1 Installing and starting Instana agent   KLP bake this into the image and just add this to appendix.   In this section, you wil install an Instana agent in the `student` VM, where the WebSphere Application Server used in this lab is installed.    Using the Instana UI, you can select options for installing the agent, such as the `agent mode`, `agent runtime`, and `installation mode`. Doing so, produces a curl command that you run from a Terminal window, to install the Linux agent.   In this lab, we have provided a simple Linux shell script that installs the Linux agent and configures a `WebSphere` infrastructure zone for monitoring WebSphere Application Server.   1.  Install the Instana Linux agent on the Student VM      a.  Open a Terminal window.      b. Change to the directory where the script is located           cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak      c. Run the following script to install the instana agent          ./klp-install-instana-agent.sh      ![](./lab2-media/media/4310-install-instana-agant.png)       ![](./lab2-media/media/4310-restarted-instana.png)      The Instana agent is installed in **/opt/instana/agent** directory.      The script also defined an Instana Infrastructure Zone for WebSphere by enabling the Instana `Hardware &amp; Zone plugin settings` as illustrated below:        ![Graphical user interface, text Description automatically  generated](./lab2-media/media/image24.png)      &gt; For reference purposes only, Instana's configuration file is located here: `/opt/instana/agent/etc/instana/configuration.yaml`       Lastly, the script restarted the Instana agent with the updated configuration.        ![](./lab2-media/media/4310-restarted-instana.png)   2. Login to the Instana UI      a.  From the web browser, open a new window and click the `Instana     bookmark` to access Instana page.      ![Graphical user interface, application, Word Description  automatically generated](./lab2-media/media/image21.png)       The login credentials are:       &gt; E-Mail: **admin@instana.local**       &gt; Password: **qJgN6hS6sE**  3.  Verify the Instana agent installation      &gt; Note: after the agent is started, it might take a few minutes for the agent to sync with Instana server.      a. Click on the `Infrastructure` icon on the left navigation bar.       You will see the `WebSphere` infrastructure zone that was configured when you installed the Instana agent using the Linux script.        ![](./lab2-media/media/4310-infrastructure-zone.png)         b. Click `Time Rage` dropdown button, select `Last 5 minutes` and click `Live`.      ![A screenshot of a computer Description automatically generated with medium confidence](./lab2-media/media/image28.png)      The Istana agent is now set to monitor the changes in 5 minutes interval, the agent installation is now completed.   ### 5.2 Configure WebSphere Automation integration with Instana and WebSphere Servers  WebSphere Automation (WSA) communicates with Instana to receive real-time Instana alerts.   WSA also accesses the VMs where registered WebSphere servers are hosted to collect problem diagnostic information.   To do so, a secure ssh connection must be configured between the Instana server and the VM hosting WebSphere Application Servers.   -----------------------------------------------------------  In this lab, you will run a simple Linux shell script that configures and validates the secure SSH connection,  ----------------------------------------------------------  1. Configure the secure ssh connection between Instana server and the Linux Student VM      a. Return to the Terminal window in the Student VM.      b. Ensure you are in the directory where the script is located          cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak      c. Run the following script that configures the secure ssh connection and restarts the Instana server.          ./klp-instana-setup.sh        c. Ensure the script completed with the `TEST PASSED` message.       When the script completes the ssh configuration, it tests the secure connection. If the connection is properly configured, the `TEST PASSED` message is displayed.       If the test passes, you can continue with the lab.      ![](./lab2-media/media/4310-setup-instana-ssh.png)   ### 5.3 Configure Instana for memory leak alert  Configuring Instana to create alerts is outside the scope of this lab.  The Instana configuration has already been performed, as required for the lab.   However, for your reference, the detailed steps for configuring Instana alerts for WebSphere Application Server is docuemnted in **`Appendix A`** of this lab guide.   The high-level Instana configuration for the memory leak alert includes:    - create a custom payload   - create an alert channel   - create a custom event   - create an alert      1.  View the `Custom payload` that was created for the lab      Adding a custom payload to your alert notifications enables you to use Instana alerts more efficiently.      a. From the Instana page, go to **`Settings &gt; Team Settings`**\u00a0page,     under\u00a0**`Events &amp; Alerts`**. Then click\u00a0**`Custom Payload`**.      b. You see the custom payload that is configred for the lab.      In our case, alert notifications include a custom payload based on the automatically detected PID of the internal Process ID of the processes being monitored.       ![Graphical user interface, application Description automatically generated](./lab2-media/media/4310-custom-payload-created.png)  2.  View the `alert channel` that was created for the lab      An Alert Channel is a mechanism that is used to get Events out of Instana and into another system when Events are trigger. There are a variety of Alert Channels including email notifications, slack, Watson AIOps, and more.      a.  On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**, click\u00a0**`Alert Channels`**.      b. You see the alert channel named `WebSphere Automation Healing Webhook` that is configured for the lab.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/4310-alert-channel-created.png)   3.  View the `custom event` that was created for the lab      A Custom Event enables you to create issues or incidents based on an individual metric of any given entity.      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Events`**.       b. You see the custom event named `Memory Usage High` that was configured for the lab.        ![Graphical user interface, application Description automatically  generated](./lab2-media/media/4310-custom-event-created.png)   4.  View the  `alert` that was creatd for the lab      An Alert is raised when an `event` has triggered, such as `high memory usage over 80% for some period`.       a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Alerts`**      b. You see the Alert named `WbSphere Automation Healing Memory Leak` that was configured for the lab.       ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/4310-alert-created.png)   ### 5.4 WebSphere memory leak check with WebSphere Automation  In this section, you run a script to create a memory leak incident for an application running in a WebSphere Application server instance which is already registered in WebSphere Automation.   When WebSphere Automation detects the memory leak, it automatically conducts the analysis to identify the root cause.  1.  Run the following Linux shell script to install a memory leak application in WebSphere Application Server, which will also restart the WebSphere application server to pick up the changes.       a. From a Terminal window, ensure you are in the directory that where the script is located          cd /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak      b. Run the command below to install the memory leak app in the WebSphere Application Server:          ./klp-tWAS_configure_MLApp.sh      ![](./lab2-media/media/4310-install-MLapp-script.png)  2.  Login to WebSphere Automation, if you are not already logged in      a.  On the *Student VM*, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):       https://cp-console.apps.ocp.ibm.edu/oidc/login.jsp#/homepage       ![opening browser](./lab1-media/media/image10.png)            b.  On the `Log in to IBM Cloud Pak` page, select the **`OpenShift authentication`** as the authentication type. Then click `Log in`      ![openshift authentication](./lab1-media/media/image11.png)      **Note:** If necessary, accept all the browser security warnings and certificates. In Firefox, click **Advanced**, and then scroll down and click **Accept the risk and continue**.             c.  Enter **`ocadmin`** as username and **`ibmrhocp`** as password. And click **`Log In`**.      ![login page](./lab1-media/media/image13.png)             d.  At this point, you should be at the ***IBM Automation Welcome page***       ![welcome page](./lab1-media/media/image14.png)        3.  Go to the `Application Runtimes` which shows the WebSphere servers registered with IBM Automation.      a. Click the menu icon in the upper left corner of the page.        ![notification config](./lab1-media/media/image15.png)      b. Click **`Operate`**, and then select **`Application runtimes`**.      Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that are registered with IBM Automation.        ![notification config](./lab1-media/media/image16.png)               4.  In the WebSphere Automation UI, click on the **`Health`** icon.      The `Health` section is where you view and analyze server health problems.       ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image55.png)      Since all the application are working fine at this time, you do not see any health investigations on the Health page yet.      ![Graphical user interface, text, application Description   automatically generated](./lab2-media/media/image56.png)  5.  In this lab, you can also monitor the WebSphere application server     memory change in Instana.      a. In **Instana administration console**, click **`Infrastructure`** icon, click         **`Comparison Table`**, select **`JVMs`** from the dropdown, and click **`bootstrap WAS90.SERV1.`**      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image57.png)      As you can see, currently there is not any issue with the WAS server.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image58.png)  6. Set the `Time Range` to `Last 5 minutes` and click `Live` to see the current state      ![](./lab2-media/media/4310-set-live-5min.png)   7.  From the Terminal window, run the provided script which will run a sample memory leak application in WebSphere. Instana will immediately show the significant increase in JVM heap usage, which will create an application memory leak event.          /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak/klp-curl_MLAPP_add_was.sh      The script output is showing like this:       <p>[ibmuser@student ~]$ /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak/klp-curl_MLApp_add_was.sh</p> <p>Increased heap usage by 25MB</p> <p>Increased heap usage by 50MB</p> <p>Increased heap usage by 75MB</p> <p>Increased heap usage by 100MB</p> <p>Increased heap usage by 125MB</p> <p>Increased heap usage by 150MB</p> <p>Increased heap usage by 175MB</p> <p>Increased heap usage by 200MB</p> <p>Increased heap usage by 225MB</p> <p>Increased heap usage by 250MB</p> <p>Increased heap usage by 275MB</p> <p>Increased heap usage by 300MB</p> <p>Increased heap usage by 325MB</p>   8.  In the Instana page, you can see that the memory is increasing steadily, and one issue is detected.      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image59.png)  9.  Go back to the WebSphere Automation UI. You see that WebSphere Automation has received the Memory leak alert and activate its investigation on the issue.       Initially you might see the Server `Not identified yet` status and soon you see the server name is identified.       ![Graphical user interface, application Description automatically generated](./lab2-media/media/image60.png)      a. Click the **`Investigating`** link to view its details.      ![Graphical user interface, text Description automaticallygenerated](./lab2-media/media/image61.png)  10. The Investigating section lists the problem, status, Server, Host     and Cell information, why the investigation is started and the     investigation history.       a. Click the **View history** dropdown to see current investigation activities      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image62.png)      The WSA memory leak investigation activities include:      - Memory leak detected     - Identifying server     - Collecting heap dump     - Analyzing heap dump     - Investigation complete      The screenshot below shows that the investigation is in process.      ![Graphical user interface, application Description automaticallygenerated](./lab2-media/media/image63.png)   11. After a few minutes, the WebSphere Automation investigation will show `Investigation Complete`. You can see the analysis summary which points to the root cause of the issue.      ![Investigation complete](./lab2-media/media/4310-investigation-complete.png)      You can also click **`Download all files`** to get the analysis     reports, heap dumps and WebSphere Automation runbooks on your workstation.      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image65.png)      ![Graphical user interface, text, application Description automatically generated](./lab2-media/media/image66.png)      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image67.png)      ![Graphical user interface, text, application, email Description automatically generated](./lab2-media/media/image68.png)   12. you can run a script to reduce the heap usage and then stop the WAS     server with the commands:          /home/ibmuser/WAS-Automation-LabFiles/techxchange/lab2-MemoryLeak/klp-curl_MLAPP_removeLast.sh          /opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server -username wasadmin -password wasadmin            **Congratulations!** You have completed the WebSphere Automation Memory Leak Detection lab.   <p></p>"},{"location":"1597-WebSphere_Automation/archived/README%20-%20lab%20works%20but%20needs%20sections%20removed/#appendix-a-detailed-steps-to-configure-instana-for-memory-leak-alert","title":"Appendix A: Detailed steps to configure Instana for memory leak alert","text":"Click to expand: Appendix A: Detailed steps to configure Instana for memory leak alert   This section describes the steps to configure Instana for the memory leak alert to be used by WebSphere Automation (WSA).    You will use the Instana administrative console UI to complete the following activities.  The actives include:     - create a custom payload   - create an alert channel   - create a custom event   - create an alert      1.  Create a custom payload.      Adding a custom payload to your alert notifications enables you to use Instana alerts more efficiently.      You can create a custom payload by using the Instana administrative console or using the Instana API, in the lab, you are using the Instana administrative console.      a. From the Instana page, go to **`Settings &gt; Team Settings`**\u00a0page,     under\u00a0**`Events &amp; Alerts`**. Then click\u00a0**`Custom Payload`**.      ![Graphical user interface, text, application, chat or text message  Description automatically generated](./lab2-media/media/image32.png)      b. In the\u00a0**`Key`**\u00a0field, type\u00a0**`PID`**, do not use any other value for the key. Set the\u00a0**`Value type`**\u00a0to\u00a0**`Dynamic`**. In     the\u00a0**`Value`**\u00a0field, click\u00a0**`Select Tag`**\u00a0and select\u00a0**`Internal -     Process ID`**, then click\u00a0**`Save`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image33.png)  2.  Gather the WSA information required to set up the Alert Channel.      a. From the Terminal window, run the following **oc** commands to         get the **Webhook URL**\u00a0for WebSphere Automation\u00a0installation.          oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443          oc project websphere-automation          oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak      Your outputs look like this       <p>[ibmuser@student ~]$ oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443</p> <p>Login successful.</p> <p>You have access to 66 projects, the list has been suppressed. You can list all projects with 'oc projects'</p> <p>Using project \"websphere-automation\".</p> <p>[ibmuser@student ~]$ oc project websphere-automation</p> <p>Already on project \"websphere-automation\" on server \"https://api.demo.ibmdte.net:6443\".</p> <p>[ibmuser@student ~]$ oc get route cpd -o jsonpath=https://{.spec.host}/websphereauto/health/webhooks/instana/memleak</p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak</p>       The WebSphere Automation Webhook URL is: **https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak**, you will use it later.      b. Run the following oc command to get the token\u00a0for WebSphere     Automation\u00a0installation.          oc get secret -o jsonpath='{.data.token}' wsa-health-webhooks-apis-sa-generated-token | base64 -d      The output is shown below, you will use the token value later, when you create the alert channel.        <p>[ibmuser@student ~]$ oc get secret -o jsonpath='{.data.token}' wsa-health-webhooks-apis-sa-generated-token | base64 -d</p> <p>eyJhbGciOiJSUzI1NiIsImtpZCI6InJ1YTJ4VU1JdnRkemdlcFM1M0habGtTcXVuM1hlZlBrY19UUl82QWRWc0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3ZWJzcGhlcmUtYXV0b21hdGlvbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ3c2EtaGVhbHRoLXdlYmhvb2tzLWFwaXMtc2EtdG9rZW4tc3R3bW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NhLWhlYWx0aC13ZWJob29rcy1hcGlzLXNhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzcxNjBjZmYtMTUwNy00MWYyLWFlODgtYjg5MjcxZjJlNzlmIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OndlYnNwaGVyZS1hdXRvbWF0aW9uOndzYS1oZWFsdGgtd2ViaG9va3MtYXBpcy1zYSJ9.TVQfRO6E2ZTa4BBSvVgiv-74gbhEG-BVOBu0WaUFG_FBRJsplT6qr_trcsrvyNL9BVrF3kGd4oCqCos8HQGoIO0wEt7DsyePEbIRwL_vn8Jyr_qBr7cHrbWhu4y6EMWCObDWQdZRUsJqtgSLxtTzYqSf6upo_uQczjD5waWLX3gZbeeh5GcyNctFaQPpp_neM6HY-gZJxCSm8o7XmNB1Zcxg-F6ehhdf-0uXDXGYuBKsouWpBatERwBoVL3JgWQTPDUeIJApH9EOlO9LDieb8gaJDbWVB4b1ZsIWdlJg_F5pbWbapRuM8aAlf0HOxCaV84zTifK7J5R2NBf9xxeqrCqMpeSxfR5_Heh9WIl1lviKVn3qeS6aktj6duyu_5lpHw6RQjArcUk5NCxfe7hGS64BaISEbNdfrcYTNqEKeiNmydEuX7PpJaJxHBkmYYbWnZ0BrMaqQ1kUlTcvACs5FsNmbBQ3MOt3hin8dDqC9A1mFA_KlD1Oa1suhuY0DB_8tGwhKsIxFxY9pbKXhmqRl__7oueFxuFxxfvPWanL0WzRsoTJShyhcO6K3oyZPJWC4Cr2I42qo_g_Lth7gBIYRdzFJ63xpNgGUDStTXXcMkfMnm8v-lo5qzsezdgYBb6l152zcS6dA7Ld3502zIpnMx6ZGQadDL8uOSZbK-2CRU0</p>   3.  Create an alert channel.      To create an alert channel by using the Instana administrative  console,      a.  On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**, click\u00a0**`Alert Channels`**.      ![Graphical user interface, application Description automatically generated](./lab2-media/media/image34.png)      b. Click\u00a0**`Add Alert Channel`**\u00a0and select\u00a0**`Generic Webhook`**.      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image35.png)      c. On the\u00a0Create Generic **Webhook Alert Channel**\u00a0page, enter the name as `WebSphere Automation Healing Webhook` in the\u00a0**`Name`**\u00a0field      d. Enter the\u00a0**`Webhook URL`**\u00a0you have for\u00a0WebSphere     Automation\u00a0installation.          https://cpd-websphere-automation.apps.demo.ibmdte.net/websphereauto/health/webhooks/instana/memleak      ![Graphical user interface, text, application, email, Teams  Description automatically generated](./lab2-media/media/image36.png)      e. Under\u00a0**`Custom HTTP Request Headers`**, click\u00a0**`Add Header`**.      ![Graphical user interface, text, application, email, website Description automatically generated](./lab2-media/media/image37.png)      f. Create the following two `request headers`. Then click **`Test Channel`**.       Key Value Content-Type application/json Authorization Token value you get with the oc command in previous step         ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image38.png)       g. Be sure you clicked **`Test Channel`** to test the channel before you proceed.       You should see the message showing the channel was successfully triggered.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image39.png)  4.  After verifying the channel, click **`Create`** to create it.      The alert channel is created.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image40.png)  5.  Create a `custom event`      A Custom Event enables you to create issues or incidents based on an individual metric of any given entity.      To create a custom event by using the Instana administrative console:      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Events`**, then click **`New Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image41.png)      b. Create a custom event named \u201c**`Memory Usage High`**\u201d. Set its parameters as shown below.       **Note:** Refer to screenshot below!      `1. Event Details`       - Name: Memory Usage High       - Description: Memory usage over 80%       - Issue Severity: Warning       - Grace Period: 90 s      `2. Condition`       - Source: Built-in metrics       - Entity type: JVM       - Metric: Memory &gt; Used percentage       - Time window: 10 s       - Aggregation: max       - Operator: &gt;=       - Percentage: 80      `3. Scope`       -  Apply on (required): All available entities       ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image42.png)      c. Click **`Create`** to create the new custom event.  1.  Create an `alert`.      An Alert is raised when an event has triggered, such as high memory usage over 80% for some period.       To create an alert by using the Instana administrative console,      a. On the\u00a0Team Settings\u00a0page, under\u00a0**`Events &amp; Alerts`**,     click\u00a0**`Alerts`**, then click **`New Alert`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image43.png)      b. In the\u00a0**`Name`**\u00a0field, type a name for the alert as: **`WebSphere Automation Healing Memory Leak`**.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image44.png)      c. In the\u00a0**`Events`**\u00a0menu, select\u00a0**`Alert on Event(s)`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image45.png)      d. In the\u00a0**`Events`**\u00a0section, click\u00a0**`Add Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image46.png)      e. In the\u00a0`Add Events\u00a0window`, enter **`memory usage h`** in the search box and select\u00a0**`Memory Usage High`**. You can filter the list by using a keyword (for example,\u00a0leak) to help find the entry in the list.      Click\u00a0**`Add 1 Event`**.      ![Graphical user interface, application Description automatically  generated](./lab2-media/media/image47.png)      f. Add two more events: **`Garbage collection activity high** (for JVM)` and **`Memory leak** (for JVM)`.      ![Graphical user interface, text, application, email Description  automatically generated](./lab2-media/media/image48.png)      The event list updated:      ![Graphical user interface, text, application Description  automatically generated](./lab2-media/media/image49.png)      g.  In the\u00a0**`Scope`**\u00a0menu, select **`All available entities`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image50.png)      h.  Under\u00a0**`Alerting`**, click\u00a0**`Add Alert Channel`**, select the alert channel that you created previously. Then click\u00a0**`Add 1 Channel`**.      ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image51.png)      ![Graphical user interface, application Description automatically&gt; generated](./lab2-media/media/image52.png)      i. Click\u00a0**`Create`**.      ![Graphical user interface, application, Teams Description  automatically generated](./lab2-media/media/image53.png)      The alert is created.       ![Graphical user interface, application Description automatically   generated](./lab2-media/media/image54.png)    **Now the Instana configuration for memory leak alert is completed**"},{"location":"1597-WebSphere_Automation/archived/README-10.7/","title":"Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":""},{"location":"1597-WebSphere_Automation/archived/README-10.7/#proactive-cve-protection-for-websphere-with-ibm-websphere-automation","title":"Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":"<p>Last updated: September 2022</p> <p>Duration: 90 mins</p> <p>Need support? Contact Kevin Postreich</p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#introduction-to-websphere-automation","title":"Introduction to WebSphere Automation","text":"<p>IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks.</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur.</p> </li> <li> <p>Augment the operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth.</p> <p>IBM WebSphere Automation is a stand-alone product that runs on RedHat OpenShift. Entitlement to RedHat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#business-context","title":"Business Context","text":"<p>You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below.</p> <p>Today (as-is):</p> <ol> <li> <p>IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin.</p> </li> <li> <p>You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions.</p> </li> <li> <p>Generally, WAS inventory is maintained in spreadsheets.</p> </li> <li> <p>Based on that, you check if this CVE applies to your managed inventory (Spreadsheet)</p> </li> <li> <p>You determine if an APAR / Fix Pack upgrade should be applied to    existing environment</p> </li> <li> <p>You deploy the fix to the impacted environments</p> </li> <li> <p>You update the WAS inventory (Spreadsheet) and provide up-to-date    reports to audit and compliance teams</p> </li> </ol> <p>As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc</p> <p></p> <p>Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help!</p> <p>You would like to have:</p> <ul> <li> <p>Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).</p> </li> <li> <p>Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.</p> </li> <li> <p>Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.</p> </li> <li> <p>Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.</p> </li> <li> <p>Fix History: A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues</p> </li> <li> <p>Automated fix installation of Fixpaks and iFixes to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard. </p> </li> </ul> <p>In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance.</p> <p>At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. </p> <p>You will gain the necessary insights into Fix History to help operations teams demonstrate they are meeting patching SLAs, which are very common in large enterprises. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.</p> <p>You will use the one-click Fix Deployment capability of WebSphere Automation 1.4 to automatically determine which APARs and interim fixes to install to resolve a specific vulnerability, and to download and deploy the fixes. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#accessing-and-starting-the-environment","title":"Accessing and starting the environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575</p> <ol> <li> <p>When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen:</p> <p></p> <p>WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs.</p> <p></p> </li> <li> <p>If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize.</p> <p></p> <p> </p> </li> <li> <p>You will be working on the STUDENT VM only. </p> <p>All the WebSphere images and iFixes required for the lab are pre-installed:</p> <ul> <li> <p>/opt/IBM/WebSphere/Liberty20009/</p> </li> <li> <p>/opt/IBM/WebSphere/AppServer9057/</p> </li> </ul> <p></p> </li> <li> <p>Click the screen representing the STUDENT VM</p> <p></p> <p></p> </li> <li> <p>Once you log in to the Student VM you will see the Desktop, which     contains all the programs that you will be using (browsers, terminal, etc.)</p> <p>The login credentials for the STUDENT\u201d image is:</p> <ul> <li> <p>User ID: ibmuser</p> </li> <li> <p>Password: engageibm!</p> </li> </ul> <p></p> <p></p> <p></p> </li> <li> <p>You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.</p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#how-ibm-websphere-automation-automatically-manages-your-websphere-and-liberty-server-security-posture","title":"How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture","text":"<p>WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation. </p> <p>The WebSphere Automation vulnerability manager makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers using the WebSphere Automation UI.</p> <p>When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation CVE/PSIRT monitor detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.</p> <p>After defining an exposure mitigation plan, administrators then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.</p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#clone-the-git-repository-used-for-this-lab-and-explore-the-contents","title":"Clone the Git repository used for this lab and explore the contents","text":"<ol> <li> <p>Clone the GitHub repo with the lab artifacts, then run the following command on your terminal:</p> <p>a. Open a Terminal window on the VM, and ensure you are in the home directory of the user \u201cibmuser\u201d</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#required-websphere-automation-setup","title":"REQUIRED: WebSphere Automation setup","text":"<p>The Fix Deployment capability of WebSphere Automation 1.4 delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation. You will do these steps in this section of the lab, to become familiar with configuring IBM WebSphere Automation. </p> <ul> <li>Create the ssh key</li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the wsa-ansible secret that contains the key</li> <li>Create the known_hosts file</li> <li>Create the wsa-secure-fixcentral-creds secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <ol> <li> <p>Login to OpenShift CLI</p> <p>a. Open a new Terminal window in the VM</p> <p>b.  Type <code>oc login -u ibmadmin -p engageibm</code> to login to OpenShift. </p> <p>Use the following credentials to login: </p> <p>username: ibmuser</p> <p>password: engageibm</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation is READY in your environment. </p> </li> </ol> <p>Note: The output must state that the WSA resource is ready before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre> <ol> <li> <p>Create the ssh key that is used for secure communication between WebSphere Automation and the WebSphere servers</p> <pre><code>cd /home/ibmuser\n\nssh-keygen -f ~/.ssh/wsa\n</code></pre> <p>a. When prompted, enter the password as: passw0rd </p> <p>Note: That is a numeric zero in passw0rd</p> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-ssh-linux-unix</p> </li> <li> <p>Copy the ssh key over to the WAS server to be monitored. In this lab the following command is used:</p> <pre><code>ssh-copy-id -i ~/.ssh/wsa ibmuser@student.demo.ibmdte.net\n</code></pre> <p>a. When prompted to continue connection, type <code>yes</code></p> <p>b. When prompted for the password for ibmuser@student.demo.ibmdte.net, type <code>engageibm!</code> as the password. </p> <p>Ensure the message indicates that 1 key was added to the users key store. </p> <p></p> </li> <li> <p>Test the login to the WAS server from the WebSphere Automation server via ssh key with the key passphrase from the ssh key, which is set to passw0rd. </p> <pre><code>ssh -i ~/.ssh/wsa ibmuser@student.demo.ibmdte.net\n</code></pre> <p></p> <p>a. Type <code>whoami</code> from the command line and verify the user is ibmuser</p> <p></p> <p>b. Type <code>exit</code> from the command line to close the ssh connection</p> <p></p> </li> <li> <p>Create the wsa-ansible secret that contains the key</p> <pre><code>oc create secret generic wsa-ansible \\\n--from-literal=ansible_user=ibmuser \\\n--from-literal=ansible_port=22 \\\n--from-file=ssh_private_key_file=/home/ibmuser/.ssh/wsa \\\n--from-literal=ssh_private_key_password=passw0rd\n</code></pre> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-websphere-automation-ssh</p> </li> <li> <p>Create a known-hosts file which will configure WebSphere Automation with a list known hosts and their public keys that WebSphere Automation will trust. </p> <pre><code>ssh-keyscan student.demo.ibmdte.net &gt;&gt; /home/ibmuser/wsa_known_hosts\n</code></pre> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-websphere-automation-ssh</p> </li> <li> <p>Create the wsa-ansible_known_hosts configMap, using the known-hosts file you just created. </p> <pre><code>oc create configmap wsa-ansible-known-hosts --from-file=known_hosts=/home/ibmuser/wsa_known_hosts\n</code></pre> <p></p> </li> <li> <p>Test the ssh connection from IBM WebSphere Automation to WAS environment, using the following commands: </p> <pre><code>MANAGER_POD=$(oc get pod -l app.kubernetes.io/component=runbook-manager -o name | head -n 1)\n\noc rsh $MANAGER_POD runcli testConnection student.demo.ibmdte.net linux\n</code></pre> <p>a. Run the <code>oc log</code> command that is outputted from the \"oc rsh\" command. </p> <p>Example:     oc logs --tail=100 -l job-name=test-connection-######     </p> <p>Note: Run the command multiple times until you see the exected output as shown below.    </p> <p></p> <p>b. A successful connection should look similar to this output: </p> <p></p> <p></p> </li> <li> <p>Create the wsa-secure-fixcentral-creds secret that contains the credentials to access IBM Fix Central. </p> <p>Note!  The command for creating the Kubernetes secret contains sensitive information and cannot be shared in this public document.</p> <p>The command to use is provided by the IBM instructor.  </p> <p>IBMers and IBM lab Instructors: The command to run for creating the secret can be obtained from IBM BOX: https://ibm.box.com/v/WSLab-Secret-Details</p> <p>Or, contact the lab owner, Kevin Postreich (IBM)</p> <p>email:  kevinlp@us.ibm.com</p> <p>IBM slack: @kevinlp</p> <p>Syntax for the command is shown below.  YOU MUST OBTAIN THE ACTUAL COMMAND FROM THE LAB INSTRUCTOR</p> <pre><code>oc create secret generic &lt;NAME_OF_SECRET&gt; --from-literal=user=&lt;USER&gt; --from-literal=password=&lt;PASSWORD&gt;\n</code></pre> IMPORTANT:  DO NOT CONTINUE TO THE NEXT STEP UNTIL THE SECRET HAS BEEN SUCCESSFULLY CREATED! </li> <li> <p>Wait for the following two pods to be created and started, using the oc get pods command below: </p> <ul> <li>wsa-secure-fix-manager-*</li> <li>wsa-secure-installation-manager-*</li> </ul> <p> </p> <pre><code>oc get pods | grep '\\&lt;fix\\&gt;\\|installation'\n</code></pre> <p>Note: It will take a few minutes for both pods to be created and listed in the <code>oc get pods</code> command. It will also take a couple of minutes for the ods to get to the running state. These pods are only created and started once the wsa-secure-fixcentral-creds secret is created in the OCP cluster. </p> <p></p> <p>The wsa-secure-fix-manager-* pod is responsible for downloading the fixpaks and iFixes from IBM Fix Central, using the credentials you provided in the wsa-secure-fixcentral-creds secret. </p> <p>The wsa-secure-installation-manager-* pod is responsible for running the Ansible playbooks to install the fixpaks or iFixes into the registered WebSphere or Liberty servers. </p> <p></p> </li> </ol> <p>You have now completed the custom configuration required for this lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#part-1-receiving-vulnerability-notifications","title":"Part 1: Receiving vulnerability notifications","text":""},{"location":"1597-WebSphere_Automation/archived/README-10.7/#accessing-the-websphere-automation-ui","title":"Accessing the WebSphere Automation UI","text":"<p>A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications.</p> <p>WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage.</p> <p>For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.</p> <ol> <li> <p>On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \"Secure Connection Failed\" or  \"502 Gateway Error\" accessing the WebSphere Automation URL, please wait a few minutes and retry. </p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/zen/#/homepage</p> <p></p> <p></p> </li> <li> <p>On the login page, select the OpenShift authentication as the    authentication type.</p> <p>Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. </p> <p></p> <p>Note: If necessary, accept all the warnings and certificates.  Depending on your browser, you might have to scroll down to permit  access.</p> <p></p> </li> <li> <p>Select htpasswd as the login selection</p> <p></p> <p></p> </li> <li> <p>Enter ibmadmin as username and engageibm as password. And click Log In.</p> <p></p> <p></p> <p>If the \"IBM Cloudpak | Administration\" page appears, navigate to the IBM Automation page using the sub-steps below. Otherwise continue with the next step, as you should already be at the IBM Automation page.  </p> <p></p> <p>a. In the upper right corner, click on the cloudpak switcher icon</p> <p></p> <p>b. Select IBM Automation (WebSphere Automation) from the menu</p> <p></p> </li> <li> <p>At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>View the Application Runtimes that have been registered with IBM Automation</p> <p>a. Click on theNavigation Menu icon located at the upper left corner of the page</p> <p></p> <p>b. Click Operate, and then click Application runtimes.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation</p> <p></p> <p></p> </li> <li> <p>The Application runtimes \u2013 Security page appears. There should be no data since there not any WebSphere / Liberty servers registered yet.</p> <p></p> <p></p> </li> <li> <p>Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs.</p> <p>a. Select the Notifications menu item from the navigation list.</p> <p>b. Click on the Email addresses tab, to add your email address where notifications of new CVEs will be delivered</p> <p></p> <p></p> </li> <li> <p>The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities.</p> <p>a. Click the Add button</p> <p>b. Enter your email address</p> <p>c. Click Save</p> <p></p> </li> </ol> <p>Great! Your email is configured to receive security notifications.</p> <p>In the next section, you will register servers to WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#part-2-getting-configuration-parameters-needed-to-register-websphere-liberty-servers-to-ibm-automation","title":"PART 2: Getting configuration parameters needed to register WebSphere / Liberty servers to IBM Automation","text":"<p>Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service.</p> <p>To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details:</p> <ul> <li> <p>URL: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.</p> </li> <li> <p>API Key: The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process.</p> </li> <li> <p>Usage metering certificate: The certificate that contains the public key. This key allows a Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.</p> </li> </ul> <p>In this section, you will get these configuration parameters that will be used to register application servers.</p> <ol> <li> <p>Return to the desktop and open a new terminal window.</p> <p></p> <p></p> </li> <li> <p>Login to the OpenShift Cluster using the oc CLI command shown below, if you are not already logged in:</p> <pre><code>oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443\n</code></pre> <p></p> <p></p> </li> <li> <p>Make sure that the project you are working on is websphere-automation:</p> <pre><code>oc project websphere-automation\n</code></pre> <p></p> <p></p> </li> <li> <p>Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file  \u201c/opt/IBM/WebSphere/metering-url.txt\u201d</p> <pre><code>echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi &gt; /opt/IBM/WebSphere/metering-url.txt\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the URL was captured.</p> <pre><code>cat /opt/IBM/WebSphere/metering-url.txt\n</code></pre> <p></p> <p></p> </li> <li> <p>Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d</p> <pre><code>oc -n websphere-automation get secret wsa-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.wsa-secure-metering-apis-sa}' | base64 -d &gt; /opt/IBM/WebSphere/api-key.txt; echo &gt;&gt; /opt/IBM/WebSphere/api-key.txt\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the api-key (token) was captured.</p> <pre><code>cat /opt/IBM/WebSphere/api-key.txt\n</code></pre> <p></p> <p></p> </li> <li> <p>Finally, get the Server certificate that is used for SSL handshake between the Liberty servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d</p> <pre><code>oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d &gt; /opt/IBM/WebSphere/cacert.pem\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the api-key (token) was captured.</p> <pre><code>cat /opt/IBM/WebSphere/cacert.pem\n</code></pre> <p></p> </li> </ol> <p>Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation.</p> For more information:  For additional details, view the section titled: Setting up security monitoring in the WebSphere Automation on-line documentation, or download it as a PDF from this URL: https://www.ibm.com/docs/en/ws-automation <p>In the next section, you register your first server in WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#part-3-working-with-traditional-websphere-servers-with-ibm-automation-security-vulnerabilities","title":"Part 3: Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities","text":"<p>You can view the security vulnerability status of each server in your inventory from the Security page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.</p> <p>To set up security monitoring, add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. </p> <p>You can then track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.</p> <p>To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. </p> <p>In Part 3 of the lab, you will perform the following task for WebSphere Traditional servers in IBM Automation. </p> <ol> <li> <p>Register a WebSphere traditional application server (tWAS), version 9.0.5.7 to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in the previous section of the lab. </p> <p>Once registered, you will immediately see the list of all unresolved CVEs and applied iFixes for the server. </p> </li> <li> <p>Resolve the known Log4J vulnerabilities in the WebSphere traditional application server, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix documented in the security bulletin for this vulnerability. </p> <p>Once the iFix is applied, IBM Automation immediately updates the security information for that application server, showing that the critical Log4J vulnerabilities have been patched. </p> </li> </ol> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#31-register-traditional-websphere-twas-v9057","title":"3.1 Register traditional WebSphere (tWAS) v9.0.5.7","text":"<p>In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service.</p> <ol> <li> <p>First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.7 server. Return to the terminal window and execute the command below:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Configure usage-metering using the wsadmin script below:</p> <p>The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters.</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\n</code></pre> <p>The script should run successfully as illustrated below.</p> <p></p> <p></p> <p>Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. </p> <p></p> </li> <li> <p>Go back to the browser, navigate to the Security -&gt; Servers dashboard, and confirm that the tWAS v9.0.5.7 server was registered in IBM Automation.</p> <p>Note: It may take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI. </p> <p></p> <p>You should see that this server Risk Level is 10.0, with (+## more) unresolved CVEs. </p> <p>Note: Somewhere at the top of that list is the much talked about LOG4J vulnerability, known as CVE-2021-44228, with a critical score of 10.  </p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. <p></p> </li> <li> <p>Check your email. A mail notification was sent showing new vulnerabilities for the registered application server.</p> <p></p> Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#32-review-cve-2021-44228-to-understand-the-remediation-options-for-the-log4j-vulnerability","title":"3.2 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability","text":"<p>In this section, you will review the details of the critical (10.0) CVE-2021-44228 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>In this lab, you will apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> </li> <li> <p>Click on (+ \\&lt;NUMBER&gt; more) to expand the list of unresolved CVEs. </p> <p>IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin.</p> <p></p> <p>As noted in the IBM security bulletin, which you will explore next, there are three CVEs related to the LOG4J vulnerability. A subset are highlighted below in the list of Unresolved CVEs for this WebSphere server.</p> <p></p> </li> <li> <p>After viewing the complete list of unresolved CVEs for the 9057 server, close the \u201cUnresolved CVEs\u201d view.</p> </li> <li> <p>View the security bulletin(s) for the CVE-2021-44228 Log4J vulnerability</p> <p>a.  Click on CVE-2021-44228 link under the 9057 servers Unresolved CVEs column</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level \u201cCritical (10)</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the 9057 WebSphere server has been \u201cexposed\u201d to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation.</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> <p>b.  Click on the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>c.  The security bulletin is displayed in a new browser tab.</p> <p>d.  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046)</p> <p></p> <p>You can read the security bulletins from the ibm.com/support pages. You may be prompted to login using your IBM ID to access the content:</p> <p>https://www.ibm.com/support/pages/node/6525706</p> </li> <li> <p>Return to the Browser tab that contains the IBM WebSphere Automation dashboard. Then return to the \u201cSecurity\u201d view</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#33-update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"3.3 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced into IBM WebSphere Automation in version 1.4</p> <p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you will leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <p>There are a couple of additional components now included in the product to support this use case. </p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the websphereSecure custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#331-navigate-to-the-server-and-unresolved-cve-to-fix","title":"3.3.1 Navigate to the Server and unresolved CVE to fix","text":"<p>OK, let's apply the recommended iFix to resolve the CVE-2021-44228 vulnerability! </p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p>You will fix it by applying the recommended iFix. (PH42728)</p> <p></p> </li> <li> <p>Click on tWAS_9057_server to view the list of CVEs / vulnerabilities</p> <p></p> <p>The displayed list shows both \"resolved\" and \"unresolved\" CVEs for the selected server. It also shows the \"Risk Level\" to identify the severity of the vulnerabilities, and the number of days the server has been exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click on CVE-2021-44228 to view the CVE information and affected servers</p> <p></p> <p>On the CVE Information page for CVE-2021-44228, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You will do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#332-prepare-fix","title":"3.3.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Simply select the target server to patch and the dialog shows all the affected servers known to WebSphere Automation, and lets you select the wanted fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation should be deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This can be preferable for fix packs because those are significantly larger than interim fixes, especially for traditional WebSphere fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>The Fetch then install fix option automatically downloads the fix and then installs it after the download is complete. </p> <p>Previously fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you will download and install the recommended iFix for the CVE into the tWAS_9057_server    </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE</p> <p>Next to each affected server, there is an option to \"Prepare Fix\". </p> <p>a. Click the Prepare fix link next to tWAS_9057_server for CVE-2021-44228</p> <p></p> <p>b. From the Select fix page, select the PH42728 iFix. Then click the Fetch fix button. </p> IMPORTANT:  If the PH42728 iFix is not listed under the \"resolution\" column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. And, WSA only loads the meta-data for the unresolved CVEs of the registered server(s).   WSA does this using a background process that spins up several threads. Because there are more unresolved CVEs than number of threads loading the meta-data,  it will take a WSA a couple of iterations to load all of the meta-data for the fixes.    Typically, the process will complete within 8-10 minutes after the server has been registered with WebSphere Automation.  WSA will continue to load fix meta-data as new unresolved CVEs are detected for registered servers. <p></p> <p>This action will cause WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix has been successfully fetched from IBM Fix Central, the status will change to Ready to Install.</p> <p></p> </li> <li> <p>Install the fix to resolve the CVE</p> <p>Once the fix has been successfully fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click on the Install fix action next to the tWAS_9057_server    </p> <p></p> <p>b. When prompted to confirm the installation, click Proceed</p> <p>Note: For this lab, \"Create backup\" option should be set to \"off\".</p> <p></p> Alert: In this lab environment, when the Install Fix action is initiated, a pop-up error dialog may be displayed that may be ignored!  If the \"Status\" field has not changed to \"Failed\", let the installation proceed to completion. <p>c. The installation may take 5 or 6 minutes to complete. Wait until you see the status change to \"Installation complete\"</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click on the ID of the action, and view the runbook.log output file. </p> <p>Common errors we have seen reported in the log is the ssh key and/or the wsa-ansible secret not properly configured in the environment.  </p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server. </p> <p>In the next section of the lab, you will review the updated security posture and fix history of the WebSphere server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#34-view-the-security-posture-and-fix-history-of-your-websphere-servers","title":"3.4 View the security posture and Fix History of your WebSphere servers","text":""},{"location":"1597-WebSphere_Automation/archived/README-10.7/#341-fix-history","title":"3.4.1 Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations teams fix vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to be able to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> <p>In this section, you will review the security posture and fix history of the two traditional WebSphere servers used in the lab to demonstrate how WebSphere Automation manages the details so you can handle your patching SLAs with ease.</p> <p>Now that you have applied the PH42762 iFix, let's examine the updated security posture of the 9057 WebSphere server.</p> <ol> <li> <p>View the tWAS_9057_server CVE Information</p> <p>a. From the Security view in the WebSphere Automation dashboard, click on the tWAS_9057_server link located under the Server column</p> <p></p> <p>b.  Select the Information tab</p> <p></p> <p>c.  From the Information view, you can see the list of Installed iFixes for the 9057 server.</p> <p></p> <p>Notice that the Fixed date for the iFixes related to the Log4J vulnerability show that they were installed moments ago.</p> <p>However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.</p> IBM WebSphere Automation reports ALL iFixes that have been applied, regardless of when they were applied. However. It can only determine fix dates, number of days the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere server is registered with IBM WebSphere Automation. </li> <li> <p>View the tWAS_9057_server CVE Vulnerabilities details</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab</p> <p></p> <p>b. From the list of CVEs, sort by Status, and display the Resolved CVEs on top</p> <p></p> <p>The CVEs that are listed as Resolved are all the related Log4JCVEs that were fixed by applying the iFix moments ago; CVE-2021-44228, being the most critical CVE listed.</p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server has been exposed to each vulnerability.</p> </li> <li> <p>View the tWAS_9057_server Fix History details</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab</p> <p>b. Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice the Fixes that have been applied</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were \u201cInstalled\u201d. Next to each Fix you can view the CVEs that were resolved by that Fix, and very importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> <p>Having this record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers</p> <p>a.  Return to the Security view. Then select on the CVEs category</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, let\u2019s focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b. View the CVE-2021-44228 CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE. </p> <p></p> <p>In this section you have learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to be responsive to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).</p> <p>You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI. </p> <p>You learned how to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#part-4-working-with-websphere-liberty-servers-in-ibm-automation","title":"Part 4: Working with WebSphere Liberty servers in IBM Automation","text":"<p>Registering WebSphere Liberty servers with IBM automation requires that they also register to the usage metering service as WebSphere traditional application servers. While the requirement is the same, the process in which WebSphere Liberty servers register with the metering service is quite different than WebSphere traditional. </p> <p>In Part 4 of the lab, you will perform the following task for WebSphere Liberty servers with IBM Automation. </p> <ol> <li> <p>Register a WebSphere Liberty to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in Part 2 of the lab. </p> <p>Once registered, you will immediately see the list of all unresolved CVEs and applied iFixes for the server. </p> </li> <li> <p>Resolve an identified vulnerabilities in the WebSphere Liberty server, by applying the appropriate iFix documented in the security bulletin for this vulnerability. </p> <p>Liberty servers on the distributed platform are not vulnerable to the well-known log4J vulnerabilities. However, you will resolve a critical vulnerability in the WebSphere Liberty server. </p> <p>Once the iFix is applied, IBM Automation immediately updates the security information for that Liberty application server, showing that the critical vulnerability has been patched.  </p> </li> <li> <p>Review the security posture and Fix History of the WebSphere servers.</p> <p>Once you have patched one of the Liberty servers, view the Fix History and security posture as it relates to resolved and unresolved CVEs. Here you see the Risk Level for the servers, how long servers are exposed to vulnerabilities, and when CVEs were resolved.  </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#41-configuring-liberty-server-v20009","title":"4.1 Configuring Liberty server v20.0.0.9","text":"<p>In this section, you configure Liberty Server version 20.0.0.9 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it.</p> <ol> <li> <p>Create a new Liberty server, version 20.0.0.9, using the command below:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file:</p> <pre><code>sudo \\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> <p>When prompted for the password for ibmuser, enter: engageibm!</p> <p></p> </li> <li> <p>Start the Liberty server:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection:</p> <p>The command below will import the \u201ccacert.pem\u201d file, that you saved in part 2 of the lab, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation.</p> <pre><code>keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\n</code></pre> <p></p> <p></p> </li> <li> <p>Configure the usage metering in the new server. This is configured in the Liberty server.xml file.</p> <p>a. Open the server.xml file using the \u201cgedit\u201d editor</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> <p>b.  Add the usageMetering-1.0 feature to the existing features in the &lt;featureManager&gt; element, as illustrated below:</p> <pre><code>&lt;feature&gt;usageMetering-1.0&lt;/feature&gt;\n</code></pre> <p> </p> <p>c.  In the server.xml file, add the usageMetering element below:</p> <pre><code>&lt;usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and Close the server.xml file.</p> <p></p> </li> <li> <p>Create a bootstrap.properties file for the Liberty server that contains the variable values for  metering_url and api_key that are defined in the server.xml file. Using variables will make it easier to add the configuration to the Liberty server. </p> <pre><code>echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" &gt;&gt; /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n\necho \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" &gt;&gt; /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n</code></pre> </li> <li> <p>Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables</p> <pre><code>cat /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n</code></pre> <p>The metering-url and api-key variables should have values as illustrated below. </p> <p></p> <p> </p> </li> <li> <p>Restart the Liberty server so that it can be initialized with the bootstrap.properties file. </p> <p>Note: Use the --clean option when starting the Liberty server, to clear any cached data. </p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\n\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server --clean\n</code></pre> <p></p> <p></p> </li> <li> <p>View the Liberty server \u201cmessages.log\u201d file and find the message indicating that the server was registered to the metering service.  </p> <pre><code>tail /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/logs/messages.log\n</code></pre> <p></p> <p> </p> <p>The Liberty009 server is now successfully registered with IBM Automation and should be displayed in the IBM Automation Dashboard under Application runtimes &gt; Security - Servers.</p> <p></p> </li> <li> <p>Go back to the browser, navigate to the Security -&gt; Servers dashboard, and confirm that the Liberty_20009_server was registered in IBM Automation</p> <p></p> <p></p> IMPORTANT:  If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly.  1. Review the server.xml configuration.  \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering-1.0 feature is included in the list of features.  2. Review the bootstrap.properties file \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering url is CORRECT. No additional characters or spaces.  \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. <p>If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI.</p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. <p>The dashboard shows that this server is vulnerable for some unresolved CVEs.</p> <p></p> </li> <li> <p>Click on the \u201c+2 more\u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693.</p> <p>Note that the +2 could be different if additional CVEs have been discovered since the time of this writing. </p> <p></p> <p></p> <p>a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693</p> <p></p> <p></p> </li> <li> <p>Check your email that you registered with IBM automation for a notification of new vulnerability. </p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#42-review-cve-2020-10693-to-understand-the-remediation-options-for-the-vulnerability","title":"4.2 Review CVE-2020-10693 to understand the remediation options for the vulnerability","text":"<p>In this section, you will review the details of the critical CVE-2020-10693 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>In this lab, you will apply the iFix that is documented in the IBM security bulletin to resolve the vulnerability in the Liberty 20009 server, as reported in CVE-2020-10693.</p> <ol> <li> <p>View the CVE information for CVE-2020-10963</p> <p>a. Click the Liberty_2009_server link under the \"Server\" column to see CVE and Fix History for this Liberty server</p> <p></p> <p>b. Click on CVE-2020-10693 CVE located in the Vulnerabilities &gt; CVEs view</p> <p></p> <p>c.  The CVE information page for CVE-2020-10693 is displayed.</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level \u201cMedium (5.3)\u201d</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the Liberty server has been \u201cexposed\u201d to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation.</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> </li> <li> <p>Click on the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>The security bulletin is displayed in a new browser tab.</p> </li> <li> <p>From the Web Browser, review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2020-10693</p> <p></p> <p></p> <p>In the next section of the lab, you will apply the Interim Fix PH29942 to remediate the unresolved CVE.</p> </li> <li> <p>When you finish reviewing the security bulletin, return to the Browser tab that contains the IBM WebSphere Automation dashboard. Then return to the \u201cSecurity\u201d view</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#43-update-liberty-server-v20009-to-fix-the-vulnerability","title":"4.3 Update Liberty server v20.0.0.9 to fix the vulnerability","text":"<p>Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced into IBM WebSphere Automation in version 1.4</p> <p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you will leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to resolve one vulnerability in the Liberty Server v20.0.0.9. </p> <p>There are a couple of additional components now included in the product to support this use case. </p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the websphereSecure custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#431-navigate-to-the-server-and-unresolved-cve-to-fix","title":"4.3.1 Navigate to the Server and unresolved CVE to fix","text":"<p>OK, let's apply the recommended iFix to resolve the CVE-2020-10693 vulnerability in the Liberty server. </p> <ol> <li> <p>Notice in the IBM Automation console that Liberty20009_server is vulnerable to CVE-2020-10693.</p> <p></p> </li> <li> <p>Expand the list of unresolved CVEs. Notice CVE-2020-10693 is listed.  </p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2020-10693 </p> <p></p> <p>Now, you will fix it by applying the recommended iFix. (PH29942)</p> <p></p> </li> <li> <p>Click on Liberty_20009_server to view the list of CVEs / vulnerabilities</p> <p></p> <p>The displayed list shows both \"resolved\" and \"unresolved\" CVEs for the selected server. It also shows the \"Risk Level\" to identify the severity of the vulnerabilities, and the number of days the server has been exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click on CVE-2020-10693 to view the CVE information and affected servers</p> <p></p> <p>On the CVE Information page for CVE-2020-10693, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You will do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#432-prepare-fix","title":"4.3.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Simply select the target server to patch and the dialog shows all the affected servers known to WebSphere Automation, and lets you select the wanted fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation should be deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This can be preferable for fix packs because those are significantly larger than interim fixes, especially for traditional WebSphere / Liberty fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>The Fetch then install fix option automatically downloads the fix and then installs it after the download is complete. </p> <p>Previously fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you will download and install the recommended iFix for the CVE into the Liberty_20009_server    </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE</p> <p>Next to each affected server, there is an option to \"Prepare Fix\". </p> <p>a. Click the Prepare fix link next to Liberty_20009_server </p> <p></p> <p>b. From the Select fix page, select the PH29942 iFix. Then click the Fetch fix button. </p> <p></p> <p>This action will cause WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix has been successfully fetched from IBM Fix Central, the status will change to Ready to Install.</p> <p></p> </li> <li> <p>Install the fix to resolve the CVE</p> <p>Once the fix has been fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click on the Install fix action next to the Liberty_20009_server    </p> <p></p> <p>b. When prompted to confirm the installation, click Proceed</p> <p></p> Alert: In this lab environment, when the Install Fix action is initiated, a pop-up error dialog may be displayed that may be ignored!  If the \"Status\" field has not changed to \"Failed\", let the installation proceed to completion. <p>c. The installation may take 5 or 6 minutes to complete. Wait until you see the status change to \"Installation complete\"</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click on the ID of the action, and view the runbook.log output file. </p> <p>Common errors we have seen reported in the log is the ssh key and/or the wsa-ansible secret not properly configured in the environment.  </p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully applied the iFix to resolve the critical CVE on the Liberty_20009_server. </p> <p>In the next section of the lab, you will review the updated security posture and fix history of the Liberty server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#44-view-the-security-posture-and-fix-history-of-your-liberty-server","title":"4.4 View the security posture and Fix History of your Liberty server","text":""},{"location":"1597-WebSphere_Automation/archived/README-10.7/#441-fix-history","title":"4.4.1 Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations teams fix vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to be able to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> <p>In this section, you will review the security posture and fix history of the two traditional WebSphere servers used in the lab to demonstrate how WebSphere Automation manages the details so you can handle your patching SLAs with ease.</p> <p>Now that you have applied the PH29942 iFix, let\u2019s examine the updated security posture of the Liberty server.</p> <ol> <li> <p>View the Liberty_20009_server CVE Information</p> <p>a.  From the Security view in the WebSphere Automation dashboard, click on the Liberty_20009_server link located under the Server column</p> <p></p> <p>b.  Select the Information tab</p> <p></p> <p>c. From the Information view, you can see the list of Installed iFixes for the Liberty server.</p> <p></p> <p>Notice that the Fixed date for the iFixes related to the vulnerability show that it was fixed moments ago.</p> <p></p> <p>Information:</p> <p>IBM WebSphere Automation reports ALL iFixes that have been applied, regardless of when they were applied. However. It can only determine fix dates, number of days the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere server is registered with IBM WebSphere Automation.</p> <p>If the servers already had iFixes installed prior to being registered to IBM WebSphere Automation, they would be listed, but the installed date in not known and will be blank.</p> </li> <li> <p>View the Liberty_20009_server CVE Vulnerabilities details</p> <p>a.  From the Liberty_20009_server view, select the Vulnerabilities tab</p> <p></p> <p>b.  From the list of CVEs, sort by Status, and display the Resolved CVEs on top. The CVE-2020-10693 is now Resolved.</p> <p></p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server has been exposed to each vulnerability.</p> </li> <li> <p>View the Liberty_20009_server Fix History details</p> <p>a.  From the Liberty_20009_server view, select the Vulnerabilities tab</p> <p>b.  Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice there is now a record that shows that the iFix has been installed, and the date te server was patched.</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were \u201cInstalled\u201d. Next to each Fix you can view the CVEs that were resolved by that Fix, and very importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> <p>Having this record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers</p> <p>a.  Return to the Security view. Then select on the CVEs category</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, let\u2019s focus on CVE-2020-10693. This is the CVEs that was fixed in the Liberty when you applied the iFix moments ago.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b.  Locate and view the CVE-2020-10693 CVE from the current view. Sort the list of CVEs by Fixed Servers, which will list the CVEs that have been applied to the Liberty server at the top of the list.</p> <p></p> </li> <li> <p>Identify the Liberty servers that this CVE has been resolved, and potentially still unresolved.</p> <p>a. From the CVE view, filter by CVE: CVE-2020-10693</p> <p></p> <p>a.  Click on the CVE-2020-10693 link under the CVE column</p> <p></p> <p>b.  Note the Liberty_20009_server Vulnerability Status is \u201cResolved\u201d.</p> <p></p> <p>In this section you have learned how easy IBM Automation makes it for your Information technology operations teams to be responsive to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA.</p> <p>You learned how to demonstrate when the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#summary","title":"Summary","text":"<p>Congratulations! You have completed the WebSphere Automation lab.</p> <p>With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.</p> <p>IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.</p> <p>IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.</p> <p>To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation.</p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#appendix-1-manual-installation-of-websphere-ifix-to-resolve-cve","title":"Appendix 1: Manual installation of WebSphere iFix to resolve CVE","text":""},{"location":"1597-WebSphere_Automation/archived/README-10.7/#update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Now, you will fix it by applying the appropriate iFix.</p> <p></p> </li> <li> <p>Expand the list of unresolved CVEs. IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin. </p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p></p> <p>You can read the security bulletin here. You may be prompted to login using your IBM ID to access the content: </p> <p>https://www.ibm.com/support/pages/security-bulletin-multiple-vulnerabilities-apache-log4j-affect-ibm-websphere-application-server-and-ibm-websphere-application-server-liberty-cve-2021-4104-cve-2021-45046</p> <p>Now, you will fix it by applying the appropriate iFix. (PH42762)</p> <p></p> </li> <li> <p>First, stop the server, wait until it has stopped:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Run the following script to install the iFix:</p> <pre><code>sudo /iFix/PH42762-LOG4J/imcl_ifix_install.sh 9057\n</code></pre> <p>When prompted for the password for the ibmadmin user, enter: engageibm!</p> <p></p> <p></p> </li> <li> <p>Start the server once the iFix installation has completed:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 were removed from the unresolved CVEs list for the tWAS 9.0.5.7 server.</p> <p></p> <p></p> </li> <li> <p>Also, you can see on the right under \u201cApplied iFixes\u201d the PH42762 fix is now listed as applied. </p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)","text":"<p>You can remove the iFix that was applied to confirm that the CVE-2021-44228 shows up in the unresolved CVE list.</p> <ol> <li> <p>Stop the server:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Uninstall the iFix:</p> <pre><code>sudo /iFix/PH42762-LOG4J/imcl_ifix_uninstall.sh 9057\n</code></pre> <p>When prompted for the password for the ibmadmin user, enter: engageibm!</p> <p></p> </li> <li> <p>Start the server:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 are once again listed as unresolved CVEs for the tWAS 9.0.5.7 server.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#appendix-2-manual-installation-of-liberty-ifix-to-resolve-cve","title":"Appendix 2: Manual installation of Liberty iFix to resolve CVE","text":""},{"location":"1597-WebSphere_Automation/archived/README-10.7/#update-liberty-server-v20009-to-fix-the-vulnerability","title":"Update Liberty server v20.0.0.9 to fix the vulnerability","text":"<p>In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.</p>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#updating-configurations","title":"Updating configurations","text":"<p>Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info.</p> <p>We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. </p> <p>This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE.</p> <ol> <li> <p>Edit the server.xml, using the command below:</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> </li> <li> <p>Comment out the beanValidation-2.0 feature:</p> <pre><code>&lt;!-- &lt;feature&gt;beanValidation-2.0&lt;/feature&gt; --&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and close the server.xml file.</p> <p></p> </li> <li> <p>Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically.</p> <p></p> <p>Great, you removed the vulnerability by updating the configuration.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-10.7/#resolve-the-issue-by-applying-an-ifix","title":"Resolve the issue By Applying an iFix","text":"<p>However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability.</p> <ol> <li> <p>First, add back the beanValidation feature:</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> </li> <li> <p>Uncomment the beanValidation-2.0 feature:</p> <pre><code>&lt;feature&gt;beanValidation-2.0&lt;/feature&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and Close the server.xml file.</p> <p></p> </li> <li> <p>Back to the browser, make sure the vulnerability shows up again.</p> <p></p> <p></p> <p>Next, resolve the CVE by applying the recommended iFix (PH29942) documented in the security bulletin for this vulnerability. </p> <p></p> </li> <li> <p>You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server.</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\n</code></pre> </li> <li> <p>Now, apply the iFix, by running the following command.</p> <p>Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM.</p> <pre><code>sudo /iFix/PH29942/imcl_ifix_install.sh 20009\n</code></pre> <p>When prompted for the password for ibmuser, enter: engageibm!</p> <p></p> <p></p> </li> <li> <p>Great, the iFix was applied. Now, start the server again:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\n</code></pre> </li> <li> <p>Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.</p> <p></p> <p></p> <p></p> </li> <li> <p>Note that the IBM Automation dashboard shows the iFix PH29942 has been applied to the Liberty_20009_server.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/","title":"Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":""},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#proactive-cve-protection-for-websphere-with-ibm-websphere-automation","title":"Proactive CVE protection for WebSphere with IBM WebSphere Automation","text":"<p>Last updated: October 2022</p> <p>Duration: 90 mins</p> <p>Need support? Contact Kevin Postreich - kevinlp@us.ibm.com</p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#introduction-to-websphere-automation","title":"Introduction to WebSphere Automation","text":"<p>IBM WebSphere Automation is focused on delivering value into existing WebSphere Application Server (WAS) environments, helping administrators reduce the cost, effort, and risk of addressing common vulnerabilities, automating tasks, and remediating capacity incidents.</p> <p>It removes manual toil so that your team can spend more time innovating while\u00a0minimizing the cost of extending the life and maximizing the ROI of your WebSphere investments.</p> <p>In conversations with customers, the same three concerns come up repeatedly. Organizations need to keep their IT estate secure and compliant, resilient to disruption and running optimally while reducing costs and maximizing ROI.</p> <p>WebSphere Automation helps organizations gain visibility, operational efficiencies, and cost savings quickly by extending the life of WebSphere investments and giving teams time back to focus on unlocking new value and fixing the imbalance of pure maintenance versus innovation tasks.</p> <ul> <li> <p>WebSphere operators and administrators save time and embrace DevSecOps by implementing patches more efficiently on virtual and container environments to keep operations compliant and secure.</p> </li> <li> <p>Enhance remediation capabilities with insights and recommendations to improve the speed and depth of understanding of outages and anomalies as they occur.</p> </li> <li> <p>Augment the operational experience with access to simplified and consolidated information that enables teams to act.</p> </li> </ul> <p>With WebSphere Automation, security, business efficiency and resiliency become standard. IBM can meet you wherever you are in your optimization and automation journeys to help you quickly deliver value and increase ROI, all while laying a solid automation foundation to support future growth.</p> <p>IBM WebSphere Automation is a stand-alone product that runs on RedHat OpenShift. Entitlement to RedHat OpenShift is included with IBM WebSphere Automation but must be installed separately. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere\u2019s incidents, hybrid applications, and cost with complete observability, governance, and compliance.</p> <p>Deploy virtually anywhere through containers supported by Red Hat\u00ae OpenShift\u00ae software, on IBM Cloud\u00ae, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that\u2019s designed to be easy to consume.</p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#business-context","title":"Business Context","text":"<p>You are a WebSphere Administrator, part of a WebSphere Operations Team responsible for maintaining security compliance of the WebSphere estate in the enterprise. A typical \u201cas-is\u201d process for maintaining security compliance for WebSphere environments is depicted below.</p> <p>Today (as-is):</p> <ol> <li> <p>IBM sends generic \u201cFLASH\u201d to indicate a new WAS security bulletin.</p> </li> <li> <p>You subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity, and recommended solutions.</p> </li> <li> <p>Generally, WAS inventory is maintained in spreadsheets.</p> </li> <li> <p>Based on that, you check if this CVE applies to your managed inventory (Spreadsheet)</p> </li> <li> <p>You determine if an APAR / Fix Pack upgrade should be applied to    existing environment</p> </li> <li> <p>You deploy the fix to the impacted environments</p> </li> <li> <p>You update the WAS inventory (Spreadsheet) and provide up-to-date    reports to audit and compliance teams</p> </li> </ol> <p>As is, your inventory is a spreadsheet, containing all information about your servers, such as the versions of the installed servers, which operating system they're installed on, and iFixes which have been applied, etc</p> <p></p> <p>Currently, this is a very manual, time-consuming process, and you'd like to automate this process to direct valuable time and resource elsewhere. This is where IBM WebSphere Automation will help!</p> <p>You would like to have:</p> <ul> <li> <p>Management dashboard: Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).</p> </li> <li> <p>Automated vulnerability tracking: Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.</p> </li> <li> <p>Contextual notifications: Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.</p> </li> <li> <p>Shared, live visibility to key stakeholders: WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.</p> </li> <li> <p>Fix History: A complete audit trail for when vulnerabilities are detected, and when patches or upgrades are applied to resolve issues</p> </li> <li> <p>Automated fix installation of Fixpaks and iFixes to your WebSphere and Liberty servers, directly from the IBM WebSphere Automation dashboard. </p> </li> </ul> <p>In this lab, you use the IBM WebSphere Automation to secure operations to reduce risk and meet compliance.</p> <p>At the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard. This enables you to discover, analyze and remediate common vulnerabilities and exposures across instances. </p> <p>You will gain the necessary insights into Fix History to help operations teams demonstrate they are meeting patching SLAs, which are very common in large enterprises. Furthermore, this information can be exported to a CSV file to be shared amongst the broader team.</p> <p>You will use the one-click Fix Deployment capability of WebSphere Automation 1.4 to automatically determine which APARs and interim fixes to install to resolve a specific vulnerability, and to download and deploy the fixes. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#accessing-and-starting-the-environment","title":"Accessing and starting the environment","text":"<p>If you are doing this lab as part of an instructor led workshop (virtual or face to face), an environment has already been provisioned for you. The instructor will provide the details for accessing the lab environment.</p> <p>Otherwise, you will need to reserve an environment for the lab. You can obtain one here. Follow the on-screen instructions for the \u201cReserve now\u201d option.</p> <p>https://techzone.ibm.com/my/reservations/create/60da2c20e2cb7a001f656575</p> <ol> <li> <p>When the demo environment is provisioned, use the provided username and password to access and start the environment. You should see the following screen:</p> <p></p> <p>WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs.</p> <p></p> </li> <li> <p>If the environment is NOT already started, go ahead, and Start the environment by clicking on the Play button. It takes about 10-15 minutes for the environment to start and stabilize.</p> <p></p> <p> </p> </li> <li> <p>You will be working on the STUDENT VM only. </p> <p>All the WebSphere images and iFixes required for the lab are pre-installed:</p> <ul> <li> <p>/opt/IBM/WebSphere/Liberty20009/</p> </li> <li> <p>/opt/IBM/WebSphere/AppServer9057/</p> </li> </ul> <p></p> </li> <li> <p>Click the screen representing the STUDENT VM</p> <p></p> <p></p> </li> <li> <p>Once you log in to the Student VM you will see the Desktop, which     contains all the programs that you will be using (browsers, terminal, etc.)</p> <p>The login credentials for the STUDENT\u201d image is:</p> <ul> <li> <p>User ID: ibmuser</p> </li> <li> <p>Password: engageibm!</p> </li> </ul> <p></p> <p></p> <p></p> </li> <li> <p>You can resize the virtual desktop with the Fit to window button, located at the top of the Skytap environment window.</p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#how-ibm-websphere-automation-automatically-manages-your-websphere-and-liberty-server-security-posture","title":"How IBM WebSphere Automation automatically manages your WebSphere and Liberty server security posture","text":"<p>WebSphere administrators register their WebSphere Application Server or Liberty servers with WebSphere Automation. </p> <p>The WebSphere Automation vulnerability manager makes an assessment of the security compliance status of each server. Common vulnerabilities or exposures (CVEs) for each server are displayed in the WebSphere Automation UI in an interactive list, and each server is assessed a risk level. Administrators can learn more about the pertinent CVEs, plan their response, and complete the application of the required security fixes to their managed servers using the WebSphere Automation UI.</p> <p>When the IBM Product Security Incident Response Team (PSIRT) publishes new or updated security bulletins, the WebSphere Automation CVE/PSIRT monitor detects them and collects the data about the CVEs from the bulletins. The WebSphere Automation vulnerability manager checks the applicability of the new CVEs to the registered servers. If exposures are found, the WebSphere Automation vulnerability notifier sends email notifications to a customizable list of addresses that new vulnerabilities exist.</p> <p>After defining an exposure mitigation plan, administrators then use the WebSphere Automation UI to select published fix packs or interim fixes to repair vulnerabilities. During the fix installation process, WebSphere Automation requests the selected fix from IBM Fix Central, stores it in the Kafka data store, and then installs it on the indicated server.</p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#clone-the-git-repository-used-for-this-lab-and-explore-the-contents","title":"Clone the Git repository used for this lab and explore the contents","text":"<ol> <li> <p>Clone the GitHub repo with the lab artifacts, then run the following command on your terminal:</p> <p>a. Open a Terminal window on the VM, and ensure you are in the home directory of the user \u201cibmuser\u201d</p> <pre><code>cd /home/ibmuser\n</code></pre> <p>b. From the terminal window, run the following command to clone the repo:</p> <pre><code>git clone https://github.com/IBMTechSales/WAS-Automation-LabFiles.git\n</code></pre> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#required-websphere-automation-setup","title":"REQUIRED: WebSphere Automation setup","text":"<p>The Fix Deployment capability of WebSphere Automation 1.4 delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. This capability augments the existing automated vulnerability assessment and fix history tracking.</p> <p>To apply security fixes from managed servers, both WebSphere Automation and the WebSphere servers must be properly configured to communicate by using SSH. </p> <p>The following configuration tasks must be completed to use the Fix Deployment features in IBM WebSphere Automation. You will do these steps in this section of the lab, to become familiar with configuring IBM WebSphere Automation. </p> <ul> <li>Create the ssh key</li> <li>Copy the key over to the WAS server to be monitored</li> <li>Create the wsa-ansible secret that contains the key</li> <li>Create the known_hosts file</li> <li>Create the wsa-secure-fixcentral-creds secret that contains the IBM ID credentials to access IBM Fix Central</li> </ul> <ol> <li> <p>Login to OpenShift CLI</p> <p>a. Open a new Terminal window in the VM</p> <p>b.  Type <code>oc login -u ibmadmin -p engageibm</code> to login to OpenShift. </p> <p>Use the following credentials to login: </p> <p>username: ibmadmin</p> <p>password: engageibm</p> <p></p> <p></p> </li> <li> <p>Type <code>oc project websphere-automation</code> to ensure you are working in the websphere-automation project</p> <p></p> </li> <li> <p>Type <code>oc get wsa</code> to verify that IBM WebSphere Automation is READY in your environment. </p> </li> </ol> <p>Note: The output must state that the WSA resource is ready before you can continue with the lab.  </p> <pre><code>![](./lab1-media/media/image72.png)\n</code></pre> <ol> <li> <p>Create the ssh key that is used for secure communication between WebSphere Automation and the WebSphere servers</p> <pre><code>cd /home/ibmuser\n\nssh-keygen -f ~/.ssh/wsa\n</code></pre> <p>a. When prompted, enter the password as: passw0rd </p> <p>Note: That is a numeric zero in passw0rd</p> <p>This is the password you are assigning for the new ssh key that is being reated</p> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-ssh-linux-unix</p> </li> <li> <p>Copy the ssh key over to the WAS server to be monitored. In this lab the following command is used:</p> <pre><code>ssh-copy-id -i ~/.ssh/wsa ibmuser@student.demo.ibmdte.net\n</code></pre> <p>a. When prompted to continue connection, type <code>yes</code></p> <p>b. When prompted for the password for ibmuser@student.demo.ibmdte.net, type <code>engageibm!</code> as the password. </p> <p>Ensure the message indicates that 1 key was added to the users key store. </p> <p>Note This password is for the operating system user: \"ibmuser\" so that the ssh key can be securly copied.  </p> <p></p> </li> <li> <p>Test the login to the WAS server from the WebSphere Automation server via ssh key with the key passphrase from the ssh key, which is passw0rd </p> <pre><code>ssh -i ~/.ssh/wsa ibmuser@student.demo.ibmdte.net\n</code></pre> <p></p> <p>a. Type <code>whoami</code> from the command line and verify the user is ibmuser</p> <p></p> <p>b. Type <code>exit</code> from the command line to close the ssh connection</p> <p></p> </li> <li> <p>Create the wsa-ansible secret that contains the key</p> <pre><code>oc create secret generic wsa-ansible \\\n--from-literal=ansible_user=ibmuser \\\n--from-literal=ansible_port=22 \\\n--from-file=ssh_private_key_file=/home/ibmuser/.ssh/wsa \\\n--from-literal=ssh_private_key_password=passw0rd\n</code></pre> <p>Note: The \"wsa-ansible\" secret contains the connection information required for WebSphere Automation to connect to the WebSphere server used in this lab. This connection is required for WebSphere Automation to ssh into WebSphere and execute Ansible playbooks to install WebSphere iFixes and Fixpacks. </p> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-websphere-automation-ssh</p> </li> <li> <p>Create a known-hosts file which will configure WebSphere Automation with a list known hosts and their public keys that WebSphere Automation will trust. </p> <pre><code>ssh-keyscan student.demo.ibmdte.net &gt;&gt; /home/ibmuser/wsa_known_hosts\n</code></pre> <p></p> <p>Additional documentation can be found here: https://www.ibm.com/docs/en/ws-automation?topic=servers-setting-up-websphere-automation-ssh</p> </li> <li> <p>Create the wsa-ansible_known_hosts configMap, using the known-hosts file you just created. </p> <pre><code>oc create configmap wsa-ansible-known-hosts --from-file=known_hosts=/home/ibmuser/wsa_known_hosts\n</code></pre> <p></p> </li> <li> <p>Test the ssh connection from IBM WebSphere Automation to WAS environment, using the following commands: </p> <pre><code>MANAGER_POD=$(oc get pod -l app.kubernetes.io/component=runbook-manager -o name | head -n 1)\n\noc rsh $MANAGER_POD runcli testConnection student.demo.ibmdte.net linux\n</code></pre> <p>a. Run the <code>oc log</code> command that is outputted from the \"oc rsh\" command. </p> <p>Example:     oc logs --tail=100 -l job-name=test-connection-######     </p> <p>Note: Run the command multiple times until you see the exected output as shown below. At first, you will see messages \"waiting to start\", which can take a minute or two.    </p> <p></p> <p>b. A successful connection should look similar to this output: </p> <p></p> <p></p> </li> <li> <p>Verify the Kubernetes secret named wsa-secure-fixcentral-creds has been created in the lab environment. </p> <pre><code>oc get secret | grep wsa-secure-fixcentral-creds\n</code></pre> <p>Note: This secret contains the information required for WebSphere Automation to access IBM Fix Central to fetch WebSphere and Libery fixes.   </p> <p>Note: The wsa-secure-fixcentral-creds secret has already been created for you in the lab environment. </p> <p> </p> <p>When the secret is created, WebSphere Automation strarts two additional pods in OpenShift that are responsible for downloading WebSphere and Liberty fixes from IBM Fix Central and installing the fixes into WebSphere and Liberty servers that are registered with WebSphere Automation.  </p> <ul> <li>wsa-secure-fix-manager-*</li> <li>wsa-secure-installation-manager-*</li> </ul> </li> <li> <p>Ensure the following two pods mentioned above are created and started, using the oc get pods command below: </p> <ul> <li>wsa-secure-fix-manager-*</li> <li>wsa-secure-installation-manager-*</li> </ul> <p> </p> <pre><code>oc get pods | grep '\\&lt;fix\\&gt;\\|installation'\n</code></pre> <p>Note: These pods are only created and started once the wsa-secure-fixcentral-creds secret is created in the OCP cluster. If the credentials in the secret are updated, the wsa-secure-fix-manager-* pod will automatically be restarted by OpenShift based on the updated credentials. </p> <p></p> <p>The wsa-secure-fix-manager-* pod is responsible for downloading the fixpaks and iFixes from IBM Fix Central, using the credentials you provided in the wsa-secure-fixcentral-creds secret. </p> <p>The wsa-secure-installation-manager-* pod is responsible for running the Ansible playbooks to install the fixpaks or iFixes into the registered WebSphere or Liberty servers. </p> <p></p> </li> </ol> <p>You have now completed the custom configuration required for this lab.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#part-1-receiving-vulnerability-notifications","title":"Part 1: Receiving vulnerability notifications","text":""},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#accessing-the-websphere-automation-ui","title":"Accessing the WebSphere Automation UI","text":"<p>A WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Servers and WebSphere Liberty servers for vulnerability tracking and by configuring email notifications.</p> <p>WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Liberty servers that they manage.</p> <p>For this lab, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let\u2019s access your environment.</p> <ol> <li> <p>On the Student VM, open a browser and enter the following URL (there is a WebSphere Automation link on bookmark toolbar):</p> <p>Note: It takes about 10-15 minutes for the environment to start and stabilize once it has started. If you encounter \"Secure Connection Failed\" or  \"502 Gateway Error\" accessing the WebSphere Automation URL, please wait a few minutes and retry. </p> <p>https://cpd-websphere-automation.apps.demo.ibmdte.net/zen/#/homepage</p> <p></p> <p></p> </li> <li> <p>On the login page, select the OpenShift authentication as the    authentication type.</p> <p>Note: If using Firefox, enlarge the browser window until you see the graphics, as illustrated below. </p> <p></p> <p>Note: If necessary, accept all the warnings and certificates.  Depending on your browser, you might have to scroll down to permit  access.</p> <p></p> </li> <li> <p>Select htpasswd as the login selection</p> <p></p> <p></p> </li> <li> <p>Enter ibmadmin as username and engageibm as password. And click Log In.</p> <p></p> <p></p> <p>If the \"IBM Cloudpak | Administration\" page appears, navigate to the IBM Automation page using the sub-steps below. Otherwise continue with the next step, as you should already be at the IBM Automation page.  </p> <p></p> <p>a. In the upper right corner, click on the cloudpak switcher icon</p> <p></p> <p>b. Select IBM Automation (WebSphere Automation) from the menu</p> <p></p> </li> <li> <p>At this point, you should be at the IBM Automation Welcome page </p> <p></p> <p></p> </li> <li> <p>View the Application Runtimes that have been registered with IBM Automation</p> <p>a. Click on theNavigation Menu icon located at the upper left corner of the page</p> <p></p> <p>b. Click Operate, and then click Application runtimes.</p> <p>Application Runtimes represent the Traditional WebSphere and WebSphere Liberty servers that have been registered with IBM Automation</p> <p></p> <p></p> </li> <li> <p>The Application runtimes \u2013 Security page appears. There should be no data since there not any WebSphere / Liberty servers registered yet.</p> IMPORTANT:  If any of the labels on the page don't display properly, refresh the browser window using the web browser refresh icon.   For example: The label for the Fix management tab may display as !Fix management! the first time. Refreshing the browser window will result in the labels being displayed correctly.   Note: This is only a one-time action. <p></p> <p></p> </li> <li> <p>Before you start to register servers to the Dashboard, you need to configure an email to received notifications about CVEs.</p> <p>a. Select the Notifications menu item from the navigation list.</p> <p>b. Click on the Email addresses tab, to add your email address where notifications of new CVEs will be delivered</p> <p></p> <p></p> </li> <li> <p>The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities.</p> <p>a. Click the Add button</p> <p>b. Enter your email address</p> <p>c. Click Save</p> <p></p> </li> </ol> <p>Great! Your email is configured to receive security notifications.</p> <p>In the next section, you will register servers to WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#part-2-getting-configuration-parameters-needed-to-register-websphere-liberty-servers-to-ibm-automation","title":"PART 2: Getting configuration parameters needed to register WebSphere / Liberty servers to IBM Automation","text":"<p>Add each of your WebSphere Application Server and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service.</p> <p>To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering details:</p> <ul> <li> <p>URL: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.</p> </li> <li> <p>API Key: The token used to authenticate the WebSphere Application Server and Liberty servers during the registration process.</p> </li> <li> <p>Usage metering certificate: The certificate that contains the public key. This key allows a Liberty server that is registering with WebSphere Automation to do an SSL handshake with the metering service.</p> </li> </ul> <p>In this section, you will get these configuration parameters that will be used to register application servers.</p> <ol> <li> <p>Return to the desktop and open a new terminal window.</p> <p></p> <p></p> </li> <li> <p>Login to the OpenShift Cluster using the oc CLI command shown below, if you are not already logged in:</p> <pre><code>oc login --username=ibmadmin --password=engageibm --insecure-skip-tls-verify=true --server=https://api.demo.ibmdte.net:6443\n</code></pre> <p></p> <p></p> </li> <li> <p>Make sure that the project you are working on is websphere-automation:</p> <pre><code>oc project websphere-automation\n</code></pre> <p></p> <p></p> </li> <li> <p>Use the oc command to get the URL of the usage metering service in WebSphere Automation and save it to a file  \u201c/opt/IBM/WebSphere/metering-url.txt\u201d</p> <pre><code>echo https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi &gt; /opt/IBM/WebSphere/metering-url.txt\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the URL was captured.</p> <pre><code>cat /opt/IBM/WebSphere/metering-url.txt\n</code></pre> <p></p> <p></p> </li> <li> <p>Get the api-key that will be used to authenticate the WebSphere Application Server and Liberty servers during the registration process. Save it to a file named \u201c/opt/IBM/WebSphere/api-key.txt\u201d</p> <pre><code>oc -n websphere-automation get secret wsa-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.wsa-secure-metering-apis-sa}' | base64 -d &gt; /opt/IBM/WebSphere/api-key.txt; echo &gt;&gt; /opt/IBM/WebSphere/api-key.txt\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the api-key (token) was captured.</p> <pre><code>cat /opt/IBM/WebSphere/api-key.txt\n</code></pre> <p></p> <p></p> </li> <li> <p>Finally, get the Server certificate that is used for SSL handshake between the Liberty servers and IBM Automation, and save it to a file named \u201c/opt/IBM/WebSphere/cacert.pem\u201d</p> <pre><code>oc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d &gt; /opt/IBM/WebSphere/cacert.pem\n</code></pre> </li> <li> <p>View the contents of the saved file to ensure the api-key (token) was captured.</p> <pre><code>cat /opt/IBM/WebSphere/cacert.pem\n</code></pre> <p></p> </li> </ol> <p>Great! Now you have all the configuration parameters necessary to register the application servers with the usage metering service in WebSphere Automation.</p> For more information:  For additional details, view the section titled: Setting up security monitoring in the WebSphere Automation on-line documentation, or download it as a PDF from this URL: https://www.ibm.com/docs/en/ws-automation <p>In the next section, you register your first server in WebSphere Automation.</p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#part-3-working-with-traditional-websphere-servers-with-ibm-automation-security-vulnerabilities","title":"Part 3: Working with Traditional WebSphere servers with IBM Automation \u2013 Security Vulnerabilities","text":"<p>You can view the security vulnerability status of each server in your inventory from the Security page in the WebSphere Automation UI.  For each server, the numerical risk level in the range 0 - 10 represents the highest CVSS value of its CVEs.</p> <p>To set up security monitoring, add each of your WebSphere Application Server servers and WebSphere Liberty servers to WebSphere Automation by registering them with the usage metering service. </p> <p>You can then track security vulnerabilities for your servers from a single user interface (UI) in WebSphere Automation.</p> <p>To register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. </p> <p>In Part 3 of the lab, you will perform the following task for WebSphere Traditional servers in IBM Automation. </p> <ol> <li> <p>Register a WebSphere traditional application server (tWAS), version 9.0.5.7 to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in the previous section of the lab. </p> <p>Once registered, you will immediately see the list of all unresolved CVEs and applied iFixes for the server. </p> </li> <li> <p>Resolve the known Log4J vulnerabilities in the WebSphere traditional application server, by using the built-in capabilities in IBM WebSphere Automation to prepare and install the recommended iFix documented in the security bulletin for this vulnerability. </p> <p>Once the iFix is applied, IBM Automation immediately updates the security information for that application server, showing that the critical Log4J vulnerabilities have been patched. </p> </li> </ol> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#31-register-traditional-websphere-twas-v9057","title":"3.1 Register traditional WebSphere (tWAS) v9.0.5.7","text":"<p>In this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. With traditional WebSphere, you use the wsadmin script to configure the usage metering service.</p> <ol> <li> <p>First, let\u2019s start the traditional WebSphere (tWAS) 9.0.5.7 server. Return to the terminal window and execute the command below:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Configure usage-metering using the wsadmin script below:</p> <p>The wsadmin command invokes a Python script named configuretWasUsageMetering.py. The script requires the same url and apiKey that you gathered earlier from the IBM automation environment. These parameters are captured from the text files that you saved earlier in the lab and inserted into the url and apiKey parameters.</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\n</code></pre> <p>The script should run successfully as illustrated below.</p> <p></p> <p></p> <p>Great, you first traditional WAS server is configured. Let\u2019s check the WebSphere Automation dashboard. </p> <p></p> </li> <li> <p>Go back to the browser, navigate to the Security -&gt; Servers dashboard, and confirm that the tWAS v9.0.5.7 server was registered in IBM Automation.</p> <p>Note: It may take 15 - 30 seconds for the server to be displayed in the WebSphere Automation UI. </p> <p></p> <p>You should see that this server Risk Level is 10.0, with (+## more) unresolved CVEs. </p> <p>Note: Somewhere at the top of that list is the much talked about LOG4J vulnerability, known as CVE-2021-44228, with a critical score of 10.  </p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. <p></p> </li> <li> <p>Check your email. A mail notification was sent showing new vulnerabilities for the registered application server.</p> <p></p> Information: In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. However, Because of network restrictions in the lab environment, this link will not work. <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#32-review-cve-2021-44228-to-understand-the-remediation-options-for-the-log4j-vulnerability","title":"3.2 Review CVE-2021-44228 to understand the remediation options for the LOG4J vulnerability","text":"<p>In this section, you will review the details of the critical (10.0) CVE-2021-44228 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>In this lab, you will apply the iFix that is documented in the IBM security bulletin to resolve the Log4J vulnerability in the traditional WebSphere 9.0.5.7 server, as reported in CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> </li> <li> <p>Click on (+ \\&lt;NUMBER&gt; more) to expand the list of unresolved CVEs. </p> <p>IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin.</p> <p></p> <p>As noted in the IBM security bulletin, which you will explore next, there are three CVEs related to the LOG4J vulnerability. A subset are highlighted below in the list of Unresolved CVEs for this WebSphere server.</p> <p></p> </li> <li> <p>After viewing the complete list of unresolved CVEs for the 9057 server, close the \u201cUnresolved CVEs\u201d view.</p> </li> <li> <p>View the security bulletin(s) for the CVE-2021-44228 Log4J vulnerability</p> <p>a.  Click on CVE-2021-44228 link under the 9057 servers Unresolved CVEs column</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level \u201cCritical (10)</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the 9057 WebSphere server has been \u201cexposed\u201d to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation.</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> <p>b.  Click on the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>c.  The security bulletin is displayed in a new browser tab.</p> <p>d.  Review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046)</p> <p></p> <p>You can read the security bulletins from the ibm.com/support pages. You may be prompted to login using your IBM ID to access the content:</p> <p>https://www.ibm.com/support/pages/node/6525706</p> </li> <li> <p>Return to the Browser tab that contains the IBM WebSphere Automation dashboard. Then return to the \u201cSecurity\u201d view</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#33-update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"3.3 Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced into IBM WebSphere Automation in version 1.4</p> <p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you will leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <p>There are a couple of additional components now included in the product to support this use case. </p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the websphereSecure custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#331-navigate-to-the-server-and-unresolved-cve-to-fix","title":"3.3.1 Navigate to the Server and unresolved CVE to fix","text":"<p>OK, let's apply the recommended iFix to resolve the CVE-2021-44228 vulnerability! </p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p>You will fix it by applying the recommended iFix. (PH42728)</p> <p></p> </li> <li> <p>Click on tWAS_9057_server to view the list of CVEs / vulnerabilities</p> <p></p> <p>The displayed list shows both \"resolved\" and \"unresolved\" CVEs for the selected server. It also shows the \"Risk Level\" to identify the severity of the vulnerabilities, and the number of days the server has been exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click on CVE-2021-44228 to view the CVE information and affected servers</p> <p></p> <p>On the CVE Information page for CVE-2021-44228, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You will do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#332-prepare-fix","title":"3.3.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Simply select the target server to patch and the dialog shows all the affected servers known to WebSphere Automation, and lets you select the wanted fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation should be deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This can be preferable for fix packs because those are significantly larger than interim fixes, especially for traditional WebSphere fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>The Fetch then install fix option automatically downloads the fix and then installs it after the download is complete. </p> <p>Previously fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you will download and install the recommended iFix for the CVE into the tWAS_9057_server    </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE</p> <p>Next to each affected server, there is an option to \"Prepare Fix\". </p> <p>a. Click the Prepare fix link next to tWAS_9057_server for CVE-2021-44228</p> <p></p> <p>b. From the Select fix page, select the PH42728 iFix. Then click the Fetch fix button. </p> IMPORTANT:  If the PH42728 iFix is not listed under the \"resolution\" column as illustrated in the screen shot below, give WebSphere Automation a few more minutes to load the fix meta-data into its database.    To avoid overloading WebSphere Automation, it only loads the meta-data for unresolved CVEs when a WebSphere or Liberty server is registered. And, WSA only loads the meta-data for the unresolved CVEs of the registered server(s).   WSA does this using a background process that spins up several threads. Because there are more unresolved CVEs than number of threads loading the meta-data,  it will take a WSA a couple of iterations to load all of the meta-data for the fixes.    Typically, the process will complete within 8-10 minutes after the server has been registered with WebSphere Automation.  WSA will continue to load fix meta-data as new unresolved CVEs are detected for registered servers. <p></p> <p>This action will cause WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix has been successfully fetched from IBM Fix Central, the status will change to Ready to Install.</p> <p></p> </li> <li> <p>Install the fix to resolve the CVE</p> <p>Once the fix has been successfully fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click on the Install fix action next to the tWAS_9057_server    </p> <p></p> <p>b. When prompted to confirm the installation, click Proceed</p> <p>Note: For this lab, \"Create backup\" option should be set to \"off\".</p> <p></p> Alert: In this lab environment, when the Install Fix action is initiated, a pop-up error dialog may be displayed that may be ignored!  If the \"Status\" field has not changed to \"Failed\", let the installation proceed to completion. <p>c. The installation may take 5 or 6 minutes to complete. Wait until you see the status change to \"Installation complete\"</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click on the ID of the action, and view the runbook.log output file. </p> <p>Common errors we have seen reported in the log is the ssh key and/or the wsa-ansible secret not properly configured in the environment.  </p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully applied the iFix to resolve the critical CVE on the tWAS_9057_server. </p> <p>In the next section of the lab, you will review the updated security posture and fix history of the WebSphere server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#34-view-the-security-posture-and-fix-history-of-your-websphere-servers","title":"3.4 View the security posture and Fix History of your WebSphere servers","text":""},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#341-fix-history","title":"3.4.1 Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations teams fix vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to be able to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> <p>In this section, you will review the security posture and fix history of the two traditional WebSphere servers used in the lab to demonstrate how WebSphere Automation manages the details so you can handle your patching SLAs with ease.</p> <p>Now that you have applied the PH42762 iFix, let's examine the updated security posture of the 9057 WebSphere server.</p> <ol> <li> <p>View the tWAS_9057_server CVE Information</p> <p>a. From the Security view in the WebSphere Automation dashboard, click on the tWAS_9057_server link located under the Server column</p> <p></p> <p>b.  Select the Information tab</p> <p></p> <p>c.  From the Information view, you can see the list of Installed iFixes for the 9057 server.</p> <p></p> <p>Notice that the Fixed date for the iFixes related to the Log4J vulnerability show that they were installed moments ago.</p> <p>However, there are additional iFixes that do not have a Fixed date. That is because these fixes were already applied to the server prior to it being registered with IBM WebSphere Automation.</p> IBM WebSphere Automation reports ALL iFixes that have been applied, regardless of when they were applied. However. It can only determine fix dates, number of days the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere server is registered with IBM WebSphere Automation. </li> <li> <p>View the tWAS_9057_server CVE Vulnerabilities details</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab</p> <p></p> <p>b. From the list of CVEs, sort by Status, and display the Resolved CVEs on top</p> <p></p> <p>The CVEs that are listed as Resolved are all the related Log4JCVEs that were fixed by applying the iFix moments ago; CVE-2021-44228, being the most critical CVE listed.</p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server has been exposed to each vulnerability.</p> </li> <li> <p>View the tWAS_9057_server Fix History details</p> <p>a.  From the tWS_9057_server view, select the Vulnerabilities tab</p> <p>b. Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice the Fixes that have been applied</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were \u201cInstalled\u201d. Next to each Fix you can view the CVEs that were resolved by that Fix, and very importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> <p>Having this record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers</p> <p>a.  Return to the Security view. Then select on the CVEs category</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, let\u2019s focus on CVE-2021-44228. This is one of the CVEs that was fixed in the tWAS_9057_server when you applied the iFix earlier in the lab.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b. View the CVE-2021-44228 CVE from the current view. Notice that the registered server is patched for this CVE. There are now zero registered servers vulnerable to the CVE. </p> <p></p> <p>In this section you have learned how easy IBM WebSphere Automation makes it for your Information technology operations teams to be responsive to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA).</p> <p>You learned how to use the automated fix deployment capabilities to easily fix vulnerable servers directly from the IBM WebSphere Automation UI. </p> <p>You learned how to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#part-4-working-with-websphere-liberty-servers-in-ibm-automation","title":"Part 4: Working with WebSphere Liberty servers in IBM Automation","text":"<p>Registering WebSphere Liberty servers with IBM automation requires that they also register to the usage metering service as WebSphere traditional application servers. While the requirement is the same, the process in which WebSphere Liberty servers register with the metering service is quite different than WebSphere traditional. </p> <p>In Part 4 of the lab, you will perform the following task for WebSphere Liberty servers with IBM Automation. </p> <ol> <li> <p>Register a WebSphere Liberty to IBM Automation, using the URL, API Key, and usage Metering Certificate that you gathered in Part 2 of the lab. </p> <p>Once registered, you will immediately see the list of all unresolved CVEs and applied iFixes for the server. </p> </li> <li> <p>Resolve an identified vulnerabilities in the WebSphere Liberty server, by applying the appropriate iFix documented in the security bulletin for this vulnerability. </p> <p>Liberty servers on the distributed platform are not vulnerable to the well-known log4J vulnerabilities. However, you will resolve a critical vulnerability in the WebSphere Liberty server. </p> <p>Once the iFix is applied, IBM Automation immediately updates the security information for that Liberty application server, showing that the critical vulnerability has been patched.  </p> </li> <li> <p>Review the security posture and Fix History of the WebSphere servers.</p> <p>Once you have patched one of the Liberty servers, view the Fix History and security posture as it relates to resolved and unresolved CVEs. Here you see the Risk Level for the servers, how long servers are exposed to vulnerabilities, and when CVEs were resolved.  </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#41-configuring-liberty-server-v20009","title":"4.1 Configuring Liberty server v20.0.0.9","text":"<p>In this section, you configure Liberty Server version 20.0.0.9 to register to WebSphere Automation. Since Liberty servers are easily created, you will first create a new Liberty server and start it.</p> <ol> <li> <p>Create a new Liberty server, version 20.0.0.9, using the command below:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file:</p> <pre><code>sudo \\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> <p>When prompted for the password for ibmuser, enter: engageibm!</p> <p></p> </li> <li> <p>Start the Liberty server:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection:</p> <p>The command below will import the \u201ccacert.pem\u201d file, that you saved in part 2 of the lab, into the Liberty trust store, thereby trusting the server for secure HTTPS connections from IBM Automation.</p> <pre><code>keytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\n</code></pre> <p></p> <p></p> </li> <li> <p>Configure the usage metering in the new server. This is configured in the Liberty server.xml file.</p> <p>a. Open the server.xml file using the \u201cgedit\u201d editor</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> <p>b.  Add the usageMetering-1.0 feature to the existing features in the &lt;featureManager&gt; element, as illustrated below:</p> <pre><code>&lt;feature&gt;usageMetering-1.0&lt;/feature&gt;\n</code></pre> <p> </p> <p>c.  In the server.xml file, add the usageMetering element below:</p> <pre><code>&lt;usageMetering url=\"${metering-url}\" apiKey=\"${api-key}\" sslRef=\"defaultSSL\"/&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and Close the server.xml file.</p> <p></p> </li> <li> <p>Create a bootstrap.properties file for the Liberty server that contains the variable values for  metering_url and api_key that are defined in the server.xml file. Using variables will make it easier to add the configuration to the Liberty server. </p> <pre><code>echo \"metering-url=$(cat /opt/IBM/WebSphere/metering-url.txt)\" &gt;&gt; /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n\necho \"api-key=$(cat /opt/IBM/WebSphere/api-key.txt)\" &gt;&gt; /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n</code></pre> </li> <li> <p>Use the cat command to view the contents of the bootstrap.properties file to ensure it has proper values assigned to the variables</p> <pre><code>cat /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/bootstrap.properties\n</code></pre> <p>The metering-url and api-key variables should have values as illustrated below. </p> <p></p> <p> </p> </li> <li> <p>Restart the Liberty server so that it can be initialized with the bootstrap.properties file. </p> <p>Note: Use the --clean option when starting the Liberty server, to clear any cached data. </p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\n\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server --clean\n</code></pre> <p></p> <p></p> </li> <li> <p>View the Liberty server \u201cmessages.log\u201d file and find the message indicating that the server was registered to the metering service.  </p> <pre><code>tail /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/logs/messages.log\n</code></pre> <p></p> <p> </p> <p>The Liberty009 server is now successfully registered with IBM Automation and should be displayed in the IBM Automation Dashboard under Application runtimes &gt; Security - Servers.</p> <p></p> </li> <li> <p>Go back to the browser, navigate to the Security -&gt; Servers dashboard, and confirm that the Liberty_20009_server was registered in IBM Automation</p> <p></p> <p></p> IMPORTANT:  If the IBM Automation UI does not automatically detect the Liberty server that you registered, then it is extremely likely that the server.xml file or the bootstrap.properties file has not been configured correctly.  1. Review the server.xml configuration.  \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering-1.0 feature is included in the list of features.  2. Review the bootstrap.properties file \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering url is CORRECT. No additional characters or spaces.  \u00a0\u00a0\u00a0\u00a0- Ensure the usageMetering apiKey is CORRECT. No additional characters or spaces. <p>If the Liberty server was successfully registered, it is displayed in the Application Runtimes in IBM automation UI.</p> TIP: Note: New vulnerabilities are discovered constantly, so the number of CVEs discovered may be different than illustrated. <p>The dashboard shows that this server is vulnerable for some unresolved CVEs.</p> <p></p> </li> <li> <p>Click on the \u201c+2 more\u201d under the Unresolved CVEs for the Liberty_20009_server, to see the list of the unresolved CVEs, including the CVE-2020-10693.</p> <p>Note that the +2 could be different if additional CVEs have been discovered since the time of this writing. </p> <p></p> <p></p> <p>a. The list of Unresolved CVEs for Liberty version 20.0.0.9 should include CVE-2020-10693</p> <p></p> <p></p> </li> <li> <p>Check your email that you registered with IBM automation for a notification of new vulnerability. </p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#42-review-cve-2020-10693-to-understand-the-remediation-options-for-the-vulnerability","title":"4.2 Review CVE-2020-10693 to understand the remediation options for the vulnerability","text":"<p>In this section, you will review the details of the critical CVE-2020-10693 CVE and determine the appropriate remediation options to resolve the CVE.</p> <p>In this lab, you will apply the iFix that is documented in the IBM security bulletin to resolve the vulnerability in the Liberty 20009 server, as reported in CVE-2020-10693.</p> <ol> <li> <p>View the CVE information for CVE-2020-10963</p> <p>a. Click the Liberty_2009_server link under the \"Server\" column to see CVE and Fix History for this Liberty server</p> <p></p> <p>b. Click on CVE-2020-10693 CVE located in the Vulnerabilities &gt; CVEs view</p> <p></p> <p>c.  The CVE information page for CVE-2020-10693 is displayed.</p> <p></p> <p>From the CVE Information page that is displayed, you can see important details about this CVE.</p> <p>Here you can see the following details:</p> <ul> <li> <p>Risk Level \u201cMedium (5.3)\u201d</p> </li> <li> <p>Date the vulnerability was detected in the \u201cregistered\u201d server</p> </li> <li> <p>Number of days the Liberty server has been \u201cexposed\u201d to the vulnerability</p> </li> <li> <p>List of affected servers that are registered with IBM WebSphere Automation.</p> </li> <li> <p>Link to the IBM security bulletin for the CVE</p> </li> </ul> <p>Note: The Days Exposed and date detected are expressed from the point of time that the server is registered with IBM WebSphere Automation.</p> </li> <li> <p>Click on the View Link to view the IBM security bulletin for this CVE.</p> <p></p> <p>The security bulletin is displayed in a new browser tab.</p> </li> <li> <p>From the Web Browser, review the security bulletin to learn about the vulnerability, versions of WebSphere affected, and options for remediating the vulnerability.</p> <p></p> <p>As you see, IBM WebSphere Automation makes it easy for you to get to the related security bulletins directly from the CVE information within the WebSphere Automation dashboard so you can have all the details and remediation options at your fingertips</p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2020-10693</p> <p></p> <p></p> <p>In the next section of the lab, you will apply the Interim Fix PH29942 to remediate the unresolved CVE.</p> </li> <li> <p>When you finish reviewing the security bulletin, return to the Browser tab that contains the IBM WebSphere Automation dashboard. Then return to the \u201cSecurity\u201d view</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#43-update-liberty-server-v20009-to-fix-the-vulnerability","title":"4.3 Update Liberty server v20.0.0.9 to fix the vulnerability","text":"<p>Automated installation of WebSphere and Liberty fixpaks and iFixes was introduced into IBM WebSphere Automation in version 1.4</p> <p>You can automatically deploy fixes to servers in your managed server inventory through the WebSphere Automation UI. You must have a user profile with at least the Modify WebSphere inventory permission, and the servers that you want to fix must be registered and configured for fix installation with WebSphere Automation.</p> <p>In this section, you will leverage the built-in capabilities in IBM WebSphere Automation to automatically prepare and install the recommended iFix to resolve one vulnerability in the Liberty Server v20.0.0.9. </p> <p>There are a couple of additional components now included in the product to support this use case. </p> <ul> <li> <p>Fix manager</p> <p>The WebSphere Automation fix manager uses credentials that you provide to access IBM Fix Central to request fixes. Fixes are fetched and stored in the file storage defined for the websphereSecure custom resource. The fix manager manages the storage space according to frequency of use, deleting older fixes to make room for more recently requested fixes.</p> </li> <li> <p>Installation manager</p> <p>The WebSphere Automation installation manager communicates with the registered server using the administrator privileges that you provide. When you initiate the installation of a fix, the installation manager ensures that the target server has sufficient space for the fix, transfers the fix to the target server, installs the fix, and creates a log file of the steps taken. If you request a backup of the server environment as part of the fix installation, the installation manager checks for sufficient disk space on the server, and creates an archive of the Installation Manager, Installation Manager data, and WebSphere Application Server or WebSphere Application Server Liberty server installation directories.</p> </li> </ul>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#431-navigate-to-the-server-and-unresolved-cve-to-fix","title":"4.3.1 Navigate to the Server and unresolved CVE to fix","text":"<p>OK, let's apply the recommended iFix to resolve the CVE-2020-10693 vulnerability in the Liberty server. </p> <ol> <li> <p>Notice in the IBM Automation console that Liberty20009_server is vulnerable to CVE-2020-10693.</p> <p></p> </li> <li> <p>Expand the list of unresolved CVEs. Notice CVE-2020-10693 is listed.  </p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2020-10693 </p> <p></p> <p>Now, you will fix it by applying the recommended iFix. (PH29942)</p> <p></p> </li> <li> <p>Click on Liberty_20009_server to view the list of CVEs / vulnerabilities</p> <p></p> <p>The displayed list shows both \"resolved\" and \"unresolved\" CVEs for the selected server. It also shows the \"Risk Level\" to identify the severity of the vulnerabilities, and the number of days the server has been exposed to the vulnerability. </p> <p></p> </li> <li> <p>Click on CVE-2020-10693 to view the CVE information and affected servers</p> <p></p> <p>On the CVE Information page for CVE-2020-10693, a list of Affected Servers is displayed along with the option to Prepare fix. </p> <p>DO NOT prepare fix yet. You will do that in the following steps. </p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#432-prepare-fix","title":"4.3.2 Prepare Fix","text":"<p>The Fix Deployment capability of WebSphere Automation delivers automation that determines which APARs and interim fixes resolve a specific vulnerability, and enables one-click download and deploy of fixes. </p> <p>Selection of the wanted iFix or published fix pack is exposed through the Prepare fix dialog, which can be found in the CVE details view. Simply select the target server to patch and the dialog shows all the affected servers known to WebSphere Automation, and lets you select the wanted fix.</p> <p>After you select the fix, WebSphere Automation provides two options: </p> <ul> <li> <p>Fetch fix: </p> <p>If installation should be deferred to a later time, then the Fetch fix option causes the fix to be downloaded and stored for later use. </p> <p>This can be preferable for fix packs because those are significantly larger than interim fixes, especially for traditional WebSphere / Liberty fix packs.</p> </li> <li> <p>Fetch then install fix: </p> <p>The Fetch then install fix option automatically downloads the fix and then installs it after the download is complete. </p> <p>Previously fetched fixes are stored within WebSphere Automation for immediate reuse. </p> <p> </p> <p>Now you will download and install the recommended iFix for the CVE into the Liberty_20009_server    </p> </li> </ul> <ol> <li> <p>Download the recommended iFix to resolve the CVE</p> <p>Next to each affected server, there is an option to \"Prepare Fix\". </p> <p>a. Click the Prepare fix link next to Liberty_20009_server </p> <p></p> <p>b. From the Select fix page, select the PH29942 iFix. Then click the Fetch fix button. </p> <p></p> <p>This action will cause WebSphere Automation to fetch the fix from IBM Fix Central, using the credentials that you configured at the beginning of the lab. </p> <p>The Status field automatically updates as the action progresses. </p> <p></p> <p>When the fix has been successfully fetched from IBM Fix Central, the status will change to Ready to Install.</p> <p></p> </li> <li> <p>Install the fix to resolve the CVE</p> <p>Once the fix has been fetched, the action to Install the fix is made available next to the affected server.</p> <p>a. Click on the Install fix action next to the Liberty_20009_server    </p> <p></p> <p>b. When prompted to confirm the installation, click Proceed</p> <p></p> Alert: In this lab environment, when the Install Fix action is initiated, a pop-up error dialog may be displayed that may be ignored!  If the \"Status\" field has not changed to \"Failed\", let the installation proceed to completion. <p>c. The installation may take 5 or 6 minutes to complete. Wait until you see the status change to \"Installation complete\"</p> <p></p> <p>TROUBLESHOOTING TIP</p> <p>If the installation fails, click on the ID of the action, and view the runbook.log output file. </p> <p>Common errors we have seen reported in the log is the ssh key and/or the wsa-ansible secret not properly configured in the environment.  </p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully applied the iFix to resolve the critical CVE on the Liberty_20009_server. </p> <p>In the next section of the lab, you will review the updated security posture and fix history of the Liberty server. </p> <p></p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#44-view-the-security-posture-and-fix-history-of-your-liberty-server","title":"4.4 View the security posture and Fix History of your Liberty server","text":""},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#441-fix-history","title":"4.4.1 Fix history","text":"<p>Information technology operations teams must be responsive to the latest security vulnerabilities. A patching service-level agreement (SLA) requires that an operations teams fix vulnerabilities within 30, 60 or 90 days (or faster) based on vulnerability severity.</p> <p>Therefore, it is vital to be able to demonstrate the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> <p>A record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> <p>In this section, you will review the security posture and fix history of the two traditional WebSphere servers used in the lab to demonstrate how WebSphere Automation manages the details so you can handle your patching SLAs with ease.</p> <p>Now that you have applied the PH29942 iFix, let\u2019s examine the updated security posture of the Liberty server.</p> <ol> <li> <p>View the Liberty_20009_server CVE Information</p> <p>a.  From the Security view in the WebSphere Automation dashboard, click on the Liberty_20009_server link located under the Server column</p> <p></p> <p>b.  Select the Information tab</p> <p></p> <p>c. From the Information view, you can see the list of Installed iFixes for the Liberty server.</p> <p></p> <p>Notice that the Fixed date for the iFixes related to the vulnerability show that it was fixed moments ago.</p> <p></p> <p>Information:</p> <p>IBM WebSphere Automation reports ALL iFixes that have been applied, regardless of when they were applied. However. It can only determine fix dates, number of days the server was vulnerable, and vulnerability detected date for servers from the time the WebSphere server is registered with IBM WebSphere Automation.</p> <p>If the servers already had iFixes installed prior to being registered to IBM WebSphere Automation, they would be listed, but the installed date in not known and will be blank.</p> </li> <li> <p>View the Liberty_20009_server CVE Vulnerabilities details</p> <p>a.  From the Liberty_20009_server view, select the Vulnerabilities tab</p> <p></p> <p>b.  From the list of CVEs, sort by Status, and display the Resolved CVEs on top. The CVE-2020-10693 is now Resolved.</p> <p></p> <p>As illustrated above, the Vulnerabilities view provides the details about when the vulnerability was detected in this specific server, and how many days the server has been exposed to each vulnerability.</p> </li> <li> <p>View the Liberty_20009_server Fix History details</p> <p>a.  From the Liberty_20009_server view, select the Vulnerabilities tab</p> <p>b.  Select Fix History, as illustrated below:</p> <p></p> </li> <li> <p>Notice there is now a record that shows that the iFix has been installed, and the date te server was patched.</p> <p></p> <p>Fix history shows changes to the server. You can see the action that was taken, and in this case, the Fixes were \u201cInstalled\u201d. Next to each Fix you can view the CVEs that were resolved by that Fix, and very importantly, the date that the Fix was applied that resolved specific vulnerabilities.</p> <p>Having this record of all detected security vulnerabilities (CVEs) and the resolution status makes it easy to respond to patching SLA inquiries. WebSphere Automation keeps track of when vulnerabilities were detected, when and how they were fixed, and how many days servers were exposed.</p> </li> <li> <p>You can also monitor the status of common vulnerabilities and exposures (CVEs) that affect your servers</p> <p>a.  Return to the Security view. Then select on the CVEs category</p> <p></p> <p>Using this view, you can easily determine which servers are affected by specific CVEs.</p> <p>As an example, let\u2019s focus on CVE-2020-10693. This is the CVEs that was fixed in the Liberty when you applied the iFix moments ago.</p> <p>This CVEs view helps your team quicky identify how many servers have been fixed, and how many remain exposed to specific CVEs.</p> <p>b.  Locate and view the CVE-2020-10693 CVE from the current view. Sort the list of CVEs by Fixed Servers, which will list the CVEs that have been applied to the Liberty server at the top of the list.</p> <p></p> </li> <li> <p>Identify the Liberty servers that this CVE has been resolved, and potentially still unresolved.</p> <p>a. From the CVE view, filter by CVE: CVE-2020-10693</p> <p></p> <p>a.  Click on the CVE-2020-10693 link under the CVE column</p> <p></p> <p>b.  Note the Liberty_20009_server Vulnerability Status is \u201cResolved\u201d.</p> <p></p> <p>In this section you have learned how easy IBM Automation makes it for your Information technology operations teams to be responsive to the latest security vulnerabilities, ensuring that there is a record of patching critical CVEs in accordance with your patching service-level agreement (SLA.</p> <p>You learned how to demonstrate when the date that a vulnerability was detected, and the date that the fix was applied. WebSphere Automation provides a detailed history of fixes applied to each registered server, including information about when each issue was detected, when and how it was fixed, and how many days servers were exposed.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#summary","title":"Summary","text":"<p>Congratulations! You have completed the WebSphere Automation lab.</p> <p>With automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.</p> <p>IBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.</p> <p>IBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.</p> <p>To learn more about IBM WebSphere Automation, visit ibm.com/cloud/websphere-automation.</p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#appendix-1-manual-installation-of-websphere-ifix-to-resolve-cve","title":"Appendix 1: Manual installation of WebSphere iFix to resolve CVE","text":""},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#update-twas-server-v9057-to-fix-the-log4j-vulnerability","title":"Update tWAS server v9.0.5.7 to fix the LOG4J vulnerability","text":"<p>In this section, you will apply an iFix to the traditional WebSphere 9.0.5.7 server to remove the Log4J vulnerability reported as CVE-2021-44228.</p> <ol> <li> <p>Notice in the IBM Automation console that tWAS 9.0.5.7 is vulnerable to CVE-2021-44228.</p> <p></p> <p>Now, you will fix it by applying the appropriate iFix.</p> <p></p> </li> <li> <p>Expand the list of unresolved CVEs. IBM Automation also detected the additional unresolved CVEs related to the Log4J vulnerability, which are highlighted below and documented in the security bulletin. </p> <p></p> <p>Note: The IBM Security Bulletin associated with this vulnerability documents the options for remediating CVE-2021-44228 and related CVEs (CVE-2021-4104 and CVE-2021-45046) </p> <p></p> <p></p> <p>You can read the security bulletin here. You may be prompted to login using your IBM ID to access the content: </p> <p>https://www.ibm.com/support/pages/security-bulletin-multiple-vulnerabilities-apache-log4j-affect-ibm-websphere-application-server-and-ibm-websphere-application-server-liberty-cve-2021-4104-cve-2021-45046</p> <p>Now, you will fix it by applying the appropriate iFix. (PH42762)</p> <p></p> </li> <li> <p>First, stop the server, wait until it has stopped:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\n</code></pre> <p></p> <p></p> </li> <li> <p>Run the following script to install the iFix:</p> <pre><code>sudo /iFix/PH42762-LOG4J/imcl_ifix_install.sh 9057\n</code></pre> <p>When prompted for the password for the ibmadmin user, enter: engageibm!</p> <p></p> <p></p> </li> <li> <p>Start the server once the iFix installation has completed:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 were removed from the unresolved CVEs list for the tWAS 9.0.5.7 server.</p> <p></p> <p></p> </li> <li> <p>Also, you can see on the right under \u201cApplied iFixes\u201d the PH42762 fix is now listed as applied. </p> <p></p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#update-twas-server-v9057-to-introduce-the-vulnerability-back-optional","title":"Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)","text":"<p>You can remove the iFix that was applied to confirm that the CVE-2021-44228 shows up in the unresolved CVE list.</p> <ol> <li> <p>Stop the server:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Uninstall the iFix:</p> <pre><code>sudo /iFix/PH42762-LOG4J/imcl_ifix_uninstall.sh 9057\n</code></pre> <p>When prompted for the password for the ibmadmin user, enter: engageibm!</p> <p></p> </li> <li> <p>Start the server:</p> <pre><code>/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\n</code></pre> </li> <li> <p>Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-44228, CVE-2021-4104, and CVE-2021-45046 are once again listed as unresolved CVEs for the tWAS 9.0.5.7 server.</p> <p></p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#appendix-2-manual-installation-of-liberty-ifix-to-resolve-cve","title":"Appendix 2: Manual installation of Liberty iFix to resolve CVE","text":""},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#update-liberty-server-v20009-to-fix-the-vulnerability","title":"Update Liberty server v20.0.0.9 to fix the vulnerability","text":"<p>In this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix by only updating the configuration. Later, you apply an iFix to solve the vulnerability.</p>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#updating-configurations","title":"Updating configurations","text":"<p>Liberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See CVE-2020-10693 for more info.</p> <p>We should resolve this by applying the iFix PH29942 as documented in the CVE-2020-10693. However, for the lab, we can also do a quick test by unconfiguring this feature, to illustrate that IBM Automation does interrogate the Liberty Server configuration, to determine if a Liberty server is impacted by a CVE that is the result of a specific configuration feature. </p> <p>This is valuable because IBM Automation can pinpoint specific servers that are impacted not ONLY based on the version of server, but also the specific configuration that is impacted by the CVE.</p> <ol> <li> <p>Edit the server.xml, using the command below:</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> </li> <li> <p>Comment out the beanValidation-2.0 feature:</p> <pre><code>&lt;!-- &lt;feature&gt;beanValidation-2.0&lt;/feature&gt; --&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and close the server.xml file.</p> <p></p> </li> <li> <p>Back to your browser, check that the Liberty 20.0.0.9 server does NOT show the CVE-2020-10693 vulnerability. The update is picked up automatically.</p> <p></p> <p>Great, you removed the vulnerability by updating the configuration.</p> </li> </ol>"},{"location":"1597-WebSphere_Automation/archived/README-Skytap/#resolve-the-issue-by-applying-an-ifix","title":"Resolve the issue By Applying an iFix","text":"<p>However, instead of removing the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability.</p> <ol> <li> <p>First, add back the beanValidation feature:</p> <pre><code>gedit /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\n</code></pre> </li> <li> <p>Uncomment the beanValidation-2.0 feature:</p> <pre><code>&lt;feature&gt;beanValidation-2.0&lt;/feature&gt;\n</code></pre> <p></p> <p></p> </li> <li> <p>Save and Close the server.xml file.</p> <p></p> </li> <li> <p>Back to the browser, make sure the vulnerability shows up again.</p> <p></p> <p></p> <p>Next, resolve the CVE by applying the recommended iFix (PH29942) documented in the security bulletin for this vulnerability. </p> <p></p> </li> <li> <p>You need to stop the server before the iFix can be applied. Return to the terminal window and run the command below to stop the Liberty2009 server.</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\n</code></pre> </li> <li> <p>Now, apply the iFix, by running the following command.</p> <p>Note: We have already downloaded the iFixes used for this lab. They are stored in /iFix directory on the STUDENT VM.</p> <pre><code>sudo /iFix/PH29942/imcl_ifix_install.sh 20009\n</code></pre> <p>When prompted for the password for ibmuser, enter: engageibm!</p> <p></p> <p></p> </li> <li> <p>Great, the iFix was applied. Now, start the server again:</p> <pre><code>/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\n</code></pre> </li> <li> <p>Return to the WebSphere Automation Dashboard. You should notice that the CVE-2020-10693 was removed from the Liberty_20009_server.</p> <p></p> <p></p> <p></p> </li> <li> <p>Note that the IBM Automation dashboard shows the iFix PH29942 has been applied to the Liberty_20009_server.</p> <p></p> </li> </ol>"}]}